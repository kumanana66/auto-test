{"uid":"25e5b45684dec27d","name":"test_user_auth[case27]","fullName":"tests.test_user_auth#test_user_auth","historyId":"6ca1615d61e7a42e3b6094130ca91c4c","time":{"start":1753973832941,"stop":1753973832973,"duration":32},"status":"failed","statusMessage":"AssertionError: 状态码不符：预期400，实际403，完整response：<Response [403]>\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code","statusTrace":"case = {'case_id': 'auth_028', 'expected_code': 400, 'expected_message': '仅支持JPG、PNG格式的图片', 'expected_success': False, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5NzM4MzEsImV4cCI6MTc1Mzk4MTAzMX0.OH8cQ6DnClzKDkcnLOdoIjUySD9t_EeILkg12TRvR_w'\nsmall_jpg_image = 'small_4619.jpg', large_jpg_image = 'large_8657.jpg'\nsmall_png_image = 'small_7373.png', large_png_image = 'large_4964.png'\nnon_image_file = 'test_8219.txt'\n\n    @allure.feature(\"用户认证模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_user_auth(case, auth_token, small_jpg_image, large_jpg_image, small_png_image, large_png_image, non_image_file):\n        allure.story(case[\"name\"])\n        allure.title(f\"{case['case_id']}: {case['name']}\")\n    \n        # 文件映射：用例文件名 -> 实际测试文件\n        file_map = {\n            \"test_avatar.jpg\": small_jpg_image,\n            \"large_avatar.jpg\": large_jpg_image,\n            \"test_avatar.png\": small_png_image,\n            \"large_avatar.png\": large_png_image,\n            \"test_file.txt\": non_image_file\n        }\n    \n        # 预处理请求\n        request_data = preprocess_request(case, auth_token, file_map)\n    \n        # 注册用例单独处理验证码\n        if (case[\"case_id\"].startswith(\"auth_00\")\n            and case[\"method\"] == \"POST\"\n            and case[\"url\"] == \"/auth/register\"):\n    \n            # 获取注册邮箱\n            email = request_data[\"json\"][\"email\"]\n            # 发送并获取验证码\n            verify_code = send_and_get_verify_code(email)\n            # 填充验证码到请求参数\n            request_data[\"json\"][\"verifyCode\"] = verify_code\n    \n        # 发送请求\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            files=request_data.get(\"files\"),\n            token=auth_token if case[\"case_id\"] != \"auth_029\" else None  # 未登录用例移除token\n        )\n    \n        # 断言\n>       assert_response(\n            response,\n            expected_code=case[\"expected_code\"],\n            expected_success=case.get(\"expected_success\"),\n            expected_message=case.get(\"expected_message\")\n        )\n\ntests\\test_user_auth.py:71: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [403]>, expected_code = 400, expected_success = False\nexpected_message = '仅支持JPG、PNG格式的图片'\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response}\"\nE       AssertionError: 状态码不符：预期400，实际403，完整response：<Response [403]>\nE       assert 403 == 400\nE        +  where 403 = <Response [403]>.status_code\n\nutils\\test_utils.py:7: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":14,"retriesStatusChange":true,"beforeStages":[{"name":"auth_token","time":{"start":1753973830927,"stop":1753973831277,"duration":350},"status":"passed","steps":[{"name":"发送请求：'POST' '/auth/login'","time":{"start":1753973830928,"stop":1753973831276,"duration":348},"status":"passed","steps":[],"attachments":[{"uid":"612d1a1fbaf8984c","name":"请求信息","source":"612d1a1fbaf8984c.json","type":"application/json","size":64},{"uid":"7aa5df5c75205ae5","name":"响应信息","source":"7aa5df5c75205ae5.txt","type":"text/plain","size":20},{"uid":"177ff80db0d32b4b","name":"响应体","source":"177ff80db0d32b4b.json","type":"application/json","size":214}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/login'"},{"name":"headers","value":"None"},{"name":"params","value":"None"},{"name":"json","value":"{'username': 'admin1155', 'password': 'admin1155'}"},{"name":"files","value":"None"},{"name":"token","value":"None"}],"attachmentsCount":3,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":3,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":1},{"name":"small_jpg_image","time":{"start":1753973831278,"stop":1753973831607,"duration":329},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_jpg_image","time":{"start":1753973831607,"stop":1753973832450,"duration":843},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"small_png_image","time":{"start":1753973832451,"stop":1753973832490,"duration":39},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_png_image","time":{"start":1753973832490,"stop":1753973832933,"duration":443},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"non_image_file","time":{"start":1753973832934,"stop":1753973832937,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: 状态码不符：预期400，实际403，完整response：<Response [403]>\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code","statusTrace":"case = {'case_id': 'auth_028', 'expected_code': 400, 'expected_message': '仅支持JPG、PNG格式的图片', 'expected_success': False, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5NzM4MzEsImV4cCI6MTc1Mzk4MTAzMX0.OH8cQ6DnClzKDkcnLOdoIjUySD9t_EeILkg12TRvR_w'\nsmall_jpg_image = 'small_4619.jpg', large_jpg_image = 'large_8657.jpg'\nsmall_png_image = 'small_7373.png', large_png_image = 'large_4964.png'\nnon_image_file = 'test_8219.txt'\n\n    @allure.feature(\"用户认证模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_user_auth(case, auth_token, small_jpg_image, large_jpg_image, small_png_image, large_png_image, non_image_file):\n        allure.story(case[\"name\"])\n        allure.title(f\"{case['case_id']}: {case['name']}\")\n    \n        # 文件映射：用例文件名 -> 实际测试文件\n        file_map = {\n            \"test_avatar.jpg\": small_jpg_image,\n            \"large_avatar.jpg\": large_jpg_image,\n            \"test_avatar.png\": small_png_image,\n            \"large_avatar.png\": large_png_image,\n            \"test_file.txt\": non_image_file\n        }\n    \n        # 预处理请求\n        request_data = preprocess_request(case, auth_token, file_map)\n    \n        # 注册用例单独处理验证码\n        if (case[\"case_id\"].startswith(\"auth_00\")\n            and case[\"method\"] == \"POST\"\n            and case[\"url\"] == \"/auth/register\"):\n    \n            # 获取注册邮箱\n            email = request_data[\"json\"][\"email\"]\n            # 发送并获取验证码\n            verify_code = send_and_get_verify_code(email)\n            # 填充验证码到请求参数\n            request_data[\"json\"][\"verifyCode\"] = verify_code\n    \n        # 发送请求\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            files=request_data.get(\"files\"),\n            token=auth_token if case[\"case_id\"] != \"auth_029\" else None  # 未登录用例移除token\n        )\n    \n        # 断言\n>       assert_response(\n            response,\n            expected_code=case[\"expected_code\"],\n            expected_success=case.get(\"expected_success\"),\n            expected_message=case.get(\"expected_message\")\n        )\n\ntests\\test_user_auth.py:71: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [403]>, expected_code = 400, expected_success = False\nexpected_message = '仅支持JPG、PNG格式的图片'\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response}\"\nE       AssertionError: 状态码不符：预期400，实际403，完整response：<Response [403]>\nE       assert 403 == 400\nE        +  where 403 = <Response [403]>.status_code\n\nutils\\test_utils.py:7: AssertionError","steps":[{"name":"发送请求：'POST' '/auth/upload/avatar'","time":{"start":1753973832943,"stop":1753973832968,"duration":25},"status":"passed","steps":[],"attachments":[{"uid":"5b1b9b59dc59741a","name":"请求信息","source":"5b1b9b59dc59741a.json","type":"application/json","size":16},{"uid":"23ca453784fba15c","name":"响应信息","source":"23ca453784fba15c.txt","type":"text/plain","size":20},{"uid":"7d8921b4fd77abdf","name":"响应体","source":"7d8921b4fd77abdf.json","type":"application/json","size":0}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/upload/avatar'"},{"name":"headers","value":"{'Authorization': 'Bearer ', 'Content-Type': 'multipart/form-data'}"},{"name":"params","value":"{}"},{"name":"json","value":"{}"},{"name":"files","value":"{'file': <_io.BufferedReader name='test_8219.txt'>}"},{"name":"token","value":"'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5NzM4MzEsImV4cCI6MTc1Mzk4MTAzMX0.OH8cQ6DnClzKDkcnLOdoIjUySD9t_EeILkg12TRvR_w'"}],"attachmentsCount":3,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"验证响应：状态码400，消息'仅支持JPG、PNG格式的图片'","time":{"start":1753973832970,"stop":1753973832970,"duration":0},"status":"failed","statusMessage":"AssertionError: 状态码不符：预期400，实际403，完整response：<Response [403]>\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code\n","statusTrace":"  File \"D:\\Anaconda3\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"D:\\工作记录\\项目说明\\api_test\\utils\\test_utils.py\", line 7, in assert_response\n    assert response.status_code == expected_code, \\\n","steps":[],"attachments":[],"parameters":[{"name":"response","value":"<Response [403]>"},{"name":"expected_code","value":"400"},{"name":"expected_success","value":"False"},{"name":"expected_message","value":"'仅支持JPG、PNG格式的图片'"}],"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[{"uid":"eef7cf25677edaa","name":"stdout","source":"eef7cf25677edaa.txt","type":"text/plain","size":183}],"parameters":[],"attachmentsCount":4,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":2},"afterStages":[{"name":"non_image_file::0","time":{"start":1753973833026,"stop":1753973833033,"duration":7},"status":"broken","statusMessage":"PermissionError: [WinError 32] 另一个程序正在使用此文件，进程无法访问。: 'test_8219.txt'\n","statusTrace":"  File \"D:\\Anaconda3\\Lib\\site-packages\\allure_commons\\_allure.py\", line 231, in __call__\n    return self._fixture_function(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"D:\\Anaconda3\\Lib\\site-packages\\_pytest\\fixtures.py\", line 911, in _teardown_yield_fixture\n    next(it)\n  File \"D:\\工作记录\\项目说明\\api_test\\tests\\conftest.py\", line 95, in non_image_file\n    os.remove(file_path)\n","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"large_png_image::0","time":{"start":1753973833039,"stop":1753973833051,"duration":12},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"small_png_image::0","time":{"start":1753973833059,"stop":1753973833070,"duration":11},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_jpg_image::0","time":{"start":1753973833079,"stop":1753973833116,"duration":37},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"small_jpg_image::0","time":{"start":1753973833124,"stop":1753973833134,"duration":10},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"labels":[{"name":"feature","value":"用户认证模块"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_user_auth"},{"name":"host","value":"CYJ"},{"name":"thread","value":"1232-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_user_auth"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"case","value":"{'case_id': 'auth_028', 'name': '上传非图片格式文件', 'method': 'POST', 'url': '/auth/upload/avatar', 'headers': {'Authorization': 'Bearer ', 'Content-Type': 'multipart/form-data'}, 'files': {'file': 'test_file.txt'}, 'expected_code': 400, 'expected_success': False, 'expected_message': '仅支持JPG、PNG格式的图片'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"c14d58ba6c8b890f","status":"failed","statusDetails":"AssertionError: 状态码不符：预期400，实际403，完整response：<Response [403]>\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code","time":{"start":1753973678363,"stop":1753973678379,"duration":16}},{"uid":"4353b047409f9fba","status":"failed","statusDetails":"AssertionError: 状态码不符：预期400，实际403，完整response：<Response [403]>\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code","time":{"start":1753972614768,"stop":1753972614802,"duration":34}},{"uid":"20ec2393d796b769","status":"failed","statusDetails":"AssertionError: 状态码不符：预期400，实际403，完整response：<Response [403]>\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code","time":{"start":1753971285668,"stop":1753971285698,"duration":30}},{"uid":"8542a282f62e5b5d","status":"failed","statusDetails":"AssertionError: 状态码不符：预期400，实际403，完整response:<Response [403]>\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code","time":{"start":1753970536105,"stop":1753970536138,"duration":33}},{"uid":"34f0821b84fa3c5f","status":"broken","statusDetails":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1753970310550,"stop":1753970310567,"duration":17}},{"uid":"10e6b31619cfedb8","status":"broken","statusDetails":"UnboundLocalError: cannot access local variable 'json_data' where it is not associated with a value","time":{"start":1753969976243,"stop":1753969976257,"duration":14}},{"uid":"d79f9120ca8d1cac","status":"failed","statusDetails":"AssertionError: 状态码不符：预期400，实际403\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code","time":{"start":1753969642738,"stop":1753969642775,"duration":37}},{"uid":"867bdac1c103d0f2","status":"failed","statusDetails":"AssertionError: 状态码不符：预期400，实际403\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code","time":{"start":1753969409824,"stop":1753969409857,"duration":33}},{"uid":"1c40191453ef5594","status":"failed","statusDetails":"AssertionError: 状态码不符：预期400，实际403\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code","time":{"start":1753969148581,"stop":1753969148631,"duration":50}},{"uid":"2922a197b4f5e4b","status":"failed","statusDetails":"AssertionError: 状态码不符：预期400，实际403\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code","time":{"start":1753968190767,"stop":1753968190786,"duration":19}},{"uid":"fd00e6fd2f51e5c8","status":"broken","statusDetails":"KeyError: 'test_file.txt'","time":{"start":1753967371980,"stop":1753967371981,"duration":1}},{"uid":"a87f272b18c64d7e","status":"broken","statusDetails":"KeyError: 'url'","time":{"start":1753967267884,"stop":1753967267884,"duration":0}},{"uid":"9fb17028236fd26b","status":"broken","statusDetails":"requests.exceptions.ConnectionError: HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /api/auth/login (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x000001657E09DE50>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。'))","time":{"start":1753967196374,"stop":1753967196374,"duration":0}},{"uid":"7b4a2ddf893a4475","status":"broken","statusDetails":"KeyError: 'url'","time":{"start":1753966890001,"stop":1753966890001,"duration":0}}],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"25e5b45684dec27d.json","parameterValues":["{'case_id': 'auth_028', 'name': '上传非图片格式文件', 'method': 'POST', 'url': '/auth/upload/avatar', 'headers': {'Authorization': 'Bearer ', 'Content-Type': 'multipart/form-data'}, 'files': {'file': 'test_file.txt'}, 'expected_code': 400, 'expected_success': False, 'expected_message': '仅支持JPG、PNG格式的图片'}"]}