{"uid":"6ff1c1585b29c4a6","name":"test_user_auth[case21]","fullName":"tests.test_user_auth#test_user_auth","historyId":"202a3269a82cd80ae4d617241851e415","time":{"start":1753970297284,"stop":1753970297316,"duration":32},"status":"broken","statusMessage":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"self = <Response [403]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\nD:\\Anaconda3\\Lib\\site-packages\\requests\\models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nD:\\Anaconda3\\Lib\\site-packages\\simplejson\\__init__.py:514: in loads\n    return _default_decoder.decode(s)\nD:\\Anaconda3\\Lib\\site-packages\\simplejson\\decoder.py:386: in decode\n    obj, end = self.raw_decode(s)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <simplejson.decoder.JSONDecoder object at 0x0000028C9AC2A990>, s = '', idx = 0\n_w = <built-in method match of re.Pattern object at 0x0000028C9A8EB440>, _PY3 = True\n\n    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` or ``unicode``\n        beginning with a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n        Optionally, ``idx`` can be used to specify an offset in ``s`` where\n        the JSON document begins.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        if idx < 0:\n            # Ensure that raw_decode bails on negative indexes, the regex\n            # would otherwise mask this behavior. #98\n            raise JSONDecodeError('Expecting value', s, idx)\n        if _PY3 and not isinstance(s, str):\n            raise TypeError(\"Input string must be text, not bytes\")\n        # strip UTF-8 bom\n        if len(s) > idx:\n            ord0 = ord(s[idx])\n            if ord0 == 0xfeff:\n                idx += 1\n            elif ord0 == 0xef and s[idx:idx + 3] == '\\xef\\xbb\\xbf':\n                idx += 3\n>       return self.scan_once(s, idx=_w(s, idx).end())\nE       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nD:\\Anaconda3\\Lib\\site-packages\\simplejson\\decoder.py:416: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\ncase = {'case_id': 'auth_022', 'expected_code': 400, 'expected_message': '当前密码不正确', 'expected_success': False, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5NzAyNTAsImV4cCI6MTc1Mzk3NzQ1MH0.7KRd3zH2Ah86OC9IZ72g6zhNHPPVgyth8JYj4QBjli0'\nsmall_jpg_image = 'small_5342.jpg', large_jpg_image = 'large_1048.jpg'\nsmall_png_image = 'small_3842.png', large_png_image = 'large_2020.png', non_image_file = 'test_7334.txt'\n\n    @allure.feature(\"用户认证模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_user_auth(case, auth_token, small_jpg_image, large_jpg_image, small_png_image, large_png_image, non_image_file):\n        allure.story(case[\"name\"])\n        allure.title(case[\"case_id\"] + \": \" + case[\"name\"])\n    \n        # 文件映射\n        file_map = {\n            \"test_avatar.jpg\": small_jpg_image,\n            \"large_avatar.jpg\": large_jpg_image,\n            \"test_avatar.png\": small_png_image,\n            \"large_avatar.png\": large_png_image,\n            \"test_file.txt\": non_image_file\n        }\n        # 预处理请求\n        request_data = preprocess_request(case, auth_token, file_map)\n    \n        # 测试用例：未登录状态上传头像\n        if case[\"case_id\"] == \"auth_029\":\n            # 移除token，模拟未登录\n            response = Request.send_request(\n                method=case[\"method\"],\n                endpoint=case[\"url\"],\n                files=request_data.get(\"files\"),\n                token=None  # 显式传None，不携带token\n            )\n        else:\n            # 发送请求\n            response = Request.send_request(\n                method=case[\"method\"],\n                endpoint=case[\"url\"],\n                json=request_data.get(\"json\"),\n                params=request_data.get(\"params\"),\n                headers=request_data.get(\"headers\"),\n                files=request_data.get(\"files\"),\n                token=auth_token\n            )\n    \n        # 断言\n>       assert_response(\n            response,\n            expected_code=case[\"expected_code\"],\n            expected_success=case.get(\"expected_success\"),\n            expected_message=case.get(\"expected_message\")\n        )\n\ntests\\test_user_auth.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutils\\test_utils.py:7: in assert_response\n    json_data = response.json()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [403]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nD:\\Anaconda3\\Lib\\site-packages\\requests\\models.py:975: JSONDecodeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"auth_token","time":{"start":1753970250368,"stop":1753970250683,"duration":315},"status":"passed","steps":[{"name":"发送请求：'POST' '/auth/login'","time":{"start":1753970250368,"stop":1753970250683,"duration":315},"status":"passed","steps":[],"attachments":[{"uid":"e2033f0bd8e322c5","name":"请求信息","source":"e2033f0bd8e322c5.json","type":"application/json","size":64},{"uid":"c3729cdc0087a429","name":"响应信息","source":"c3729cdc0087a429.txt","type":"text/plain","size":20},{"uid":"de0636ce19700784","name":"响应体","source":"de0636ce19700784.json","type":"application/json","size":214}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/login'"},{"name":"headers","value":"None"},{"name":"params","value":"None"},{"name":"json","value":"{'username': 'admin1155', 'password': 'admin1155'}"},{"name":"files","value":"None"},{"name":"token","value":"None"}],"attachmentsCount":3,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":3,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":1},{"name":"small_jpg_image","time":{"start":1753970294898,"stop":1753970295159,"duration":261},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_jpg_image","time":{"start":1753970295160,"stop":1753970296052,"duration":892},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"small_png_image","time":{"start":1753970296052,"stop":1753970296149,"duration":97},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_png_image","time":{"start":1753970296151,"stop":1753970297278,"duration":1127},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"non_image_file","time":{"start":1753970297278,"stop":1753970297282,"duration":4},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"testStage":{"status":"broken","statusMessage":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"self = <Response [403]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\nD:\\Anaconda3\\Lib\\site-packages\\requests\\models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nD:\\Anaconda3\\Lib\\site-packages\\simplejson\\__init__.py:514: in loads\n    return _default_decoder.decode(s)\nD:\\Anaconda3\\Lib\\site-packages\\simplejson\\decoder.py:386: in decode\n    obj, end = self.raw_decode(s)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <simplejson.decoder.JSONDecoder object at 0x0000028C9AC2A990>, s = '', idx = 0\n_w = <built-in method match of re.Pattern object at 0x0000028C9A8EB440>, _PY3 = True\n\n    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` or ``unicode``\n        beginning with a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n        Optionally, ``idx`` can be used to specify an offset in ``s`` where\n        the JSON document begins.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        if idx < 0:\n            # Ensure that raw_decode bails on negative indexes, the regex\n            # would otherwise mask this behavior. #98\n            raise JSONDecodeError('Expecting value', s, idx)\n        if _PY3 and not isinstance(s, str):\n            raise TypeError(\"Input string must be text, not bytes\")\n        # strip UTF-8 bom\n        if len(s) > idx:\n            ord0 = ord(s[idx])\n            if ord0 == 0xfeff:\n                idx += 1\n            elif ord0 == 0xef and s[idx:idx + 3] == '\\xef\\xbb\\xbf':\n                idx += 3\n>       return self.scan_once(s, idx=_w(s, idx).end())\nE       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nD:\\Anaconda3\\Lib\\site-packages\\simplejson\\decoder.py:416: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\ncase = {'case_id': 'auth_022', 'expected_code': 400, 'expected_message': '当前密码不正确', 'expected_success': False, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5NzAyNTAsImV4cCI6MTc1Mzk3NzQ1MH0.7KRd3zH2Ah86OC9IZ72g6zhNHPPVgyth8JYj4QBjli0'\nsmall_jpg_image = 'small_5342.jpg', large_jpg_image = 'large_1048.jpg'\nsmall_png_image = 'small_3842.png', large_png_image = 'large_2020.png', non_image_file = 'test_7334.txt'\n\n    @allure.feature(\"用户认证模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_user_auth(case, auth_token, small_jpg_image, large_jpg_image, small_png_image, large_png_image, non_image_file):\n        allure.story(case[\"name\"])\n        allure.title(case[\"case_id\"] + \": \" + case[\"name\"])\n    \n        # 文件映射\n        file_map = {\n            \"test_avatar.jpg\": small_jpg_image,\n            \"large_avatar.jpg\": large_jpg_image,\n            \"test_avatar.png\": small_png_image,\n            \"large_avatar.png\": large_png_image,\n            \"test_file.txt\": non_image_file\n        }\n        # 预处理请求\n        request_data = preprocess_request(case, auth_token, file_map)\n    \n        # 测试用例：未登录状态上传头像\n        if case[\"case_id\"] == \"auth_029\":\n            # 移除token，模拟未登录\n            response = Request.send_request(\n                method=case[\"method\"],\n                endpoint=case[\"url\"],\n                files=request_data.get(\"files\"),\n                token=None  # 显式传None，不携带token\n            )\n        else:\n            # 发送请求\n            response = Request.send_request(\n                method=case[\"method\"],\n                endpoint=case[\"url\"],\n                json=request_data.get(\"json\"),\n                params=request_data.get(\"params\"),\n                headers=request_data.get(\"headers\"),\n                files=request_data.get(\"files\"),\n                token=auth_token\n            )\n    \n        # 断言\n>       assert_response(\n            response,\n            expected_code=case[\"expected_code\"],\n            expected_success=case.get(\"expected_success\"),\n            expected_message=case.get(\"expected_message\")\n        )\n\ntests\\test_user_auth.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutils\\test_utils.py:7: in assert_response\n    json_data = response.json()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [403]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nD:\\Anaconda3\\Lib\\site-packages\\requests\\models.py:975: JSONDecodeError","steps":[{"name":"发送请求：'PUT' '/auth/userinfo'","time":{"start":1753970297286,"stop":1753970297311,"duration":25},"status":"passed","steps":[],"attachments":[{"uid":"2aec5451aad8d8f9","name":"请求信息","source":"2aec5451aad8d8f9.json","type":"application/json","size":149},{"uid":"cddfadab2ade4fb2","name":"响应信息","source":"cddfadab2ade4fb2.txt","type":"text/plain","size":20},{"uid":"d81bd0a97716fade","name":"响应体","source":"d81bd0a97716fade.json","type":"application/json","size":0}],"parameters":[{"name":"method","value":"'PUT'"},{"name":"endpoint","value":"'/auth/userinfo'"},{"name":"headers","value":"{'Authorization': 'Bearer '}"},{"name":"params","value":"{}"},{"name":"json","value":"{'oldPassword': 'Wrong123', 'newPassword': 'NewTest123', 'securityEmail': 'admin1155@example.com', 'verificationCode': '{verify_code}'}"},{"name":"files","value":"None"},{"name":"token","value":"'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5NzAyNTAsImV4cCI6MTc1Mzk3NzQ1MH0.7KRd3zH2Ah86OC9IZ72g6zhNHPPVgyth8JYj4QBjli0'"}],"attachmentsCount":3,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"验证响应：状态码400，消息'当前密码不正确'","time":{"start":1753970297312,"stop":1753970297312,"duration":0},"status":"broken","statusMessage":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n","statusTrace":"  File \"D:\\Anaconda3\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"D:\\工作记录\\项目说明\\api_test\\utils\\test_utils.py\", line 7, in assert_response\n    json_data = response.json()\n                ^^^^^^^^^^^^^^^\n  File \"D:\\Anaconda3\\Lib\\site-packages\\requests\\models.py\", line 975, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n","steps":[],"attachments":[],"parameters":[{"name":"response","value":"<Response [403]>"},{"name":"expected_code","value":"400"},{"name":"expected_success","value":"False"},{"name":"expected_message","value":"'当前密码不正确'"}],"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":3,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":2},"afterStages":[{"name":"non_image_file::0","time":{"start":1753970297527,"stop":1753970297529,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_png_image::0","time":{"start":1753970297534,"stop":1753970297537,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"small_png_image::0","time":{"start":1753970297543,"stop":1753970297545,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_jpg_image::0","time":{"start":1753970297548,"stop":1753970297567,"duration":19},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"small_jpg_image::0","time":{"start":1753970297572,"stop":1753970297579,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"labels":[{"name":"feature","value":"用户认证模块"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_user_auth"},{"name":"host","value":"CYJ"},{"name":"thread","value":"23148-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_user_auth"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"case","value":"{'case_id': 'auth_022', 'name': '旧密码错误', 'method': 'PUT', 'url': '/auth/userinfo', 'headers': {'Authorization': 'Bearer '}, 'json': {'oldPassword': 'Wrong123', 'newPassword': 'NewTest123', 'securityEmail': 'admin1155@example.com', 'verificationCode': '{verify_code}'}, 'expected_code': 400, 'expected_success': False, 'expected_message': '当前密码不正确'}"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"6ff1c1585b29c4a6.json","parameterValues":["{'case_id': 'auth_022', 'name': '旧密码错误', 'method': 'PUT', 'url': '/auth/userinfo', 'headers': {'Authorization': 'Bearer '}, 'json': {'oldPassword': 'Wrong123', 'newPassword': 'NewTest123', 'securityEmail': 'admin1155@example.com', 'verificationCode': '{verify_code}'}, 'expected_code': 400, 'expected_success': False, 'expected_message': '当前密码不正确'}"]}