{"uid":"964ddfbcc751d956","name":"test_user_auth[case11]","fullName":"tests.test_user_auth#test_user_auth","historyId":"110d5c5426d4ab2960141477f9ed9815","time":{"start":1753990578470,"stop":1753990578470,"duration":0},"status":"failed","statusMessage":"AssertionError: 发送验证码失败: {\"success\":false,\"message\":\"发送验证码失败，请稍后重试\",\"data\":null}\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code","statusTrace":"@pytest.fixture(scope=\"function\")\n    def test_user():\n        \"\"\"创建测试用户\"\"\"\n        username = \"test_\" + ''.join(random.choices(string.ascii_lowercase, k=6))\n        email = f\"{username}@example.com\"\n        password = \"Test123456\"\n    \n        # 发送验证码并断言成功\n        send_response = Request.send_request(\n            \"POST\", \"/auth/send-verify-code\",\n            params={\"email\": email}\n        )\n>       assert send_response.status_code == 200, f\"发送验证码失败: {send_response.text}\"\nE       AssertionError: 发送验证码失败: {\"success\":false,\"message\":\"发送验证码失败，请稍后重试\",\"data\":null}\nE       assert 500 == 200\nE        +  where 500 = <Response [500]>.status_code\n\ntests\\conftest.py:128: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"test_user","time":{"start":1753990578471,"stop":1753990578762,"duration":291},"status":"failed","statusMessage":"AssertionError: 发送验证码失败: {\"success\":false,\"message\":\"发送验证码失败，请稍后重试\",\"data\":null}\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code\n","statusTrace":"  File \"D:\\Anaconda3\\Lib\\site-packages\\pluggy\\_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"D:\\Anaconda3\\Lib\\site-packages\\_pytest\\fixtures.py\", line 1123, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"D:\\Anaconda3\\Lib\\site-packages\\_pytest\\fixtures.py\", line 895, in call_fixture_func\n    fixture_result = next(generator)\n                     ^^^^^^^^^^^^^^^\n  File \"D:\\工作记录\\项目说明\\api_test\\tests\\conftest.py\", line 128, in test_user\n    assert send_response.status_code == 200, f\"发送验证码失败: {send_response.text}\"\n","steps":[{"name":"发送请求：'POST' '/auth/send-verify-code'","time":{"start":1753990578471,"stop":1753990578762,"duration":291},"status":"passed","steps":[],"attachments":[{"uid":"d20d673f4cd682f1","name":"请求信息","source":"d20d673f4cd682f1.txt","type":"text/plain","size":52},{"uid":"92fb29c468911171","name":"请求头","source":"92fb29c468911171.txt","type":"text/plain","size":45},{"uid":"b51cdcc839a83251","name":"请求参数","source":"b51cdcc839a83251.json","type":"application/json","size":44},{"uid":"2020e4d07e5b0d78","name":"响应信息","source":"2020e4d07e5b0d78.txt","type":"text/plain","size":14},{"uid":"c20233984eb24691","name":"响应体","source":"c20233984eb24691.json","type":"application/json","size":81}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/send-verify-code'"},{"name":"headers","value":"None"},{"name":"params","value":"{'email': 'test_ildxcg@example.com'}"},{"name":"json","value":"None"},{"name":"files","value":"None"},{"name":"token","value":"None"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":5,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":1}],"testStage":{"status":"failed","statusMessage":"AssertionError: 发送验证码失败: {\"success\":false,\"message\":\"发送验证码失败，请稍后重试\",\"data\":null}\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code","statusTrace":"@pytest.fixture(scope=\"function\")\n    def test_user():\n        \"\"\"创建测试用户\"\"\"\n        username = \"test_\" + ''.join(random.choices(string.ascii_lowercase, k=6))\n        email = f\"{username}@example.com\"\n        password = \"Test123456\"\n    \n        # 发送验证码并断言成功\n        send_response = Request.send_request(\n            \"POST\", \"/auth/send-verify-code\",\n            params={\"email\": email}\n        )\n>       assert send_response.status_code == 200, f\"发送验证码失败: {send_response.text}\"\nE       AssertionError: 发送验证码失败: {\"success\":false,\"message\":\"发送验证码失败，请稍后重试\",\"data\":null}\nE       assert 500 == 200\nE        +  where 500 = <Response [500]>.status_code\n\ntests\\conftest.py:128: AssertionError","steps":[],"attachments":[{"uid":"1e1999ebd4d03124","name":"log","source":"1e1999ebd4d03124.txt","type":"text/plain","size":407},{"uid":"c25c2d4b3ba9581f","name":"stderr","source":"c25c2d4b3ba9581f.txt","type":"text/plain","size":300}],"parameters":[],"attachmentsCount":2,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":0},"afterStages":[],"labels":[{"name":"feature","value":"用户认证模块"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_user_auth"},{"name":"host","value":"CYJ"},{"name":"thread","value":"27800-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_user_auth"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"case","value":"{'case_id': 'auth_012', 'name': '密码仅包含数字', 'method': 'POST', 'url': '/auth/register', 'json': {'username': 'test_ua4twc', 'password': '123456789', 'email': 'test_mrz9h2@example.com', 'verifyCode': '{verify_code}'}, 'expected_code': 400, 'expected_success': False, 'expected_message': '密码强度不足，需至少包含大小写字母和数字中的两类'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"964ddfbcc751d956.json","parameterValues":["{'case_id': 'auth_012', 'name': '密码仅包含数字', 'method': 'POST', 'url': '/auth/register', 'json': {'username': 'test_ua4twc', 'password': '123456789', 'email': 'test_mrz9h2@example.com', 'verifyCode': '{verify_code}'}, 'expected_code': 400, 'expected_success': False, 'expected_message': '密码强度不足，需至少包含大小写字母和数字中的两类'}"]}