{"uid":"23e60875bdc1fff7","name":"test_crawler_tasks[case12]","fullName":"tests.test_crawler_tasks#test_crawler_tasks","historyId":"6638b56df979b72d9b6403be6c97c4d5","time":{"start":1753986982083,"stop":1753986982172,"duration":89},"status":"failed","statusMessage":"AssertionError: 消息不符：预期任务删除成功，实际操作成功，完整response：{\"success\":true,\"message\":\"操作成功\",\"data\":\"任务删除成功\"}\nassert '操作成功' == '任务删除成功'\n  - 任务删除成功\n  + 操作成功","statusTrace":"case = {'case_id': 'task_013', 'expected_code': 200, 'expected_message': '任务删除成功', 'expected_success': True, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODY5ODIsImV4cCI6MTc1Mzk5NDE4Mn0.IQotoVAMppNXd4xB_wv1CB6gzjIVg2PAP6gVc90YBMw'\n\n    @allure.feature(\"爬虫任务模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_crawler_tasks(case, auth_token):\n        allure.story(case[\"name\"])\n        allure.title(case[\"case_id\"] + \": \" + case[\"name\"])\n    \n        # 替换任务ID占位符\n        if \"{task_id}\" in case[\"url\"]:\n            # 先创建一个测试任务获取ID\n            from utils.context import context\n            if not context.get(\"task_id\"):\n                create_response = Request.send_request(\n                    \"POST\", \"/crawler/tasks\",\n                    json={\n                        \"processName\": \"测试任务\",\n                        \"asinList\": \"B08XJ8J7SZ\",\n                        \"requiredInfo\": [\"price\"],\n                        \"platform\": \"Amazon\",\n                        \"timeCycle\": \"daily\"\n                    },\n                    token=auth_token\n                )\n                context.set(\"task_id\", create_response.json()[\"data\"][\"id\"])\n            task_id = context.get(\"task_id\")\n            case[\"url\"] = case[\"url\"].replace(\"{task_id}\", str(task_id))\n    \n        # 预处理请求\n        request_data = preprocess_request(case, auth_token)\n    \n        # 发送请求\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            token=auth_token\n        )\n    \n        # 断言\n>       assert_response(\n            response,\n            expected_code=case[\"expected_code\"],\n            expected_success=case.get(\"expected_success\"),\n            expected_message=case.get(\"expected_message\")\n        )\n\ntests\\test_crawler_tasks.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [200]>, expected_code = 200\nexpected_success = True, expected_message = '任务删除成功'\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n        assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response.text}\"\n    \n        if response.status_code != 200:\n            return\n    \n        try:\n            json_data = response.json()\n        except:\n            assert False, f\"响应不是有效的JSON格式: {response.text}\"\n    \n        if expected_success is not None:\n            assert json_data.get(\"success\") == expected_success, \\\n                f\"success字段不符：预期{expected_success}，实际{json_data.get('success')}，完整response：{response.text}\"\n    \n        if expected_message:\n>           assert json_data.get(\"message\") == expected_message, \\\n                f\"消息不符：预期{expected_message}，实际{json_data.get('message')}，完整response：{response.text}\"\nE           AssertionError: 消息不符：预期任务删除成功，实际操作成功，完整response：{\"success\":true,\"message\":\"操作成功\",\"data\":\"任务删除成功\"}\nE           assert '操作成功' == '任务删除成功'\nE             - 任务删除成功\nE             + 操作成功\n\nutils\\test_utils.py:23: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"auth_token","time":{"start":1753986981810,"stop":1753986982082,"duration":272},"status":"passed","steps":[{"name":"发送请求：'POST' '/auth/login'","time":{"start":1753986981811,"stop":1753986982081,"duration":270},"status":"passed","steps":[],"attachments":[{"uid":"18150fa51656e933","name":"请求信息","source":"18150fa51656e933.txt","type":"text/plain","size":41},{"uid":"a620d691031ace5a","name":"请求头","source":"a620d691031ace5a.txt","type":"text/plain","size":45},{"uid":"c9ff8be482b48e3c","name":"请求参数","source":"c9ff8be482b48e3c.json","type":"application/json","size":58},{"uid":"477b088394b411c9","name":"响应信息","source":"477b088394b411c9.txt","type":"text/plain","size":14},{"uid":"3c25e1a2f99d8430","name":"响应体","source":"3c25e1a2f99d8430.json","type":"application/json","size":214}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/login'"},{"name":"headers","value":"None"},{"name":"params","value":"None"},{"name":"json","value":"{'username': 'admin1155', 'password': 'admin1155'}"},{"name":"files","value":"None"},{"name":"token","value":"None"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":1}],"testStage":{"status":"failed","statusMessage":"AssertionError: 消息不符：预期任务删除成功，实际操作成功，完整response：{\"success\":true,\"message\":\"操作成功\",\"data\":\"任务删除成功\"}\nassert '操作成功' == '任务删除成功'\n  - 任务删除成功\n  + 操作成功","statusTrace":"case = {'case_id': 'task_013', 'expected_code': 200, 'expected_message': '任务删除成功', 'expected_success': True, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODY5ODIsImV4cCI6MTc1Mzk5NDE4Mn0.IQotoVAMppNXd4xB_wv1CB6gzjIVg2PAP6gVc90YBMw'\n\n    @allure.feature(\"爬虫任务模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_crawler_tasks(case, auth_token):\n        allure.story(case[\"name\"])\n        allure.title(case[\"case_id\"] + \": \" + case[\"name\"])\n    \n        # 替换任务ID占位符\n        if \"{task_id}\" in case[\"url\"]:\n            # 先创建一个测试任务获取ID\n            from utils.context import context\n            if not context.get(\"task_id\"):\n                create_response = Request.send_request(\n                    \"POST\", \"/crawler/tasks\",\n                    json={\n                        \"processName\": \"测试任务\",\n                        \"asinList\": \"B08XJ8J7SZ\",\n                        \"requiredInfo\": [\"price\"],\n                        \"platform\": \"Amazon\",\n                        \"timeCycle\": \"daily\"\n                    },\n                    token=auth_token\n                )\n                context.set(\"task_id\", create_response.json()[\"data\"][\"id\"])\n            task_id = context.get(\"task_id\")\n            case[\"url\"] = case[\"url\"].replace(\"{task_id}\", str(task_id))\n    \n        # 预处理请求\n        request_data = preprocess_request(case, auth_token)\n    \n        # 发送请求\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            token=auth_token\n        )\n    \n        # 断言\n>       assert_response(\n            response,\n            expected_code=case[\"expected_code\"],\n            expected_success=case.get(\"expected_success\"),\n            expected_message=case.get(\"expected_message\")\n        )\n\ntests\\test_crawler_tasks.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [200]>, expected_code = 200\nexpected_success = True, expected_message = '任务删除成功'\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n        assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response.text}\"\n    \n        if response.status_code != 200:\n            return\n    \n        try:\n            json_data = response.json()\n        except:\n            assert False, f\"响应不是有效的JSON格式: {response.text}\"\n    \n        if expected_success is not None:\n            assert json_data.get(\"success\") == expected_success, \\\n                f\"success字段不符：预期{expected_success}，实际{json_data.get('success')}，完整response：{response.text}\"\n    \n        if expected_message:\n>           assert json_data.get(\"message\") == expected_message, \\\n                f\"消息不符：预期{expected_message}，实际{json_data.get('message')}，完整response：{response.text}\"\nE           AssertionError: 消息不符：预期任务删除成功，实际操作成功，完整response：{\"success\":true,\"message\":\"操作成功\",\"data\":\"任务删除成功\"}\nE           assert '操作成功' == '任务删除成功'\nE             - 任务删除成功\nE             + 操作成功\n\nutils\\test_utils.py:23: AssertionError","steps":[{"name":"发送请求：'DELETE' '/crawler/tasks/243'","time":{"start":1753986982084,"stop":1753986982170,"duration":86},"status":"passed","steps":[],"attachments":[{"uid":"d9f7fd11498b8b2c","name":"请求信息","source":"d9f7fd11498b8b2c.txt","type":"text/plain","size":48},{"uid":"38090a848a46b59","name":"请求头","source":"38090a848a46b59.txt","type":"text/plain","size":209},{"uid":"a9a4d45411b9119","name":"请求参数","source":"a9a4d45411b9119.json","type":"application/json","size":10},{"uid":"36fd42e634bddcb0","name":"响应信息","source":"36fd42e634bddcb0.txt","type":"text/plain","size":14},{"uid":"60cb9b5232d0ab0","name":"响应体","source":"60cb9b5232d0ab0.json","type":"application/json","size":69}],"parameters":[{"name":"method","value":"'DELETE'"},{"name":"endpoint","value":"'/crawler/tasks/243'"},{"name":"headers","value":"{}"},{"name":"params","value":"{}"},{"name":"json","value":"{}"},{"name":"files","value":"None"},{"name":"token","value":"'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODY5ODIsImV4cCI6MTc1Mzk5NDE4Mn0.IQotoVAMppNXd4xB_wv1CB6gzjIVg2PAP6gVc90YBMw'"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"验证响应：状态码200，消息'任务删除成功'","time":{"start":1753986982170,"stop":1753986982171,"duration":1},"status":"failed","statusMessage":"AssertionError: 消息不符：预期任务删除成功，实际操作成功，完整response：{\"success\":true,\"message\":\"操作成功\",\"data\":\"任务删除成功\"}\nassert '操作成功' == '任务删除成功'\n  - 任务删除成功\n  + 操作成功\n","statusTrace":"  File \"D:\\Anaconda3\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"D:\\工作记录\\项目说明\\api_test\\utils\\test_utils.py\", line 23, in assert_response\n    assert json_data.get(\"message\") == expected_message, \\\n","steps":[],"attachments":[],"parameters":[{"name":"response","value":"<Response [200]>"},{"name":"expected_code","value":"200"},{"name":"expected_success","value":"True"},{"name":"expected_message","value":"'任务删除成功'"}],"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[{"uid":"60a481b71b99e838","name":"log","source":"60a481b71b99e838.txt","type":"text/plain","size":1158},{"uid":"77e27ea6e2ab4dd4","name":"stdout","source":"77e27ea6e2ab4dd4.txt","type":"text/plain","size":183},{"uid":"18adb7b618b9a3d3","name":"stderr","source":"18adb7b618b9a3d3.txt","type":"text/plain","size":916}],"parameters":[],"attachmentsCount":8,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":2},"afterStages":[],"labels":[{"name":"feature","value":"爬虫任务模块"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_crawler_tasks"},{"name":"host","value":"CYJ"},{"name":"thread","value":"23876-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_crawler_tasks"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"case","value":"{'case_id': 'task_013', 'name': '删除任务后验证数据', 'method': 'DELETE', 'url': '/crawler/tasks/{task_id}', 'headers': {'Authorization': ''}, 'expected_code': 200, 'expected_success': True, 'expected_message': '任务删除成功'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"23e60875bdc1fff7.json","parameterValues":["{'case_id': 'task_013', 'name': '删除任务后验证数据', 'method': 'DELETE', 'url': '/crawler/tasks/{task_id}', 'headers': {'Authorization': ''}, 'expected_code': 200, 'expected_success': True, 'expected_message': '任务删除成功'}"]}