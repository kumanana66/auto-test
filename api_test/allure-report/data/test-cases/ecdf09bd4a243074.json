{"uid":"ecdf09bd4a243074","name":"test_user_auth[case1]","fullName":"tests.test_user_auth#test_user_auth","historyId":"4ec3cb814eeba3d7c80b990a7f9db803","time":{"start":1753987850661,"stop":1753987850761,"duration":100},"status":"failed","statusMessage":"AssertionError: 状态码不符：预期200，实际400，完整response：{\"success\":false,\"message\":\"验证码不能为空\",\"data\":null}\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"case = {'case_id': 'auth_002', 'expected_code': 200, 'expected_message': '注册成功', 'expected_success': True, ...}\ntest_user = {'email': 'test_ivjhfm@example.com', 'token': 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0ZXN0X2l2amhmbSIsImlhdCI6MTc1Mzk4Nzg0OSwiZXhwIjoxNzUzOTk1MDQ5fQ.z9jVjeRbJUsF5MYsOYwQ8mU2M13sf8yH6M9_TzjW-sg', 'username': 'test_ivjhfm'}\nimage_fixtures = {'large_jpg_image': 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmpoxi1qalx.jpg', 'large_png_image': 'C:\\\\Users\\\\huawei\\...ata\\\\Local\\\\Temp\\\\tmpqzwzuq5g.txt', 'small_jpg_image': 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmppph0wpqs.jpg', ...}\n\n    @allure.feature(\"用户认证模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_user_auth(case, test_user, image_fixtures):  # 使用test_user而非auth_token\n        allure.story(case[\"name\"])\n        allure.title(f\"{case['case_id']}: {case['name']}\")\n        logger.info(f\"开始执行用例: {case['case_id']} - {case['name']}\")\n    \n        # 1. 文件映射（仅文件上传用例需要）\n        file_map = {\n            \"test_avatar.jpg\": image_fixtures[\"small_jpg_image\"],\n            \"large_avatar.jpg\": image_fixtures[\"large_jpg_image\"],\n            \"test_avatar.png\": image_fixtures[\"small_png_image\"],\n            \"large_avatar.png\": image_fixtures[\"large_png_image\"],\n            \"test_file.txt\": image_fixtures[\"non_image_file\"]\n        }\n    \n        # 2. 预处理请求\n        request_data = preprocess_request(case, test_user[\"token\"], file_map)  # 使用测试用户的token\n    \n        # 3. 处理所有需要验证码的场景（覆盖注册、更新密码等）\n        json_data = request_data.get(\"json\", {})\n        if \"verifyCode\" in json_data and json_data[\"verifyCode\"] == \"{verify_code}\":\n            email = json_data.get(\"email\", test_user[\"email\"])  # 优先用请求中的邮箱，否则用测试用户邮箱\n            verify_code = send_and_get_verify_code(email)\n            json_data[\"verifyCode\"] = verify_code\n            logger.info(f\"为邮箱 {email} 填充验证码: {verify_code}\")\n        if \"verificationCode\" in json_data and json_data[\"verificationCode\"] == \"{verify_code}\":\n            email = json_data.get(\"securityEmail\", test_user[\"email\"])\n            verify_code = send_and_get_verify_code(email)\n            json_data[\"verificationCode\"] = verify_code\n            logger.info(f\"为安全邮箱 {email} 填充验证码: {verify_code}\")\n    \n        # 4. 处理未登录场景（保持原逻辑）\n        use_token = case[\"case_id\"] != \"auth_029\"\n        logger.info(f\"是否使用Token: {use_token}\")\n        current_token = test_user[\"token\"] if use_token else None  # 使用测试用户token\n    \n        # 5. 发送请求\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            files=request_data.get(\"files\"),\n            token=current_token\n        )\n    \n        # 6. 断言增强\n        try:\n>           assert_response(\n                response,\n                expected_code=case[\"expected_code\"],\n                expected_success=case.get(\"expected_success\"),\n                expected_message=case.get(\"expected_message\")\n            )\n\ntests\\test_user_auth.py:90: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [400]>, expected_code = 200\nexpected_success = True, expected_message = '注册成功'\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response.text}\"\nE       AssertionError: 状态码不符：预期200，实际400，完整response：{\"success\":false,\"message\":\"验证码不能为空\",\"data\":null}\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\nutils\\test_utils.py:7: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"test_user","time":{"start":1753987848301,"stop":1753987849678,"duration":1377},"status":"passed","steps":[{"name":"发送请求：'POST' '/auth/send-verify-code'","time":{"start":1753987848301,"stop":1753987849285,"duration":984},"status":"passed","steps":[],"attachments":[{"uid":"9ed735150d71f383","name":"请求信息","source":"9ed735150d71f383.txt","type":"text/plain","size":52},{"uid":"f4aee47364830466","name":"请求头","source":"f4aee47364830466.txt","type":"text/plain","size":45},{"uid":"90617b64ed71c8b7","name":"请求参数","source":"90617b64ed71c8b7.json","type":"application/json","size":44},{"uid":"a673396f3879a52e","name":"响应信息","source":"a673396f3879a52e.txt","type":"text/plain","size":14},{"uid":"9a2c612d7daee7ff","name":"响应体","source":"9a2c612d7daee7ff.json","type":"application/json","size":84}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/send-verify-code'"},{"name":"headers","value":"None"},{"name":"params","value":"{'email': 'test_ivjhfm@example.com'}"},{"name":"json","value":"None"},{"name":"files","value":"None"},{"name":"token","value":"None"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"从数据库获取验证码：'test_ivjhfm@example.com'","time":{"start":1753987849286,"stop":1753987849296,"duration":10},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"email","value":"'test_ivjhfm@example.com'"}],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"发送请求：'POST' '/auth/register'","time":{"start":1753987849297,"stop":1753987849524,"duration":227},"status":"passed","steps":[],"attachments":[{"uid":"434e5a430d13a061","name":"请求信息","source":"434e5a430d13a061.txt","type":"text/plain","size":44},{"uid":"bb3d5ecf7f15b57f","name":"请求头","source":"bb3d5ecf7f15b57f.txt","type":"text/plain","size":45},{"uid":"dc41106516167e5c","name":"请求参数","source":"dc41106516167e5c.json","type":"application/json","size":121},{"uid":"778ce67354a1410a","name":"响应信息","source":"778ce67354a1410a.txt","type":"text/plain","size":14},{"uid":"bc0c83251a6ce98a","name":"响应体","source":"bc0c83251a6ce98a.json","type":"application/json","size":53}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/register'"},{"name":"headers","value":"None"},{"name":"params","value":"None"},{"name":"json","value":"{'username': 'test_ivjhfm', 'password': 'Test123456', 'email': 'test_ivjhfm@example.com', 'verifyCode': '431763'}"},{"name":"files","value":"None"},{"name":"token","value":"None"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"发送请求：'POST' '/auth/login'","time":{"start":1753987849524,"stop":1753987849678,"duration":154},"status":"passed","steps":[],"attachments":[{"uid":"3598aa1d95cb1339","name":"请求信息","source":"3598aa1d95cb1339.txt","type":"text/plain","size":41},{"uid":"16bf30f3462fed26","name":"请求头","source":"16bf30f3462fed26.txt","type":"text/plain","size":45},{"uid":"3f8cc7b8f53f7f06","name":"请求参数","source":"3f8cc7b8f53f7f06.json","type":"application/json","size":61},{"uid":"6987074dcd4427c3","name":"响应信息","source":"6987074dcd4427c3.txt","type":"text/plain","size":14},{"uid":"a902a1a58e05ab85","name":"响应体","source":"a902a1a58e05ab85.json","type":"application/json","size":217}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/login'"},{"name":"headers","value":"None"},{"name":"params","value":"None"},{"name":"json","value":"{'username': 'test_ivjhfm', 'password': 'Test123456'}"},{"name":"files","value":"None"},{"name":"token","value":"None"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":15,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":4},{"name":"small_jpg_image","time":{"start":1753987849678,"stop":1753987849786,"duration":108},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_jpg_image","time":{"start":1753987849786,"stop":1753987850219,"duration":433},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"small_png_image","time":{"start":1753987850219,"stop":1753987850264,"duration":45},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_png_image","time":{"start":1753987850265,"stop":1753987850657,"duration":392},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"non_image_file","time":{"start":1753987850657,"stop":1753987850660,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"image_fixtures","time":{"start":1753987850660,"stop":1753987850660,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: 状态码不符：预期200，实际400，完整response：{\"success\":false,\"message\":\"验证码不能为空\",\"data\":null}\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"case = {'case_id': 'auth_002', 'expected_code': 200, 'expected_message': '注册成功', 'expected_success': True, ...}\ntest_user = {'email': 'test_ivjhfm@example.com', 'token': 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0ZXN0X2l2amhmbSIsImlhdCI6MTc1Mzk4Nzg0OSwiZXhwIjoxNzUzOTk1MDQ5fQ.z9jVjeRbJUsF5MYsOYwQ8mU2M13sf8yH6M9_TzjW-sg', 'username': 'test_ivjhfm'}\nimage_fixtures = {'large_jpg_image': 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmpoxi1qalx.jpg', 'large_png_image': 'C:\\\\Users\\\\huawei\\...ata\\\\Local\\\\Temp\\\\tmpqzwzuq5g.txt', 'small_jpg_image': 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmppph0wpqs.jpg', ...}\n\n    @allure.feature(\"用户认证模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_user_auth(case, test_user, image_fixtures):  # 使用test_user而非auth_token\n        allure.story(case[\"name\"])\n        allure.title(f\"{case['case_id']}: {case['name']}\")\n        logger.info(f\"开始执行用例: {case['case_id']} - {case['name']}\")\n    \n        # 1. 文件映射（仅文件上传用例需要）\n        file_map = {\n            \"test_avatar.jpg\": image_fixtures[\"small_jpg_image\"],\n            \"large_avatar.jpg\": image_fixtures[\"large_jpg_image\"],\n            \"test_avatar.png\": image_fixtures[\"small_png_image\"],\n            \"large_avatar.png\": image_fixtures[\"large_png_image\"],\n            \"test_file.txt\": image_fixtures[\"non_image_file\"]\n        }\n    \n        # 2. 预处理请求\n        request_data = preprocess_request(case, test_user[\"token\"], file_map)  # 使用测试用户的token\n    \n        # 3. 处理所有需要验证码的场景（覆盖注册、更新密码等）\n        json_data = request_data.get(\"json\", {})\n        if \"verifyCode\" in json_data and json_data[\"verifyCode\"] == \"{verify_code}\":\n            email = json_data.get(\"email\", test_user[\"email\"])  # 优先用请求中的邮箱，否则用测试用户邮箱\n            verify_code = send_and_get_verify_code(email)\n            json_data[\"verifyCode\"] = verify_code\n            logger.info(f\"为邮箱 {email} 填充验证码: {verify_code}\")\n        if \"verificationCode\" in json_data and json_data[\"verificationCode\"] == \"{verify_code}\":\n            email = json_data.get(\"securityEmail\", test_user[\"email\"])\n            verify_code = send_and_get_verify_code(email)\n            json_data[\"verificationCode\"] = verify_code\n            logger.info(f\"为安全邮箱 {email} 填充验证码: {verify_code}\")\n    \n        # 4. 处理未登录场景（保持原逻辑）\n        use_token = case[\"case_id\"] != \"auth_029\"\n        logger.info(f\"是否使用Token: {use_token}\")\n        current_token = test_user[\"token\"] if use_token else None  # 使用测试用户token\n    \n        # 5. 发送请求\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            files=request_data.get(\"files\"),\n            token=current_token\n        )\n    \n        # 6. 断言增强\n        try:\n>           assert_response(\n                response,\n                expected_code=case[\"expected_code\"],\n                expected_success=case.get(\"expected_success\"),\n                expected_message=case.get(\"expected_message\")\n            )\n\ntests\\test_user_auth.py:90: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [400]>, expected_code = 200\nexpected_success = True, expected_message = '注册成功'\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response.text}\"\nE       AssertionError: 状态码不符：预期200，实际400，完整response：{\"success\":false,\"message\":\"验证码不能为空\",\"data\":null}\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\nutils\\test_utils.py:7: AssertionError","steps":[{"name":"从数据库获取验证码：'test_c8rmjz@example.com'","time":{"start":1753987850663,"stop":1753987850693,"duration":30},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"email","value":"'test_c8rmjz@example.com'"}],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"发送请求：'POST' '/auth/register'","time":{"start":1753987850695,"stop":1753987850747,"duration":52},"status":"passed","steps":[],"attachments":[{"uid":"13b97f5d4aece902","name":"请求信息","source":"13b97f5d4aece902.txt","type":"text/plain","size":44},{"uid":"7b4adfe23aa22937","name":"请求头","source":"7b4adfe23aa22937.txt","type":"text/plain","size":212},{"uid":"1770c5b078861506","name":"请求参数","source":"1770c5b078861506.json","type":"application/json","size":112},{"uid":"3ff5dace2c1eb491","name":"响应信息","source":"3ff5dace2c1eb491.txt","type":"text/plain","size":14},{"uid":"e26fff376c412da0","name":"响应体","source":"e26fff376c412da0.json","type":"application/json","size":63}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/register'"},{"name":"headers","value":"{}"},{"name":"params","value":"{}"},{"name":"json","value":"{'username': 'test01', 'password': 'Test123456', 'email': 'test_c8rmjz@example.com', 'verifyCode': None}"},{"name":"files","value":"None"},{"name":"token","value":"'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0ZXN0X2l2amhmbSIsImlhdCI6MTc1Mzk4Nzg0OSwiZXhwIjoxNzUzOTk1MDQ5fQ.z9jVjeRbJUsF5MYsOYwQ8mU2M13sf8yH6M9_TzjW-sg'"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"验证响应：状态码200，消息'注册成功'","time":{"start":1753987850748,"stop":1753987850749,"duration":1},"status":"failed","statusMessage":"AssertionError: 状态码不符：预期200，实际400，完整response：{\"success\":false,\"message\":\"验证码不能为空\",\"data\":null}\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"D:\\Anaconda3\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"D:\\工作记录\\项目说明\\api_test\\utils\\test_utils.py\", line 7, in assert_response\n    assert response.status_code == expected_code, \\\n","steps":[],"attachments":[],"parameters":[{"name":"response","value":"<Response [400]>"},{"name":"expected_code","value":"200"},{"name":"expected_success","value":"True"},{"name":"expected_message","value":"'注册成功'"}],"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[{"uid":"e1b41ae646a9e079","name":"失败详情","source":"e1b41ae646a9e079.txt","type":"text/plain","size":77},{"uid":"24fd9c094c3f3fce","name":"请求数据","source":"24fd9c094c3f3fce.json","type":"application/json","size":118},{"uid":"1890a41db33c58a1","name":"log","source":"1890a41db33c58a1.txt","type":"text/plain","size":2420},{"uid":"94818c3114b9140a","name":"stderr","source":"94818c3114b9140a.txt","type":"text/plain","size":1857}],"parameters":[],"attachmentsCount":9,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":3},"afterStages":[{"name":"non_image_file::0","time":{"start":1753987850809,"stop":1753987850813,"duration":4},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_png_image::0","time":{"start":1753987850817,"stop":1753987850829,"duration":12},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"small_png_image::0","time":{"start":1753987850835,"stop":1753987850838,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_jpg_image::0","time":{"start":1753987850845,"stop":1753987850866,"duration":21},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"small_jpg_image::0","time":{"start":1753987850872,"stop":1753987850880,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"test_user::0","time":{"start":1753987850884,"stop":1753987850904,"duration":20},"status":"passed","steps":[{"name":"清理测试数据：'test_ivjhfm@example.com'","time":{"start":1753987850884,"stop":1753987850902,"duration":18},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"email","value":"'test_ivjhfm@example.com'"}],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":1}],"labels":[{"name":"feature","value":"用户认证模块"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_user_auth"},{"name":"host","value":"CYJ"},{"name":"thread","value":"22580-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_user_auth"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"case","value":"{'case_id': 'auth_002', 'name': '用户名长度为6位（最小值）', 'method': 'POST', 'url': '/auth/register', 'json': {'username': 'test01', 'password': 'Test123456', 'email': 'test_c8rmjz@example.com', 'verifyCode': '{verify_code}'}, 'expected_code': 200, 'expected_success': True, 'expected_message': '注册成功'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"ecdf09bd4a243074.json","parameterValues":["{'case_id': 'auth_002', 'name': '用户名长度为6位（最小值）', 'method': 'POST', 'url': '/auth/register', 'json': {'username': 'test01', 'password': 'Test123456', 'email': 'test_c8rmjz@example.com', 'verifyCode': '{verify_code}'}, 'expected_code': 200, 'expected_success': True, 'expected_message': '注册成功'}"]}