{"uid":"7fac823e9927ad4f","name":"test_crawler_tasks[case9]","fullName":"tests.test_crawler_tasks#test_crawler_tasks","historyId":"af6fa46dec1da05b64566e267eb46c45","time":{"start":1753986171161,"stop":1753986171186,"duration":25},"status":"failed","statusMessage":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","statusTrace":"case = {'case_id': 'task_010', 'expected_code': 200, 'expected_success': True, 'headers': {'Authorization': 'Bearer '}, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODYxNzEsImV4cCI6MTc1Mzk5MzM3MX0.zK-nKV5gA87c92ZxqcAnIPEtww1qnqyR8zmpdQuFASU'\n\n    @allure.feature(\"爬虫任务模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_crawler_tasks(case, auth_token):\n        allure.story(case[\"name\"])\n        allure.title(case[\"case_id\"] + \": \" + case[\"name\"])\n    \n        # 替换任务ID占位符\n        if \"{task_id}\" in case[\"url\"]:\n            # 先创建一个测试任务获取ID\n            from utils.context import context\n            if not context.get(\"task_id\"):\n                create_response = Request.send_request(\n                    \"POST\", \"/crawler/tasks\",\n                    json={\n                        \"processName\": \"测试任务\",\n                        \"asinList\": \"B08XJ8J7SZ\",\n                        \"requiredInfo\": [\"price\"],\n                        \"platform\": \"Amazon\",\n                        \"timeCycle\": \"daily\"\n                    },\n                    token=auth_token\n                )\n                context.set(\"task_id\", create_response.json()[\"data\"][\"id\"])\n            task_id = context.get(\"task_id\")\n            case[\"url\"] = case[\"url\"].replace(\"{task_id}\", str(task_id))\n    \n        # 预处理请求\n        request_data = preprocess_request(case, auth_token)\n    \n        # 发送请求\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            token=auth_token\n        )\n    \n        # 断言\n>       assert_response(\n            response,\n            expected_code=case[\"expected_code\"],\n            expected_success=case.get(\"expected_success\"),\n            expected_message=case.get(\"expected_message\")\n        )\n\ntests\\test_crawler_tasks.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [403]>, expected_code = 200\nexpected_success = True, expected_message = None\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response}\"\nE       AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nE       assert 403 == 200\nE        +  where 403 = <Response [403]>.status_code\n\nutils\\test_utils.py:7: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":20,"retriesStatusChange":true,"beforeStages":[{"name":"auth_token","time":{"start":1753986170918,"stop":1753986171158,"duration":240},"status":"passed","steps":[{"name":"发送请求：'POST' '/auth/login'","time":{"start":1753986170918,"stop":1753986171158,"duration":240},"status":"passed","steps":[],"attachments":[{"uid":"6b2613580c26ef26","name":"请求信息","source":"6b2613580c26ef26.txt","type":"text/plain","size":41},{"uid":"8e827d94d812ee77","name":"请求头","source":"8e827d94d812ee77.txt","type":"text/plain","size":45},{"uid":"9acd215395a7de2d","name":"请求参数","source":"9acd215395a7de2d.json","type":"application/json","size":58},{"uid":"3e970badf695563a","name":"响应信息","source":"3e970badf695563a.txt","type":"text/plain","size":14},{"uid":"cbb970fec340dd01","name":"响应体","source":"cbb970fec340dd01.json","type":"application/json","size":214}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/login'"},{"name":"headers","value":"None"},{"name":"params","value":"None"},{"name":"json","value":"{'username': 'admin1155', 'password': 'admin1155'}"},{"name":"files","value":"None"},{"name":"token","value":"None"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":1}],"testStage":{"status":"failed","statusMessage":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","statusTrace":"case = {'case_id': 'task_010', 'expected_code': 200, 'expected_success': True, 'headers': {'Authorization': 'Bearer '}, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODYxNzEsImV4cCI6MTc1Mzk5MzM3MX0.zK-nKV5gA87c92ZxqcAnIPEtww1qnqyR8zmpdQuFASU'\n\n    @allure.feature(\"爬虫任务模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_crawler_tasks(case, auth_token):\n        allure.story(case[\"name\"])\n        allure.title(case[\"case_id\"] + \": \" + case[\"name\"])\n    \n        # 替换任务ID占位符\n        if \"{task_id}\" in case[\"url\"]:\n            # 先创建一个测试任务获取ID\n            from utils.context import context\n            if not context.get(\"task_id\"):\n                create_response = Request.send_request(\n                    \"POST\", \"/crawler/tasks\",\n                    json={\n                        \"processName\": \"测试任务\",\n                        \"asinList\": \"B08XJ8J7SZ\",\n                        \"requiredInfo\": [\"price\"],\n                        \"platform\": \"Amazon\",\n                        \"timeCycle\": \"daily\"\n                    },\n                    token=auth_token\n                )\n                context.set(\"task_id\", create_response.json()[\"data\"][\"id\"])\n            task_id = context.get(\"task_id\")\n            case[\"url\"] = case[\"url\"].replace(\"{task_id}\", str(task_id))\n    \n        # 预处理请求\n        request_data = preprocess_request(case, auth_token)\n    \n        # 发送请求\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            token=auth_token\n        )\n    \n        # 断言\n>       assert_response(\n            response,\n            expected_code=case[\"expected_code\"],\n            expected_success=case.get(\"expected_success\"),\n            expected_message=case.get(\"expected_message\")\n        )\n\ntests\\test_crawler_tasks.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [403]>, expected_code = 200\nexpected_success = True, expected_message = None\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response}\"\nE       AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nE       assert 403 == 200\nE        +  where 403 = <Response [403]>.status_code\n\nutils\\test_utils.py:7: AssertionError","steps":[{"name":"发送请求：'GET' '/crawler/tasks'","time":{"start":1753986171161,"stop":1753986171183,"duration":22},"status":"passed","steps":[],"attachments":[{"uid":"5c618524726eb118","name":"请求信息","source":"5c618524726eb118.txt","type":"text/plain","size":44},{"uid":"49aea482202f4c2a","name":"请求头","source":"49aea482202f4c2a.txt","type":"text/plain","size":73},{"uid":"72a3dcd7a42f650b","name":"请求参数","source":"72a3dcd7a42f650b.json","type":"application/json","size":28},{"uid":"32c81bdc472b36cd","name":"响应信息","source":"32c81bdc472b36cd.txt","type":"text/plain","size":14},{"uid":"759cdf2352614e8c","name":"响应体","source":"759cdf2352614e8c.json","type":"application/json","size":0}],"parameters":[{"name":"method","value":"'GET'"},{"name":"endpoint","value":"'/crawler/tasks'"},{"name":"headers","value":"{'Authorization': 'Bearer '}"},{"name":"params","value":"{'status': 'PAUSED'}"},{"name":"json","value":"{}"},{"name":"files","value":"None"},{"name":"token","value":"'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODYxNzEsImV4cCI6MTc1Mzk5MzM3MX0.zK-nKV5gA87c92ZxqcAnIPEtww1qnqyR8zmpdQuFASU'"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"验证响应：状态码200，消息None","time":{"start":1753986171183,"stop":1753986171184,"duration":1},"status":"failed","statusMessage":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code\n","statusTrace":"  File \"D:\\Anaconda3\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"D:\\工作记录\\项目说明\\api_test\\utils\\test_utils.py\", line 7, in assert_response\n    assert response.status_code == expected_code, \\\n","steps":[],"attachments":[],"parameters":[{"name":"response","value":"<Response [403]>"},{"name":"expected_code","value":"200"},{"name":"expected_success","value":"True"},{"name":"expected_message","value":"None"}],"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[{"uid":"2ad63c37abebd283","name":"log","source":"2ad63c37abebd283.txt","type":"text/plain","size":948},{"uid":"5d8ac8d634f0fd2f","name":"stdout","source":"5d8ac8d634f0fd2f.txt","type":"text/plain","size":183},{"uid":"60b2f495d15f118f","name":"stderr","source":"60b2f495d15f118f.txt","type":"text/plain","size":707}],"parameters":[],"attachmentsCount":8,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":2},"afterStages":[],"labels":[{"name":"feature","value":"爬虫任务模块"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_crawler_tasks"},{"name":"host","value":"CYJ"},{"name":"thread","value":"3924-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_crawler_tasks"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"case","value":"{'case_id': 'task_010', 'name': '按状态筛选任务列表', 'method': 'GET', 'url': '/crawler/tasks', 'headers': {'Authorization': 'Bearer '}, 'params': {'status': 'PAUSED'}, 'expected_code': 200, 'expected_success': True}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"1223e251e4b8354e","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753976705967,"stop":1753976705984,"duration":17}},{"uid":"a375ec9b8ae4315e","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753976447698,"stop":1753976447717,"duration":19}},{"uid":"ba04f0c3125a7267","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753976288129,"stop":1753976288141,"duration":12}},{"uid":"36d4da76a734ce82","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753975841329,"stop":1753975841351,"duration":22}},{"uid":"d84524a5d55bfcec","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753974333082,"stop":1753974333132,"duration":50}},{"uid":"85cabb62ad2d4801","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753973755661,"stop":1753973755698,"duration":37}},{"uid":"16f2c7be6206ae07","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753973620025,"stop":1753973620038,"duration":13}},{"uid":"e9c8c18ee18d7ea5","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753972559336,"stop":1753972559370,"duration":34}},{"uid":"2de0159404fa368f","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753971206897,"stop":1753971206934,"duration":37}},{"uid":"37bd3e89691ef291","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403，完整response:<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753970477362,"stop":1753970477375,"duration":13}},{"uid":"22f49dc567cd59d1","status":"broken","statusDetails":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1753970253690,"stop":1753970253701,"duration":11}},{"uid":"693a3e8399b3fc7","status":"broken","statusDetails":"UnboundLocalError: cannot access local variable 'json_data' where it is not associated with a value","time":{"start":1753969915287,"stop":1753969915306,"duration":19}},{"uid":"bba85b73e9731215","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753969580706,"stop":1753969580726,"duration":20}},{"uid":"f7e777f42ed5dd30","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753969356631,"stop":1753969356663,"duration":32}},{"uid":"ece6013f3fb5c47b","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753969088196,"stop":1753969088212,"duration":16}},{"uid":"2eaffe4a533787fc","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753968138594,"stop":1753968138613,"duration":19}},{"uid":"28247f9a4a68f544","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753967369031,"stop":1753967369049,"duration":18}},{"uid":"16f6ce487e66a0bc","status":"broken","statusDetails":"KeyError: 'url'","time":{"start":1753967266744,"stop":1753967266744,"duration":0}},{"uid":"3048380414a36a50","status":"broken","statusDetails":"requests.exceptions.ConnectionError: HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /api/auth/login (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x000001657E09DE50>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。'))","time":{"start":1753967172047,"stop":1753967172047,"duration":0}},{"uid":"762b0a6262673ccf","status":"broken","statusDetails":"KeyError: 'url'","time":{"start":1753966888732,"stop":1753966888732,"duration":0}}],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"7fac823e9927ad4f.json","parameterValues":["{'case_id': 'task_010', 'name': '按状态筛选任务列表', 'method': 'GET', 'url': '/crawler/tasks', 'headers': {'Authorization': 'Bearer '}, 'params': {'status': 'PAUSED'}, 'expected_code': 200, 'expected_success': True}"]}