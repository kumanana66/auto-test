{"uid":"4d2b8958c8af9bdb","name":"test_user_auth[case18]","fullName":"tests.test_user_auth#test_user_auth","historyId":"73a21e24c30644f4ccf646df1483681d","time":{"start":1753971266763,"stop":1753971267048,"duration":285},"status":"failed","statusMessage":"AssertionError: 状态码不符：预期401，实际403，完整response：<Response [403]>\nassert 403 == 401\n +  where 403 = <Response [403]>.status_code","statusTrace":"case = {'case_id': 'auth_019', 'expected_code': 401, 'expected_message': '密码错误，还可重试4次', 'expected_success': False, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5NzEyMDUsImV4cCI6MTc1Mzk3ODQwNX0.WOAASegbEyRvR0DOK0AgvdOiIqEWAahr1Gst5AAZ3bQ'\nsmall_jpg_image = 'small_1412.jpg', large_jpg_image = 'large_8836.jpg'\nsmall_png_image = 'small_2815.png', large_png_image = 'large_5294.png'\nnon_image_file = 'test_2732.txt'\n\n    @allure.feature(\"用户认证模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_user_auth(\n        case,\n        auth_token,\n        small_jpg_image,\n        large_jpg_image,\n        small_png_image,\n        large_png_image,\n        non_image_file\n    ):\n        allure.story(case[\"name\"])\n        allure.title(f\"{case['case_id']}: {case['name']}\")\n    \n        # 文件映射：用例文件名 -> 实际测试文件\n        file_map = {\n            \"test_avatar.jpg\": small_jpg_image,\n            \"large_avatar.jpg\": large_jpg_image,\n            \"test_avatar.png\": small_png_image,\n            \"large_avatar.png\": large_png_image,\n            \"test_file.txt\": non_image_file\n        }\n    \n        # 预处理请求\n        request_data = preprocess_request(case, auth_token, file_map)\n    \n        # 注册用例单独处理验证码\n        if (case[\"case_id\"].startswith(\"auth_00\")\n            and case[\"method\"] == \"POST\"\n            and case[\"url\"] == \"/auth/register\"):\n    \n            # 获取注册邮箱\n            email = request_data[\"json\"][\"email\"]\n            # 发送并获取验证码\n            verify_code = send_and_get_verify_code(email)\n            # 填充验证码到请求参数\n            request_data[\"json\"][\"verifyCode\"] = verify_code\n    \n        # 发送请求\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            files=request_data.get(\"files\"),\n            token=auth_token if case[\"case_id\"] != \"auth_029\" else None  # 未登录用例移除token\n        )\n    \n        # 断言\n>       assert_response(\n            response,\n            expected_code=case[\"expected_code\"],\n            expected_success=case.get(\"expected_success\"),\n            expected_message=case.get(\"expected_message\")\n        )\n\ntests\\test_user_auth.py:79: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [403]>, expected_code = 401, expected_success = False\nexpected_message = '密码错误，还可重试4次'\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response}\"\nE       AssertionError: 状态码不符：预期401，实际403，完整response：<Response [403]>\nE       assert 403 == 401\nE        +  where 403 = <Response [403]>.status_code\n\nutils\\test_utils.py:7: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":11,"retriesStatusChange":true,"beforeStages":[{"name":"auth_token","time":{"start":1753971204702,"stop":1753971205134,"duration":432},"status":"passed","steps":[{"name":"发送请求：'POST' '/auth/login'","time":{"start":1753971204702,"stop":1753971205134,"duration":432},"status":"passed","steps":[],"attachments":[{"uid":"c50b8030de3ba1f5","name":"请求信息","source":"c50b8030de3ba1f5.json","type":"application/json","size":64},{"uid":"f5eab686204c030d","name":"响应信息","source":"f5eab686204c030d.txt","type":"text/plain","size":20},{"uid":"632dfb5f654f3663","name":"响应体","source":"632dfb5f654f3663.json","type":"application/json","size":214}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/login'"},{"name":"headers","value":"None"},{"name":"params","value":"None"},{"name":"json","value":"{'username': 'admin1155', 'password': 'admin1155'}"},{"name":"files","value":"None"},{"name":"token","value":"None"}],"attachmentsCount":3,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":3,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":1},{"name":"small_jpg_image","time":{"start":1753971265385,"stop":1753971265601,"duration":216},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_jpg_image","time":{"start":1753971265602,"stop":1753971266130,"duration":528},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"small_png_image","time":{"start":1753971266130,"stop":1753971266191,"duration":61},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_png_image","time":{"start":1753971266191,"stop":1753971266760,"duration":569},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"non_image_file","time":{"start":1753971266760,"stop":1753971266761,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: 状态码不符：预期401，实际403，完整response：<Response [403]>\nassert 403 == 401\n +  where 403 = <Response [403]>.status_code","statusTrace":"case = {'case_id': 'auth_019', 'expected_code': 401, 'expected_message': '密码错误，还可重试4次', 'expected_success': False, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5NzEyMDUsImV4cCI6MTc1Mzk3ODQwNX0.WOAASegbEyRvR0DOK0AgvdOiIqEWAahr1Gst5AAZ3bQ'\nsmall_jpg_image = 'small_1412.jpg', large_jpg_image = 'large_8836.jpg'\nsmall_png_image = 'small_2815.png', large_png_image = 'large_5294.png'\nnon_image_file = 'test_2732.txt'\n\n    @allure.feature(\"用户认证模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_user_auth(\n        case,\n        auth_token,\n        small_jpg_image,\n        large_jpg_image,\n        small_png_image,\n        large_png_image,\n        non_image_file\n    ):\n        allure.story(case[\"name\"])\n        allure.title(f\"{case['case_id']}: {case['name']}\")\n    \n        # 文件映射：用例文件名 -> 实际测试文件\n        file_map = {\n            \"test_avatar.jpg\": small_jpg_image,\n            \"large_avatar.jpg\": large_jpg_image,\n            \"test_avatar.png\": small_png_image,\n            \"large_avatar.png\": large_png_image,\n            \"test_file.txt\": non_image_file\n        }\n    \n        # 预处理请求\n        request_data = preprocess_request(case, auth_token, file_map)\n    \n        # 注册用例单独处理验证码\n        if (case[\"case_id\"].startswith(\"auth_00\")\n            and case[\"method\"] == \"POST\"\n            and case[\"url\"] == \"/auth/register\"):\n    \n            # 获取注册邮箱\n            email = request_data[\"json\"][\"email\"]\n            # 发送并获取验证码\n            verify_code = send_and_get_verify_code(email)\n            # 填充验证码到请求参数\n            request_data[\"json\"][\"verifyCode\"] = verify_code\n    \n        # 发送请求\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            files=request_data.get(\"files\"),\n            token=auth_token if case[\"case_id\"] != \"auth_029\" else None  # 未登录用例移除token\n        )\n    \n        # 断言\n>       assert_response(\n            response,\n            expected_code=case[\"expected_code\"],\n            expected_success=case.get(\"expected_success\"),\n            expected_message=case.get(\"expected_message\")\n        )\n\ntests\\test_user_auth.py:79: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [403]>, expected_code = 401, expected_success = False\nexpected_message = '密码错误，还可重试4次'\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response}\"\nE       AssertionError: 状态码不符：预期401，实际403，完整response：<Response [403]>\nE       assert 403 == 401\nE        +  where 403 = <Response [403]>.status_code\n\nutils\\test_utils.py:7: AssertionError","steps":[{"name":"发送请求：'POST' '/auth/login'","time":{"start":1753971266763,"stop":1753971267046,"duration":283},"status":"passed","steps":[],"attachments":[{"uid":"7b4270fece69e086","name":"请求信息","source":"7b4270fece69e086.json","type":"application/json","size":63},{"uid":"d833d5b59a6de66e","name":"响应信息","source":"d833d5b59a6de66e.txt","type":"text/plain","size":20},{"uid":"35c8ea07b0d7c875","name":"响应体","source":"35c8ea07b0d7c875.json","type":"application/json","size":0}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/login'"},{"name":"headers","value":"{}"},{"name":"params","value":"{}"},{"name":"json","value":"{'username': 'admin1155', 'password': 'Wrong123'}"},{"name":"files","value":"None"},{"name":"token","value":"'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5NzEyMDUsImV4cCI6MTc1Mzk3ODQwNX0.WOAASegbEyRvR0DOK0AgvdOiIqEWAahr1Gst5AAZ3bQ'"}],"attachmentsCount":3,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"验证响应：状态码401，消息'密码错误，还可重试4次'","time":{"start":1753971267047,"stop":1753971267047,"duration":0},"status":"failed","statusMessage":"AssertionError: 状态码不符：预期401，实际403，完整response：<Response [403]>\nassert 403 == 401\n +  where 403 = <Response [403]>.status_code\n","statusTrace":"  File \"D:\\Anaconda3\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"D:\\工作记录\\项目说明\\api_test\\utils\\test_utils.py\", line 7, in assert_response\n    assert response.status_code == expected_code, \\\n","steps":[],"attachments":[],"parameters":[{"name":"response","value":"<Response [403]>"},{"name":"expected_code","value":"401"},{"name":"expected_success","value":"False"},{"name":"expected_message","value":"'密码错误，还可重试4次'"}],"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":3,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":2},"afterStages":[{"name":"non_image_file::0","time":{"start":1753971267067,"stop":1753971267068,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_png_image::0","time":{"start":1753971267070,"stop":1753971267072,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"small_png_image::0","time":{"start":1753971267076,"stop":1753971267077,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_jpg_image::0","time":{"start":1753971267080,"stop":1753971267090,"duration":10},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"small_jpg_image::0","time":{"start":1753971267093,"stop":1753971267096,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"labels":[{"name":"feature","value":"用户认证模块"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_user_auth"},{"name":"host","value":"CYJ"},{"name":"thread","value":"25240-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_user_auth"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"case","value":"{'case_id': 'auth_019', 'name': '密码错误登录', 'method': 'POST', 'url': '/auth/login', 'json': {'username': 'admin1155', 'password': 'Wrong123'}, 'expected_code': 401, 'expected_success': False, 'expected_message': '密码错误，还可重试4次'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"4793b95dbf9ea65","status":"failed","statusDetails":"AssertionError: 状态码不符：预期401，实际403，完整response:<Response [403]>\nassert 403 == 401\n +  where 403 = <Response [403]>.status_code","time":{"start":1753970516254,"stop":1753970516662,"duration":408}},{"uid":"87f15f7d6732f89d","status":"broken","statusDetails":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1753970290678,"stop":1753970290994,"duration":316}},{"uid":"d7de10ae25b7ae2d","status":"broken","statusDetails":"UnboundLocalError: cannot access local variable 'json_data' where it is not associated with a value","time":{"start":1753969955783,"stop":1753969956333,"duration":550}},{"uid":"dba2e5ad1d6c12fd","status":"failed","statusDetails":"AssertionError: 状态码不符：预期401，实际403\nassert 403 == 401\n +  where 403 = <Response [403]>.status_code","time":{"start":1753969622521,"stop":1753969623044,"duration":523}},{"uid":"c745b7f96d2749f6","status":"failed","statusDetails":"AssertionError: 状态码不符：预期401，实际403\nassert 403 == 401\n +  where 403 = <Response [403]>.status_code","time":{"start":1753969391750,"stop":1753969392011,"duration":261}},{"uid":"328154b75a130a0d","status":"failed","statusDetails":"AssertionError: 状态码不符：预期401，实际403\nassert 403 == 401\n +  where 403 = <Response [403]>.status_code","time":{"start":1753969129165,"stop":1753969129622,"duration":457}},{"uid":"96a6f917115f9179","status":"failed","statusDetails":"AssertionError: 状态码不符：预期401，实际403\nassert 403 == 401\n +  where 403 = <Response [403]>.status_code","time":{"start":1753968172804,"stop":1753968173027,"duration":223}},{"uid":"ced0f52051387e31","status":"failed","statusDetails":"AssertionError: 状态码不符：预期401，实际403\nassert 403 == 401\n +  where 403 = <Response [403]>.status_code","time":{"start":1753967371028,"stop":1753967371373,"duration":345}},{"uid":"8de631137fe5e9b0","status":"broken","statusDetails":"KeyError: 'url'","time":{"start":1753967267526,"stop":1753967267526,"duration":0}},{"uid":"36293c932e5e2353","status":"broken","statusDetails":"requests.exceptions.ConnectionError: HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /api/auth/login (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x000001657E09DE50>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。'))","time":{"start":1753967192088,"stop":1753967192088,"duration":0}},{"uid":"75a68001e27dbd66","status":"broken","statusDetails":"KeyError: 'url'","time":{"start":1753966889618,"stop":1753966889618,"duration":0}}],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"4d2b8958c8af9bdb.json","parameterValues":["{'case_id': 'auth_019', 'name': '密码错误登录', 'method': 'POST', 'url': '/auth/login', 'json': {'username': 'admin1155', 'password': 'Wrong123'}, 'expected_code': 401, 'expected_success': False, 'expected_message': '密码错误，还可重试4次'}"]}