{"uid":"e9a8f5c1332923f5","name":"test_crawler_tasks[case2]","fullName":"tests.test_crawler_tasks#test_crawler_tasks","historyId":"5a759891c3a1c4bb5fc37b2d1107595f","time":{"start":1753987837136,"stop":1753987837175,"duration":39},"status":"failed","statusMessage":"AssertionError: 状态码不符：预期403，实际200，完整response：{\"success\":true,\"message\":\"任务创建成功\",\"data\":{\"id\":255,\"processName\":\"亚马逊监控\",\"asinList\":\"\",\"requiredInfo\":[\"price\"],\"platform\":\"Amazon\",\"timeCycle\":\"daily\",\"createTime\":\"2025-08-01T02:50:37.1489982\",\"updateTime\":\"2025-08-01T02:50:37.1489982\",\"status\":\"ACTIVE\",\"userId\":4,\"username\":\"admin1155\"}}\nassert 200 == 403\n +  where 200 = <Response [200]>.status_code","statusTrace":"case = {'case_id': 'task_003', 'expected_code': 403, 'expected_message': '请输入ASIN列表', 'expected_success': False, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODc4MzcsImV4cCI6MTc1Mzk5NTAzN30.9t3zap-5pqZTDfZ4bIDIBHfGZPcPRwqeFwSEWriT7Gs'\ntask_id = 254\n\n    @allure.feature(\"爬虫任务模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_crawler_tasks(case, auth_token, task_id):\n        allure.story(case[\"name\"])\n        allure.title(f\"{case['case_id']}: {case['name']}\")\n    \n        # 替换任务ID占位符\n        if \"{task_id}\" in case[\"url\"]:\n            case[\"url\"] = case[\"url\"].replace(\"{task_id}\", str(task_id))\n            allure.attach(f\"使用任务ID: {task_id}\", \"测试信息\", allure.attachment_type.TEXT)\n    \n        # --------------------------\n        # 关键修改：处理PPT下载的前置依赖\n        # --------------------------\n        # 1. 若当前是下载PPT的用例（task_017），先启动数据分析并等待完成\n        if case[\"case_id\"] == \"task_017\":\n            allure.attach(\"开始执行数据分析数据分析前置操作\", \"前置依赖\", allure.attachment_type.TEXT)\n    \n            # 1.1 启动数据分析\n            analyze_response = Request.send_request(\n                \"POST\", f\"/crawler/tasks/{task_id}/analyze\",  # 对应task_016的接口\n                token=auth_token\n            )\n            assert_response(\n                analyze_response,\n                200,\n                expected_success=True,\n                expected_message=\"数据分析已启动\"  # 匹配task_016的预期消息\n            )\n            allure.attach(\"数据分析已启动\", \"前置操作结果\", allure.attachment_type.TEXT)\n    \n            # 1.2 轮询等待分析完成（复用同test_download_analyzed_ppt的逻辑）\n            max_wait_seconds = 180\n            check_interval = 5\n            elapsed_seconds = 0\n            status = \"PROCESSING\"\n    \n            while elapsed_seconds < max_wait_seconds and status == \"PROCESSING\":\n                # 查询当前状态\n                status_response = Request.send_request(\n                    \"GET\", f\"/crawler/tasks/{task_id}/analyze/status\",\n                    token=auth_token\n                )\n                assert_response(status_response, 200)\n                status = status_response.json()[\"data\"]\n                allure.attach(f\"当前分析状态: {status} (等待{elapsed_seconds}秒)\", \"状态轮询\", allure.attachment_type.TEXT)\n    \n                if status == \"PROCESSING\":\n                    time.sleep(check_interval)\n                    elapsed_seconds += check_interval\n    \n            # 1.3 校验分析状态（必须完成才能继续下载）\n            assert status in [\"COMPLETED\", \"FAILED\"], f\"数据分析超时，最终状态：{status}\"\n            if status == \"FAILED\":\n                pytest.fail(\"数据分析失败，无法下载PPT\")  # 分析失败则标记用例失败\n            allure.attach(\"数据分析已完成\", \"前置操作结果\", allure.attachment_type.TEXT)\n    \n        # 预处理请求\n        request_data = preprocess_request(case, auth_token)\n        if \"headers\" in request_data and \"Authorization\" in request_data[\"headers\"]:\n            del request_data[\"headers\"][\"Authorization\"]\n    \n        # 发送请求（对task_017而言，此时已确保分析完成）\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            token=auth_token\n        )\n    \n        # 断言（增加PPT格式校验）\n        try:\n            assert_response(\n                response,\n                expected_code=case[\"expected_code\"],\n                expected_success=case.get(\"expected_success\"),\n                expected_message=case.get(\"expected_message\")\n            )\n            # 额外校验PPT文件类型（对应case中的expected_content_type）\n            if case.get(\"expected_content_type\"):\n                assert case[\"expected_content_type\"] in response.headers[\"Content-Type\"], \\\n                    f\"文件类型错误，预期: {case['expected_content_type']}, 实际: {response.headers['Content-Type']}\"\n        except AssertionError as e:\n            allure.attach(f\"响应内容: {response.text}\", \"断言失败详情\", allure.attachment_type.TEXT)\n>           raise e\n\ntests\\test_crawler_tasks.py:120: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\test_crawler_tasks.py:108: in test_crawler_tasks\n    assert_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [200]>, expected_code = 403\nexpected_success = False, expected_message = '请输入ASIN列表'\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response.text}\"\nE       AssertionError: 状态码不符：预期403，实际200，完整response：{\"success\":true,\"message\":\"任务创建成功\",\"data\":{\"id\":255,\"processName\":\"亚马逊监控\",\"asinList\":\"\",\"requiredInfo\":[\"price\"],\"platform\":\"Amazon\",\"timeCycle\":\"daily\",\"createTime\":\"2025-08-01T02:50:37.1489982\",\"updateTime\":\"2025-08-01T02:50:37.1489982\",\"status\":\"ACTIVE\",\"userId\":4,\"username\":\"admin1155\"}}\nE       assert 200 == 403\nE        +  where 200 = <Response [200]>.status_code\n\nutils\\test_utils.py:7: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"auth_token","time":{"start":1753987836949,"stop":1753987837103,"duration":154},"status":"passed","steps":[{"name":"发送请求：'POST' '/auth/login'","time":{"start":1753987836949,"stop":1753987837103,"duration":154},"status":"passed","steps":[],"attachments":[{"uid":"8cf04a9252de6282","name":"请求信息","source":"8cf04a9252de6282.txt","type":"text/plain","size":41},{"uid":"7989b354a1974e3d","name":"请求头","source":"7989b354a1974e3d.txt","type":"text/plain","size":45},{"uid":"36d91030a9b1fc0","name":"请求参数","source":"36d91030a9b1fc0.json","type":"application/json","size":58},{"uid":"cccc0ab319621d70","name":"响应信息","source":"cccc0ab319621d70.txt","type":"text/plain","size":14},{"uid":"2008c81bd7feb102","name":"响应体","source":"2008c81bd7feb102.json","type":"application/json","size":214}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/login'"},{"name":"headers","value":"None"},{"name":"params","value":"None"},{"name":"json","value":"{'username': 'admin1155', 'password': 'admin1155'}"},{"name":"files","value":"None"},{"name":"token","value":"None"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":1},{"name":"task_id","time":{"start":1753987837103,"stop":1753987837134,"duration":31},"status":"passed","steps":[{"name":"发送请求：'POST' '/crawler/tasks'","time":{"start":1753987837104,"stop":1753987837134,"duration":30},"status":"passed","steps":[],"attachments":[{"uid":"94f7c85ca26e8fd","name":"请求信息","source":"94f7c85ca26e8fd.txt","type":"text/plain","size":44},{"uid":"3360f63bf8a5b2f6","name":"请求头","source":"3360f63bf8a5b2f6.txt","type":"text/plain","size":209},{"uid":"17b49172f10900cb","name":"请求参数","source":"17b49172f10900cb.json","type":"application/json","size":141},{"uid":"8b14a596ff6b81b8","name":"响应信息","source":"8b14a596ff6b81b8.txt","type":"text/plain","size":14},{"uid":"76986a5785eec91f","name":"响应体","source":"76986a5785eec91f.json","type":"application/json","size":326}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/crawler/tasks'"},{"name":"headers","value":"None"},{"name":"params","value":"None"},{"name":"json","value":"{'processName': '测试任务_None', 'asinList': 'B08XJ8J7SZ', 'requiredInfo': ['price'], 'platform': 'Amazon', 'timeCycle': 'daily'}"},{"name":"files","value":"None"},{"name":"token","value":"'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODc4MzcsImV4cCI6MTc1Mzk5NTAzN30.9t3zap-5pqZTDfZ4bIDIBHfGZPcPRwqeFwSEWriT7Gs'"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"验证响应：状态码200，消息None","time":{"start":1753987837134,"stop":1753987837134,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"response","value":"<Response [200]>"},{"name":"expected_code","value":"200"},{"name":"expected_success","value":"True"},{"name":"expected_message","value":"None"}],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":2}],"testStage":{"status":"failed","statusMessage":"AssertionError: 状态码不符：预期403，实际200，完整response：{\"success\":true,\"message\":\"任务创建成功\",\"data\":{\"id\":255,\"processName\":\"亚马逊监控\",\"asinList\":\"\",\"requiredInfo\":[\"price\"],\"platform\":\"Amazon\",\"timeCycle\":\"daily\",\"createTime\":\"2025-08-01T02:50:37.1489982\",\"updateTime\":\"2025-08-01T02:50:37.1489982\",\"status\":\"ACTIVE\",\"userId\":4,\"username\":\"admin1155\"}}\nassert 200 == 403\n +  where 200 = <Response [200]>.status_code","statusTrace":"case = {'case_id': 'task_003', 'expected_code': 403, 'expected_message': '请输入ASIN列表', 'expected_success': False, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODc4MzcsImV4cCI6MTc1Mzk5NTAzN30.9t3zap-5pqZTDfZ4bIDIBHfGZPcPRwqeFwSEWriT7Gs'\ntask_id = 254\n\n    @allure.feature(\"爬虫任务模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_crawler_tasks(case, auth_token, task_id):\n        allure.story(case[\"name\"])\n        allure.title(f\"{case['case_id']}: {case['name']}\")\n    \n        # 替换任务ID占位符\n        if \"{task_id}\" in case[\"url\"]:\n            case[\"url\"] = case[\"url\"].replace(\"{task_id}\", str(task_id))\n            allure.attach(f\"使用任务ID: {task_id}\", \"测试信息\", allure.attachment_type.TEXT)\n    \n        # --------------------------\n        # 关键修改：处理PPT下载的前置依赖\n        # --------------------------\n        # 1. 若当前是下载PPT的用例（task_017），先启动数据分析并等待完成\n        if case[\"case_id\"] == \"task_017\":\n            allure.attach(\"开始执行数据分析数据分析前置操作\", \"前置依赖\", allure.attachment_type.TEXT)\n    \n            # 1.1 启动数据分析\n            analyze_response = Request.send_request(\n                \"POST\", f\"/crawler/tasks/{task_id}/analyze\",  # 对应task_016的接口\n                token=auth_token\n            )\n            assert_response(\n                analyze_response,\n                200,\n                expected_success=True,\n                expected_message=\"数据分析已启动\"  # 匹配task_016的预期消息\n            )\n            allure.attach(\"数据分析已启动\", \"前置操作结果\", allure.attachment_type.TEXT)\n    \n            # 1.2 轮询等待分析完成（复用同test_download_analyzed_ppt的逻辑）\n            max_wait_seconds = 180\n            check_interval = 5\n            elapsed_seconds = 0\n            status = \"PROCESSING\"\n    \n            while elapsed_seconds < max_wait_seconds and status == \"PROCESSING\":\n                # 查询当前状态\n                status_response = Request.send_request(\n                    \"GET\", f\"/crawler/tasks/{task_id}/analyze/status\",\n                    token=auth_token\n                )\n                assert_response(status_response, 200)\n                status = status_response.json()[\"data\"]\n                allure.attach(f\"当前分析状态: {status} (等待{elapsed_seconds}秒)\", \"状态轮询\", allure.attachment_type.TEXT)\n    \n                if status == \"PROCESSING\":\n                    time.sleep(check_interval)\n                    elapsed_seconds += check_interval\n    \n            # 1.3 校验分析状态（必须完成才能继续下载）\n            assert status in [\"COMPLETED\", \"FAILED\"], f\"数据分析超时，最终状态：{status}\"\n            if status == \"FAILED\":\n                pytest.fail(\"数据分析失败，无法下载PPT\")  # 分析失败则标记用例失败\n            allure.attach(\"数据分析已完成\", \"前置操作结果\", allure.attachment_type.TEXT)\n    \n        # 预处理请求\n        request_data = preprocess_request(case, auth_token)\n        if \"headers\" in request_data and \"Authorization\" in request_data[\"headers\"]:\n            del request_data[\"headers\"][\"Authorization\"]\n    \n        # 发送请求（对task_017而言，此时已确保分析完成）\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            token=auth_token\n        )\n    \n        # 断言（增加PPT格式校验）\n        try:\n            assert_response(\n                response,\n                expected_code=case[\"expected_code\"],\n                expected_success=case.get(\"expected_success\"),\n                expected_message=case.get(\"expected_message\")\n            )\n            # 额外校验PPT文件类型（对应case中的expected_content_type）\n            if case.get(\"expected_content_type\"):\n                assert case[\"expected_content_type\"] in response.headers[\"Content-Type\"], \\\n                    f\"文件类型错误，预期: {case['expected_content_type']}, 实际: {response.headers['Content-Type']}\"\n        except AssertionError as e:\n            allure.attach(f\"响应内容: {response.text}\", \"断言失败详情\", allure.attachment_type.TEXT)\n>           raise e\n\ntests\\test_crawler_tasks.py:120: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\test_crawler_tasks.py:108: in test_crawler_tasks\n    assert_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [200]>, expected_code = 403\nexpected_success = False, expected_message = '请输入ASIN列表'\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response.text}\"\nE       AssertionError: 状态码不符：预期403，实际200，完整response：{\"success\":true,\"message\":\"任务创建成功\",\"data\":{\"id\":255,\"processName\":\"亚马逊监控\",\"asinList\":\"\",\"requiredInfo\":[\"price\"],\"platform\":\"Amazon\",\"timeCycle\":\"daily\",\"createTime\":\"2025-08-01T02:50:37.1489982\",\"updateTime\":\"2025-08-01T02:50:37.1489982\",\"status\":\"ACTIVE\",\"userId\":4,\"username\":\"admin1155\"}}\nE       assert 200 == 403\nE        +  where 200 = <Response [200]>.status_code\n\nutils\\test_utils.py:7: AssertionError","steps":[{"name":"发送请求：'POST' '/crawler/tasks'","time":{"start":1753987837136,"stop":1753987837171,"duration":35},"status":"passed","steps":[],"attachments":[{"uid":"fe288a2bbd16032c","name":"请求信息","source":"fe288a2bbd16032c.txt","type":"text/plain","size":44},{"uid":"be3fcddca39aa7ac","name":"请求头","source":"be3fcddca39aa7ac.txt","type":"text/plain","size":209},{"uid":"e465fd8090fd987c","name":"请求参数","source":"e465fd8090fd987c.json","type":"application/json","size":129},{"uid":"3e5ef2250d411068","name":"响应信息","source":"3e5ef2250d411068.txt","type":"text/plain","size":14},{"uid":"60e5074a69b723a","name":"响应体","source":"60e5074a69b723a.json","type":"application/json","size":314}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/crawler/tasks'"},{"name":"headers","value":"{}"},{"name":"params","value":"{}"},{"name":"json","value":"{'processName': '亚马逊监控', 'asinList': '', 'requiredInfo': ['price'], 'platform': 'Amazon', 'timeCycle': 'daily'}"},{"name":"files","value":"None"},{"name":"token","value":"'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODc4MzcsImV4cCI6MTc1Mzk5NTAzN30.9t3zap-5pqZTDfZ4bIDIBHfGZPcPRwqeFwSEWriT7Gs'"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"验证响应：状态码403，消息'请输入ASIN列表'","time":{"start":1753987837172,"stop":1753987837172,"duration":0},"status":"failed","statusMessage":"AssertionError: 状态码不符：预期403，实际200，完整response：{\"success\":true,\"message\":\"任务创建成功\",\"data\":{\"id\":255,\"processName\":\"亚马逊监控\",\"asinList\":\"\",\"requiredInfo\":[\"price\"],\"platform\":\"Amazon\",\"timeCycle\":\"daily\",\"createTime\":\"2025-08-01T02:50:37.1489982\",\"updateTime\":\"2025-08-01T02:50:37.1489982\",\"status\":\"ACTIVE\",\"userId\":4,\"username\":\"admin1155\"}}\nassert 200 == 403\n +  where 200 = <Response [200]>.status_code\n","statusTrace":"  File \"D:\\Anaconda3\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"D:\\工作记录\\项目说明\\api_test\\utils\\test_utils.py\", line 7, in assert_response\n    assert response.status_code == expected_code, \\\n","steps":[],"attachments":[],"parameters":[{"name":"response","value":"<Response [200]>"},{"name":"expected_code","value":"403"},{"name":"expected_success","value":"False"},{"name":"expected_message","value":"'请输入ASIN列表'"}],"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[{"uid":"cfe4e5f4349a6cae","name":"断言失败详情","source":"cfe4e5f4349a6cae.txt","type":"text/plain","size":328},{"uid":"228e77f0fd049bd6","name":"log","source":"228e77f0fd049bd6.txt","type":"text/plain","size":2910},{"uid":"d9cec704b45482d6","name":"stdout","source":"d9cec704b45482d6.txt","type":"text/plain","size":183},{"uid":"ebf771e7f72ddccf","name":"stderr","source":"ebf771e7f72ddccf.txt","type":"text/plain","size":2398}],"parameters":[],"attachmentsCount":9,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":2},"afterStages":[{"name":"task_id::0","time":{"start":1753987837209,"stop":1753987837243,"duration":34},"status":"passed","steps":[{"name":"发送请求：'DELETE' '/crawler/tasks/254'","time":{"start":1753987837209,"stop":1753987837243,"duration":34},"status":"passed","steps":[],"attachments":[{"uid":"71a47304e53b90b5","name":"请求信息","source":"71a47304e53b90b5.txt","type":"text/plain","size":48},{"uid":"82dd59c04b8e8b4b","name":"请求头","source":"82dd59c04b8e8b4b.txt","type":"text/plain","size":209},{"uid":"53658d925066b462","name":"请求参数","source":"53658d925066b462.json","type":"application/json","size":12},{"uid":"353600ad75185bc0","name":"响应信息","source":"353600ad75185bc0.txt","type":"text/plain","size":14},{"uid":"b60922859e3c6105","name":"响应体","source":"b60922859e3c6105.json","type":"application/json","size":69}],"parameters":[{"name":"method","value":"'DELETE'"},{"name":"endpoint","value":"'/crawler/tasks/254'"},{"name":"headers","value":"None"},{"name":"params","value":"None"},{"name":"json","value":"None"},{"name":"files","value":"None"},{"name":"token","value":"'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODc4MzcsImV4cCI6MTc1Mzk5NTAzN30.9t3zap-5pqZTDfZ4bIDIBHfGZPcPRwqeFwSEWriT7Gs'"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":1}],"labels":[{"name":"feature","value":"爬虫任务模块"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_crawler_tasks"},{"name":"host","value":"CYJ"},{"name":"thread","value":"22580-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_crawler_tasks"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"case","value":"{'case_id': 'task_003', 'name': 'ASIN列表为空', 'method': 'POST', 'url': '/crawler/tasks', 'headers': {'Authorization': ''}, 'json': {'processName': '亚马逊监控', 'asinList': '', 'requiredInfo': ['price'], 'platform': 'Amazon', 'timeCycle': 'daily'}, 'expected_code': 403, 'expected_success': False, 'expected_message': '请输入ASIN列表'}"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"e9a8f5c1332923f5.json","parameterValues":["{'case_id': 'task_003', 'name': 'ASIN列表为空', 'method': 'POST', 'url': '/crawler/tasks', 'headers': {'Authorization': ''}, 'json': {'processName': '亚马逊监控', 'asinList': '', 'requiredInfo': ['price'], 'platform': 'Amazon', 'timeCycle': 'daily'}, 'expected_code': 403, 'expected_success': False, 'expected_message': '请输入ASIN列表'}"]}