{"uid":"b37912ee4f89a7e3","name":"test_user_auth[case20]","fullName":"tests.test_user_auth#test_user_auth","historyId":"24f13640df5a7716fa28cd3732c78f43","time":{"start":1753970520253,"stop":1753970520272,"duration":19},"status":"failed","statusMessage":"AssertionError: 状态码不符：预期200，实际403，完整response:<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","statusTrace":"case = {'case_id': 'auth_021', 'expected_code': 200, 'expected_message': '个人信息更新成功', 'expected_success': True, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5NzA0NzUsImV4cCI6MTc1Mzk3NzY3NX0.f9MnbCDoyTp7Fv3VJVJuXX2sn73h8vA6buegYhGnWUI'\nsmall_jpg_image = 'small_1267.jpg', large_jpg_image = 'large_7138.jpg'\nsmall_png_image = 'small_9771.png', large_png_image = 'large_1130.png', non_image_file = 'test_2918.txt'\n\n    @allure.feature(\"用户认证模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_user_auth(case, auth_token, small_jpg_image, large_jpg_image, small_png_image, large_png_image, non_image_file):\n        allure.story(case[\"name\"])\n        allure.title(case[\"case_id\"] + \": \" + case[\"name\"])\n    \n        # 文件映射\n        file_map = {\n            \"test_avatar.jpg\": small_jpg_image,\n            \"large_avatar.jpg\": large_jpg_image,\n            \"test_avatar.png\": small_png_image,\n            \"large_avatar.png\": large_png_image,\n            \"test_file.txt\": non_image_file\n        }\n        # 预处理请求\n        request_data = preprocess_request(case, auth_token, file_map)\n    \n        # 测试用例：未登录状态上传头像\n        if case[\"case_id\"] == \"auth_029\":\n            # 移除token，模拟未登录\n            response = Request.send_request(\n                method=case[\"method\"],\n                endpoint=case[\"url\"],\n                files=request_data.get(\"files\"),\n                token=None  # 显式传None，不携带token\n            )\n        else:\n            # 发送请求\n            response = Request.send_request(\n                method=case[\"method\"],\n                endpoint=case[\"url\"],\n                json=request_data.get(\"json\"),\n                params=request_data.get(\"params\"),\n                headers=request_data.get(\"headers\"),\n                files=request_data.get(\"files\"),\n                token=auth_token\n            )\n    \n        # 断言\n>       assert_response(\n            response,\n            expected_code=case[\"expected_code\"],\n            expected_success=case.get(\"expected_success\"),\n            expected_message=case.get(\"expected_message\")\n        )\n\ntests\\test_user_auth.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [403]>, expected_code = 200, expected_success = True, expected_message = '个人信息更新成功'\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response:{response}\"\nE       AssertionError: 状态码不符：预期200，实际403，完整response:<Response [403]>\nE       assert 403 == 200\nE        +  where 403 = <Response [403]>.status_code\n\nutils\\test_utils.py:7: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"auth_token","time":{"start":1753970475597,"stop":1753970475889,"duration":292},"status":"passed","steps":[{"name":"发送请求：'POST' '/auth/login'","time":{"start":1753970475597,"stop":1753970475888,"duration":291},"status":"passed","steps":[],"attachments":[{"uid":"78d75a29aa8a6a96","name":"请求信息","source":"78d75a29aa8a6a96.json","type":"application/json","size":64},{"uid":"4d3ae47f755faf29","name":"响应信息","source":"4d3ae47f755faf29.txt","type":"text/plain","size":20},{"uid":"b69cfaef766514dd","name":"响应体","source":"b69cfaef766514dd.json","type":"application/json","size":214}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/login'"},{"name":"headers","value":"None"},{"name":"params","value":"None"},{"name":"json","value":"{'username': 'admin1155', 'password': 'admin1155'}"},{"name":"files","value":"None"},{"name":"token","value":"None"}],"attachmentsCount":3,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":3,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":1},{"name":"small_jpg_image","time":{"start":1753970518341,"stop":1753970518653,"duration":312},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_jpg_image","time":{"start":1753970518653,"stop":1753970519419,"duration":766},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"small_png_image","time":{"start":1753970519419,"stop":1753970519466,"duration":47},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_png_image","time":{"start":1753970519466,"stop":1753970520248,"duration":782},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"non_image_file","time":{"start":1753970520248,"stop":1753970520250,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: 状态码不符：预期200，实际403，完整response:<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","statusTrace":"case = {'case_id': 'auth_021', 'expected_code': 200, 'expected_message': '个人信息更新成功', 'expected_success': True, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5NzA0NzUsImV4cCI6MTc1Mzk3NzY3NX0.f9MnbCDoyTp7Fv3VJVJuXX2sn73h8vA6buegYhGnWUI'\nsmall_jpg_image = 'small_1267.jpg', large_jpg_image = 'large_7138.jpg'\nsmall_png_image = 'small_9771.png', large_png_image = 'large_1130.png', non_image_file = 'test_2918.txt'\n\n    @allure.feature(\"用户认证模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_user_auth(case, auth_token, small_jpg_image, large_jpg_image, small_png_image, large_png_image, non_image_file):\n        allure.story(case[\"name\"])\n        allure.title(case[\"case_id\"] + \": \" + case[\"name\"])\n    \n        # 文件映射\n        file_map = {\n            \"test_avatar.jpg\": small_jpg_image,\n            \"large_avatar.jpg\": large_jpg_image,\n            \"test_avatar.png\": small_png_image,\n            \"large_avatar.png\": large_png_image,\n            \"test_file.txt\": non_image_file\n        }\n        # 预处理请求\n        request_data = preprocess_request(case, auth_token, file_map)\n    \n        # 测试用例：未登录状态上传头像\n        if case[\"case_id\"] == \"auth_029\":\n            # 移除token，模拟未登录\n            response = Request.send_request(\n                method=case[\"method\"],\n                endpoint=case[\"url\"],\n                files=request_data.get(\"files\"),\n                token=None  # 显式传None，不携带token\n            )\n        else:\n            # 发送请求\n            response = Request.send_request(\n                method=case[\"method\"],\n                endpoint=case[\"url\"],\n                json=request_data.get(\"json\"),\n                params=request_data.get(\"params\"),\n                headers=request_data.get(\"headers\"),\n                files=request_data.get(\"files\"),\n                token=auth_token\n            )\n    \n        # 断言\n>       assert_response(\n            response,\n            expected_code=case[\"expected_code\"],\n            expected_success=case.get(\"expected_success\"),\n            expected_message=case.get(\"expected_message\")\n        )\n\ntests\\test_user_auth.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [403]>, expected_code = 200, expected_success = True, expected_message = '个人信息更新成功'\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response:{response}\"\nE       AssertionError: 状态码不符：预期200，实际403，完整response:<Response [403]>\nE       assert 403 == 200\nE        +  where 403 = <Response [403]>.status_code\n\nutils\\test_utils.py:7: AssertionError","steps":[{"name":"发送请求：'PUT' '/auth/userinfo'","time":{"start":1753970520253,"stop":1753970520270,"duration":17},"status":"passed","steps":[],"attachments":[{"uid":"5be184cba78cb337","name":"请求信息","source":"5be184cba78cb337.json","type":"application/json","size":150},{"uid":"1fef7009cbdc9609","name":"响应信息","source":"1fef7009cbdc9609.txt","type":"text/plain","size":20},{"uid":"68a882f37186440f","name":"响应体","source":"68a882f37186440f.json","type":"application/json","size":0}],"parameters":[{"name":"method","value":"'PUT'"},{"name":"endpoint","value":"'/auth/userinfo'"},{"name":"headers","value":"{'Authorization': 'Bearer '}"},{"name":"params","value":"{}"},{"name":"json","value":"{'oldPassword': 'admin1155', 'newPassword': 'NewTest789', 'securityEmail': 'admin1155@example.com', 'verificationCode': '{verify_code}'}"},{"name":"files","value":"None"},{"name":"token","value":"'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5NzA0NzUsImV4cCI6MTc1Mzk3NzY3NX0.f9MnbCDoyTp7Fv3VJVJuXX2sn73h8vA6buegYhGnWUI'"}],"attachmentsCount":3,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"验证响应：状态码200，消息'个人信息更新成功'","time":{"start":1753970520270,"stop":1753970520270,"duration":0},"status":"failed","statusMessage":"AssertionError: 状态码不符：预期200，实际403，完整response:<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code\n","statusTrace":"  File \"D:\\Anaconda3\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"D:\\工作记录\\项目说明\\api_test\\utils\\test_utils.py\", line 7, in assert_response\n    assert response.status_code == expected_code, \\\n","steps":[],"attachments":[],"parameters":[{"name":"response","value":"<Response [403]>"},{"name":"expected_code","value":"200"},{"name":"expected_success","value":"True"},{"name":"expected_message","value":"'个人信息更新成功'"}],"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":3,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":2},"afterStages":[{"name":"non_image_file::0","time":{"start":1753970520297,"stop":1753970520298,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_png_image::0","time":{"start":1753970520301,"stop":1753970520302,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"small_png_image::0","time":{"start":1753970520305,"stop":1753970520307,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_jpg_image::0","time":{"start":1753970520310,"stop":1753970520321,"duration":11},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"small_jpg_image::0","time":{"start":1753970520327,"stop":1753970520332,"duration":5},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"labels":[{"name":"feature","value":"用户认证模块"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_user_auth"},{"name":"host","value":"CYJ"},{"name":"thread","value":"19844-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_user_auth"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"case","value":"{'case_id': 'auth_021', 'name': '旧密码正确+新密码符合强度要求', 'method': 'PUT', 'url': '/auth/userinfo', 'headers': {'Authorization': 'Bearer '}, 'json': {'oldPassword': 'admin1155', 'newPassword': 'NewTest789', 'securityEmail': 'admin1155@example.com', 'verificationCode': '{verify_code}'}, 'expected_code': 200, 'expected_success': True, 'expected_message': '个人信息更新成功'}"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"b37912ee4f89a7e3.json","parameterValues":["{'case_id': 'auth_021', 'name': '旧密码正确+新密码符合强度要求', 'method': 'PUT', 'url': '/auth/userinfo', 'headers': {'Authorization': 'Bearer '}, 'json': {'oldPassword': 'admin1155', 'newPassword': 'NewTest789', 'securityEmail': 'admin1155@example.com', 'verificationCode': '{verify_code}'}, 'expected_code': 200, 'expected_success': True, 'expected_message': '个人信息更新成功'}"]}