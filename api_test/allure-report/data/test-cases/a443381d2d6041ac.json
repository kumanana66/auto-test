{"uid":"a443381d2d6041ac","name":"test_user_auth[case22]","fullName":"tests.test_user_auth#test_user_auth","historyId":"78c1f28a1eb1d7e1b021f39fa5697cd7","time":{"start":1753973822896,"stop":1753973822926,"duration":30},"status":"failed","statusMessage":"AssertionError: 状态码不符：预期400，实际403，完整response：<Response [403]>\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code","statusTrace":"case = {'case_id': 'auth_023', 'expected_code': 400, 'expected_message': '新密码不能与当前密码相同', 'expected_success': False, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5NzM4MjEsImV4cCI6MTc1Mzk4MTAyMX0.Uqt8acUIvV3q7xT_zNTvn9eAodFZtW2nmrLCuMRvAS8'\nsmall_jpg_image = 'small_7316.jpg', large_jpg_image = 'large_6769.jpg'\nsmall_png_image = 'small_4451.png', large_png_image = 'large_1678.png'\nnon_image_file = 'test_5380.txt'\n\n    @allure.feature(\"用户认证模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_user_auth(case, auth_token, small_jpg_image, large_jpg_image, small_png_image, large_png_image, non_image_file):\n        allure.story(case[\"name\"])\n        allure.title(f\"{case['case_id']}: {case['name']}\")\n    \n        # 文件映射：用例文件名 -> 实际测试文件\n        file_map = {\n            \"test_avatar.jpg\": small_jpg_image,\n            \"large_avatar.jpg\": large_jpg_image,\n            \"test_avatar.png\": small_png_image,\n            \"large_avatar.png\": large_png_image,\n            \"test_file.txt\": non_image_file\n        }\n    \n        # 预处理请求\n        request_data = preprocess_request(case, auth_token, file_map)\n    \n        # 注册用例单独处理验证码\n        if (case[\"case_id\"].startswith(\"auth_00\")\n            and case[\"method\"] == \"POST\"\n            and case[\"url\"] == \"/auth/register\"):\n    \n            # 获取注册邮箱\n            email = request_data[\"json\"][\"email\"]\n            # 发送并获取验证码\n            verify_code = send_and_get_verify_code(email)\n            # 填充验证码到请求参数\n            request_data[\"json\"][\"verifyCode\"] = verify_code\n    \n        # 发送请求\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            files=request_data.get(\"files\"),\n            token=auth_token if case[\"case_id\"] != \"auth_029\" else None  # 未登录用例移除token\n        )\n    \n        # 断言\n>       assert_response(\n            response,\n            expected_code=case[\"expected_code\"],\n            expected_success=case.get(\"expected_success\"),\n            expected_message=case.get(\"expected_message\")\n        )\n\ntests\\test_user_auth.py:71: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [403]>, expected_code = 400, expected_success = False\nexpected_message = '新密码不能与当前密码相同'\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response}\"\nE       AssertionError: 状态码不符：预期400，实际403，完整response：<Response [403]>\nE       assert 403 == 400\nE        +  where 403 = <Response [403]>.status_code\n\nutils\\test_utils.py:7: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":14,"retriesStatusChange":true,"beforeStages":[{"name":"auth_token","time":{"start":1753973820925,"stop":1753973821322,"duration":397},"status":"passed","steps":[{"name":"发送请求：'POST' '/auth/login'","time":{"start":1753973820926,"stop":1753973821321,"duration":395},"status":"passed","steps":[],"attachments":[{"uid":"1462ba1afc6bfaa2","name":"请求信息","source":"1462ba1afc6bfaa2.json","type":"application/json","size":64},{"uid":"4cce1de1b1451624","name":"响应信息","source":"4cce1de1b1451624.txt","type":"text/plain","size":20},{"uid":"643ac9973e508b9e","name":"响应体","source":"643ac9973e508b9e.json","type":"application/json","size":214}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/login'"},{"name":"headers","value":"None"},{"name":"params","value":"None"},{"name":"json","value":"{'username': 'admin1155', 'password': 'admin1155'}"},{"name":"files","value":"None"},{"name":"token","value":"None"}],"attachmentsCount":3,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":3,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":1},{"name":"small_jpg_image","time":{"start":1753973821322,"stop":1753973821589,"duration":267},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_jpg_image","time":{"start":1753973821589,"stop":1753973822369,"duration":780},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"small_png_image","time":{"start":1753973822369,"stop":1753973822496,"duration":127},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_png_image","time":{"start":1753973822497,"stop":1753973822887,"duration":390},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"non_image_file","time":{"start":1753973822888,"stop":1753973822894,"duration":6},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: 状态码不符：预期400，实际403，完整response：<Response [403]>\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code","statusTrace":"case = {'case_id': 'auth_023', 'expected_code': 400, 'expected_message': '新密码不能与当前密码相同', 'expected_success': False, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5NzM4MjEsImV4cCI6MTc1Mzk4MTAyMX0.Uqt8acUIvV3q7xT_zNTvn9eAodFZtW2nmrLCuMRvAS8'\nsmall_jpg_image = 'small_7316.jpg', large_jpg_image = 'large_6769.jpg'\nsmall_png_image = 'small_4451.png', large_png_image = 'large_1678.png'\nnon_image_file = 'test_5380.txt'\n\n    @allure.feature(\"用户认证模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_user_auth(case, auth_token, small_jpg_image, large_jpg_image, small_png_image, large_png_image, non_image_file):\n        allure.story(case[\"name\"])\n        allure.title(f\"{case['case_id']}: {case['name']}\")\n    \n        # 文件映射：用例文件名 -> 实际测试文件\n        file_map = {\n            \"test_avatar.jpg\": small_jpg_image,\n            \"large_avatar.jpg\": large_jpg_image,\n            \"test_avatar.png\": small_png_image,\n            \"large_avatar.png\": large_png_image,\n            \"test_file.txt\": non_image_file\n        }\n    \n        # 预处理请求\n        request_data = preprocess_request(case, auth_token, file_map)\n    \n        # 注册用例单独处理验证码\n        if (case[\"case_id\"].startswith(\"auth_00\")\n            and case[\"method\"] == \"POST\"\n            and case[\"url\"] == \"/auth/register\"):\n    \n            # 获取注册邮箱\n            email = request_data[\"json\"][\"email\"]\n            # 发送并获取验证码\n            verify_code = send_and_get_verify_code(email)\n            # 填充验证码到请求参数\n            request_data[\"json\"][\"verifyCode\"] = verify_code\n    \n        # 发送请求\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            files=request_data.get(\"files\"),\n            token=auth_token if case[\"case_id\"] != \"auth_029\" else None  # 未登录用例移除token\n        )\n    \n        # 断言\n>       assert_response(\n            response,\n            expected_code=case[\"expected_code\"],\n            expected_success=case.get(\"expected_success\"),\n            expected_message=case.get(\"expected_message\")\n        )\n\ntests\\test_user_auth.py:71: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [403]>, expected_code = 400, expected_success = False\nexpected_message = '新密码不能与当前密码相同'\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response}\"\nE       AssertionError: 状态码不符：预期400，实际403，完整response：<Response [403]>\nE       assert 403 == 400\nE        +  where 403 = <Response [403]>.status_code\n\nutils\\test_utils.py:7: AssertionError","steps":[{"name":"发送请求：'PUT' '/auth/userinfo'","time":{"start":1753973822897,"stop":1753973822920,"duration":23},"status":"passed","steps":[],"attachments":[{"uid":"cff7e660a5de8555","name":"请求信息","source":"cff7e660a5de8555.json","type":"application/json","size":149},{"uid":"e2d4b6f3b25038f6","name":"响应信息","source":"e2d4b6f3b25038f6.txt","type":"text/plain","size":20},{"uid":"dab0d3ca34500ead","name":"响应体","source":"dab0d3ca34500ead.json","type":"application/json","size":0}],"parameters":[{"name":"method","value":"'PUT'"},{"name":"endpoint","value":"'/auth/userinfo'"},{"name":"headers","value":"{'Authorization': 'Bearer '}"},{"name":"params","value":"{}"},{"name":"json","value":"{'oldPassword': 'admin1155', 'newPassword': 'admin1155', 'securityEmail': 'admin1155@example.com', 'verificationCode': '{verify_code}'}"},{"name":"files","value":"None"},{"name":"token","value":"'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5NzM4MjEsImV4cCI6MTc1Mzk4MTAyMX0.Uqt8acUIvV3q7xT_zNTvn9eAodFZtW2nmrLCuMRvAS8'"}],"attachmentsCount":3,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"验证响应：状态码400，消息'新密码不能与当前密码相同'","time":{"start":1753973822921,"stop":1753973822921,"duration":0},"status":"failed","statusMessage":"AssertionError: 状态码不符：预期400，实际403，完整response：<Response [403]>\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code\n","statusTrace":"  File \"D:\\Anaconda3\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"D:\\工作记录\\项目说明\\api_test\\utils\\test_utils.py\", line 7, in assert_response\n    assert response.status_code == expected_code, \\\n","steps":[],"attachments":[],"parameters":[{"name":"response","value":"<Response [403]>"},{"name":"expected_code","value":"400"},{"name":"expected_success","value":"False"},{"name":"expected_message","value":"'新密码不能与当前密码相同'"}],"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[{"uid":"685414f583743b28","name":"stdout","source":"685414f583743b28.txt","type":"text/plain","size":183}],"parameters":[],"attachmentsCount":4,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":2},"afterStages":[{"name":"non_image_file::0","time":{"start":1753973822973,"stop":1753973822975,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_png_image::0","time":{"start":1753973822981,"stop":1753973822988,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"small_png_image::0","time":{"start":1753973822996,"stop":1753973823000,"duration":4},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_jpg_image::0","time":{"start":1753973823003,"stop":1753973823021,"duration":18},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"small_jpg_image::0","time":{"start":1753973823030,"stop":1753973823038,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"labels":[{"name":"feature","value":"用户认证模块"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_user_auth"},{"name":"host","value":"CYJ"},{"name":"thread","value":"1232-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_user_auth"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"case","value":"{'case_id': 'auth_023', 'name': '新密码与旧密码相同', 'method': 'PUT', 'url': '/auth/userinfo', 'headers': {'Authorization': 'Bearer '}, 'json': {'oldPassword': 'admin1155', 'newPassword': 'admin1155', 'securityEmail': 'admin1155@example.com', 'verificationCode': '{verify_code}'}, 'expected_code': 400, 'expected_success': False, 'expected_message': '新密码不能与当前密码相同'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"742c090b9c1b1b10","status":"failed","statusDetails":"AssertionError: 状态码不符：预期400，实际403，完整response：<Response [403]>\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code","time":{"start":1753973671404,"stop":1753973671420,"duration":16}},{"uid":"a784ee9158dfeb46","status":"failed","statusDetails":"AssertionError: 状态码不符：预期400，实际403，完整response：<Response [403]>\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code","time":{"start":1753972609280,"stop":1753972609295,"duration":15}},{"uid":"415a1374f86309a0","status":"failed","statusDetails":"AssertionError: 状态码不符：预期400，实际403，完整response：<Response [403]>\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code","time":{"start":1753971275837,"stop":1753971275880,"duration":43}},{"uid":"2bdd4f507b9cc372","status":"failed","statusDetails":"AssertionError: 状态码不符：预期400，实际403，完整response:<Response [403]>\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code","time":{"start":1753970524177,"stop":1753970524207,"duration":30}},{"uid":"df9806c7906b6b21","status":"broken","statusDetails":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1753970299657,"stop":1753970299707,"duration":50}},{"uid":"8daa87136712b94b","status":"broken","statusDetails":"UnboundLocalError: cannot access local variable 'json_data' where it is not associated with a value","time":{"start":1753969965225,"stop":1753969965255,"duration":30}},{"uid":"237620be88286af8","status":"failed","statusDetails":"AssertionError: 状态码不符：预期400，实际403\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code","time":{"start":1753969631719,"stop":1753969631748,"duration":29}},{"uid":"c2d59a5b56dfc036","status":"failed","statusDetails":"AssertionError: 状态码不符：预期400，实际403\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code","time":{"start":1753969399085,"stop":1753969399095,"duration":10}},{"uid":"56e42cd577e4772b","status":"failed","statusDetails":"AssertionError: 状态码不符：预期400，实际403\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code","time":{"start":1753969136927,"stop":1753969136969,"duration":42}},{"uid":"f5f82e574b703011","status":"failed","statusDetails":"AssertionError: 状态码不符：预期400，实际403\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code","time":{"start":1753968179292,"stop":1753968179306,"duration":14}},{"uid":"a0b4c9dd7f487d17","status":"failed","statusDetails":"AssertionError: 状态码不符：预期400，实际403\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code","time":{"start":1753967371618,"stop":1753967371645,"duration":27}},{"uid":"89ee8cec107f26b9","status":"broken","statusDetails":"KeyError: 'url'","time":{"start":1753967267627,"stop":1753967267627,"duration":0}},{"uid":"cacfc31e81707d49","status":"broken","statusDetails":"requests.exceptions.ConnectionError: HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /api/auth/login (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x000001657E09DE50>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。'))","time":{"start":1753967193833,"stop":1753967193833,"duration":0}},{"uid":"e9cee174f31546c8","status":"broken","statusDetails":"KeyError: 'url'","time":{"start":1753966889887,"stop":1753966889887,"duration":0}}],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"a443381d2d6041ac.json","parameterValues":["{'case_id': 'auth_023', 'name': '新密码与旧密码相同', 'method': 'PUT', 'url': '/auth/userinfo', 'headers': {'Authorization': 'Bearer '}, 'json': {'oldPassword': 'admin1155', 'newPassword': 'admin1155', 'securityEmail': 'admin1155@example.com', 'verificationCode': '{verify_code}'}, 'expected_code': 400, 'expected_success': False, 'expected_message': '新密码不能与当前密码相同'}"]}