{"uid":"b3d11cd2d2f5537d","name":"test_crawler_tasks[case7]","fullName":"tests.test_crawler_tasks#test_crawler_tasks","historyId":"9bf433f00c3d8756279405f3ad6e92a1","time":{"start":1753986980056,"stop":1753986980195,"duration":139},"status":"failed","statusMessage":"AssertionError: 消息不符：预期任务已暂停，实际操作成功，完整response：{\"success\":true,\"message\":\"操作成功\",\"data\":\"任务已暂停\"}\nassert '操作成功' == '任务已暂停'\n  - 任务已暂停\n  + 操作成功","statusTrace":"case = {'case_id': 'task_008', 'expected_code': 200, 'expected_message': '任务已暂停', 'expected_success': True, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODY5ODAsImV4cCI6MTc1Mzk5NDE4MH0.c_f7E1jpX9oySvM6o0sFlhKSaUzxRsjtBOfLefF2Cp0'\n\n    @allure.feature(\"爬虫任务模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_crawler_tasks(case, auth_token):\n        allure.story(case[\"name\"])\n        allure.title(case[\"case_id\"] + \": \" + case[\"name\"])\n    \n        # 替换任务ID占位符\n        if \"{task_id}\" in case[\"url\"]:\n            # 先创建一个测试任务获取ID\n            from utils.context import context\n            if not context.get(\"task_id\"):\n                create_response = Request.send_request(\n                    \"POST\", \"/crawler/tasks\",\n                    json={\n                        \"processName\": \"测试任务\",\n                        \"asinList\": \"B08XJ8J7SZ\",\n                        \"requiredInfo\": [\"price\"],\n                        \"platform\": \"Amazon\",\n                        \"timeCycle\": \"daily\"\n                    },\n                    token=auth_token\n                )\n                context.set(\"task_id\", create_response.json()[\"data\"][\"id\"])\n            task_id = context.get(\"task_id\")\n            case[\"url\"] = case[\"url\"].replace(\"{task_id}\", str(task_id))\n    \n        # 预处理请求\n        request_data = preprocess_request(case, auth_token)\n    \n        # 发送请求\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            token=auth_token\n        )\n    \n        # 断言\n>       assert_response(\n            response,\n            expected_code=case[\"expected_code\"],\n            expected_success=case.get(\"expected_success\"),\n            expected_message=case.get(\"expected_message\")\n        )\n\ntests\\test_crawler_tasks.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [200]>, expected_code = 200\nexpected_success = True, expected_message = '任务已暂停'\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n        assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response.text}\"\n    \n        if response.status_code != 200:\n            return\n    \n        try:\n            json_data = response.json()\n        except:\n            assert False, f\"响应不是有效的JSON格式: {response.text}\"\n    \n        if expected_success is not None:\n            assert json_data.get(\"success\") == expected_success, \\\n                f\"success字段不符：预期{expected_success}，实际{json_data.get('success')}，完整response：{response.text}\"\n    \n        if expected_message:\n>           assert json_data.get(\"message\") == expected_message, \\\n                f\"消息不符：预期{expected_message}，实际{json_data.get('message')}，完整response：{response.text}\"\nE           AssertionError: 消息不符：预期任务已暂停，实际操作成功，完整response：{\"success\":true,\"message\":\"操作成功\",\"data\":\"任务已暂停\"}\nE           assert '操作成功' == '任务已暂停'\nE             - 任务已暂停\nE             + 操作成功\n\nutils\\test_utils.py:23: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"auth_token","time":{"start":1753986979839,"stop":1753986980055,"duration":216},"status":"passed","steps":[{"name":"发送请求：'POST' '/auth/login'","time":{"start":1753986979839,"stop":1753986980054,"duration":215},"status":"passed","steps":[],"attachments":[{"uid":"f3dc8d8fc055ca3b","name":"请求信息","source":"f3dc8d8fc055ca3b.txt","type":"text/plain","size":41},{"uid":"523be7eef2d5c94c","name":"请求头","source":"523be7eef2d5c94c.txt","type":"text/plain","size":45},{"uid":"1d2853ddeec65595","name":"请求参数","source":"1d2853ddeec65595.json","type":"application/json","size":58},{"uid":"e0341c2876a4c4db","name":"响应信息","source":"e0341c2876a4c4db.txt","type":"text/plain","size":14},{"uid":"5b428f23a17ec2b1","name":"响应体","source":"5b428f23a17ec2b1.json","type":"application/json","size":214}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/login'"},{"name":"headers","value":"None"},{"name":"params","value":"None"},{"name":"json","value":"{'username': 'admin1155', 'password': 'admin1155'}"},{"name":"files","value":"None"},{"name":"token","value":"None"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":1}],"testStage":{"status":"failed","statusMessage":"AssertionError: 消息不符：预期任务已暂停，实际操作成功，完整response：{\"success\":true,\"message\":\"操作成功\",\"data\":\"任务已暂停\"}\nassert '操作成功' == '任务已暂停'\n  - 任务已暂停\n  + 操作成功","statusTrace":"case = {'case_id': 'task_008', 'expected_code': 200, 'expected_message': '任务已暂停', 'expected_success': True, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODY5ODAsImV4cCI6MTc1Mzk5NDE4MH0.c_f7E1jpX9oySvM6o0sFlhKSaUzxRsjtBOfLefF2Cp0'\n\n    @allure.feature(\"爬虫任务模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_crawler_tasks(case, auth_token):\n        allure.story(case[\"name\"])\n        allure.title(case[\"case_id\"] + \": \" + case[\"name\"])\n    \n        # 替换任务ID占位符\n        if \"{task_id}\" in case[\"url\"]:\n            # 先创建一个测试任务获取ID\n            from utils.context import context\n            if not context.get(\"task_id\"):\n                create_response = Request.send_request(\n                    \"POST\", \"/crawler/tasks\",\n                    json={\n                        \"processName\": \"测试任务\",\n                        \"asinList\": \"B08XJ8J7SZ\",\n                        \"requiredInfo\": [\"price\"],\n                        \"platform\": \"Amazon\",\n                        \"timeCycle\": \"daily\"\n                    },\n                    token=auth_token\n                )\n                context.set(\"task_id\", create_response.json()[\"data\"][\"id\"])\n            task_id = context.get(\"task_id\")\n            case[\"url\"] = case[\"url\"].replace(\"{task_id}\", str(task_id))\n    \n        # 预处理请求\n        request_data = preprocess_request(case, auth_token)\n    \n        # 发送请求\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            token=auth_token\n        )\n    \n        # 断言\n>       assert_response(\n            response,\n            expected_code=case[\"expected_code\"],\n            expected_success=case.get(\"expected_success\"),\n            expected_message=case.get(\"expected_message\")\n        )\n\ntests\\test_crawler_tasks.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [200]>, expected_code = 200\nexpected_success = True, expected_message = '任务已暂停'\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n        assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response.text}\"\n    \n        if response.status_code != 200:\n            return\n    \n        try:\n            json_data = response.json()\n        except:\n            assert False, f\"响应不是有效的JSON格式: {response.text}\"\n    \n        if expected_success is not None:\n            assert json_data.get(\"success\") == expected_success, \\\n                f\"success字段不符：预期{expected_success}，实际{json_data.get('success')}，完整response：{response.text}\"\n    \n        if expected_message:\n>           assert json_data.get(\"message\") == expected_message, \\\n                f\"消息不符：预期{expected_message}，实际{json_data.get('message')}，完整response：{response.text}\"\nE           AssertionError: 消息不符：预期任务已暂停，实际操作成功，完整response：{\"success\":true,\"message\":\"操作成功\",\"data\":\"任务已暂停\"}\nE           assert '操作成功' == '任务已暂停'\nE             - 任务已暂停\nE             + 操作成功\n\nutils\\test_utils.py:23: AssertionError","steps":[{"name":"发送请求：'POST' '/crawler/tasks'","time":{"start":1753986980056,"stop":1753986980082,"duration":26},"status":"passed","steps":[],"attachments":[{"uid":"784f160651f5b9be","name":"请求信息","source":"784f160651f5b9be.txt","type":"text/plain","size":44},{"uid":"264c6c4997a2ed36","name":"请求头","source":"264c6c4997a2ed36.txt","type":"text/plain","size":209},{"uid":"37ff21393d47a662","name":"请求参数","source":"37ff21393d47a662.json","type":"application/json","size":136},{"uid":"be4b0d43aada5683","name":"响应信息","source":"be4b0d43aada5683.txt","type":"text/plain","size":14},{"uid":"f33674cc6881d390","name":"响应体","source":"f33674cc6881d390.json","type":"application/json","size":321}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/crawler/tasks'"},{"name":"headers","value":"None"},{"name":"params","value":"None"},{"name":"json","value":"{'processName': '测试任务', 'asinList': 'B08XJ8J7SZ', 'requiredInfo': ['price'], 'platform': 'Amazon', 'timeCycle': 'daily'}"},{"name":"files","value":"None"},{"name":"token","value":"'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODY5ODAsImV4cCI6MTc1Mzk5NDE4MH0.c_f7E1jpX9oySvM6o0sFlhKSaUzxRsjtBOfLefF2Cp0'"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"发送请求：'POST' '/crawler/tasks/243/pause'","time":{"start":1753986980082,"stop":1753986980193,"duration":111},"status":"passed","steps":[],"attachments":[{"uid":"571ee07c2d20ea4","name":"请求信息","source":"571ee07c2d20ea4.txt","type":"text/plain","size":54},{"uid":"978c60af106f6b90","name":"请求头","source":"978c60af106f6b90.txt","type":"text/plain","size":209},{"uid":"efd9328a9debd0c7","name":"请求参数","source":"efd9328a9debd0c7.json","type":"application/json","size":10},{"uid":"89bb9c892e997aa3","name":"响应信息","source":"89bb9c892e997aa3.txt","type":"text/plain","size":14},{"uid":"6edffc6a48cfb041","name":"响应体","source":"6edffc6a48cfb041.json","type":"application/json","size":66}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/crawler/tasks/243/pause'"},{"name":"headers","value":"{}"},{"name":"params","value":"{}"},{"name":"json","value":"{}"},{"name":"files","value":"None"},{"name":"token","value":"'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODY5ODAsImV4cCI6MTc1Mzk5NDE4MH0.c_f7E1jpX9oySvM6o0sFlhKSaUzxRsjtBOfLefF2Cp0'"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"验证响应：状态码200，消息'任务已暂停'","time":{"start":1753986980193,"stop":1753986980194,"duration":1},"status":"failed","statusMessage":"AssertionError: 消息不符：预期任务已暂停，实际操作成功，完整response：{\"success\":true,\"message\":\"操作成功\",\"data\":\"任务已暂停\"}\nassert '操作成功' == '任务已暂停'\n  - 任务已暂停\n  + 操作成功\n","statusTrace":"  File \"D:\\Anaconda3\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"D:\\工作记录\\项目说明\\api_test\\utils\\test_utils.py\", line 23, in assert_response\n    assert json_data.get(\"message\") == expected_message, \\\n","steps":[],"attachments":[],"parameters":[{"name":"response","value":"<Response [200]>"},{"name":"expected_code","value":"200"},{"name":"expected_success","value":"True"},{"name":"expected_message","value":"'任务已暂停'"}],"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[{"uid":"d3369ef516402d3f","name":"log","source":"d3369ef516402d3f.txt","type":"text/plain","size":2038},{"uid":"72624318fa0cc99d","name":"stdout","source":"72624318fa0cc99d.txt","type":"text/plain","size":183},{"uid":"63cdd099799dfbb8","name":"stderr","source":"63cdd099799dfbb8.txt","type":"text/plain","size":1661}],"parameters":[],"attachmentsCount":13,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":3},"afterStages":[],"labels":[{"name":"feature","value":"爬虫任务模块"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_crawler_tasks"},{"name":"host","value":"CYJ"},{"name":"thread","value":"23876-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_crawler_tasks"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"case","value":"{'case_id': 'task_008', 'name': '暂停活跃任务', 'method': 'POST', 'url': '/crawler/tasks/{task_id}/pause', 'headers': {'Authorization': ''}, 'expected_code': 200, 'expected_success': True, 'expected_message': '任务已暂停'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"b3d11cd2d2f5537d.json","parameterValues":["{'case_id': 'task_008', 'name': '暂停活跃任务', 'method': 'POST', 'url': '/crawler/tasks/{task_id}/pause', 'headers': {'Authorization': ''}, 'expected_code': 200, 'expected_success': True, 'expected_message': '任务已暂停'}"]}