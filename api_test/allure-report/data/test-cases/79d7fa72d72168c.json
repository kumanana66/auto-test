{"uid":"79d7fa72d72168c","name":"test_crawler_tasks[case16]","fullName":"tests.test_crawler_tasks#test_crawler_tasks","historyId":"4f6c87790e44008db06604476be00aa8","time":{"start":1753987845360,"stop":1753987845381,"duration":21},"status":"failed","statusMessage":"AssertionError: 消息不符：预期数据分析已启动，实际操作成功，完整response：{\"success\":true,\"message\":\"操作成功\",\"data\":\"数据分析已启动\"}\nassert '操作成功' == '数据分析已启动'\n  - 数据分析已启动\n  + 操作成功","statusTrace":"case = {'case_id': 'task_017', 'expected_code': 200, 'expected_content_type': 'application/vnd.openxmlformats-officedocument.presentationml.presentation', 'headers': {'Authorization': ''}, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODc4NDUsImV4cCI6MTc1Mzk5NTA0NX0.Oz_ogO5ZJX_bimBTbEcs0WV26Ia8eNOnPqdlddL1QgY'\ntask_id = 271\n\n    @allure.feature(\"爬虫任务模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_crawler_tasks(case, auth_token, task_id):\n        allure.story(case[\"name\"])\n        allure.title(f\"{case['case_id']}: {case['name']}\")\n    \n        # 替换任务ID占位符\n        if \"{task_id}\" in case[\"url\"]:\n            case[\"url\"] = case[\"url\"].replace(\"{task_id}\", str(task_id))\n            allure.attach(f\"使用任务ID: {task_id}\", \"测试信息\", allure.attachment_type.TEXT)\n    \n        # --------------------------\n        # 关键修改：处理PPT下载的前置依赖\n        # --------------------------\n        # 1. 若当前是下载PPT的用例（task_017），先启动数据分析并等待完成\n        if case[\"case_id\"] == \"task_017\":\n            allure.attach(\"开始执行数据分析数据分析前置操作\", \"前置依赖\", allure.attachment_type.TEXT)\n    \n            # 1.1 启动数据分析\n            analyze_response = Request.send_request(\n                \"POST\", f\"/crawler/tasks/{task_id}/analyze\",  # 对应task_016的接口\n                token=auth_token\n            )\n>           assert_response(\n                analyze_response,\n                200,\n                expected_success=True,\n                expected_message=\"数据分析已启动\"  # 匹配task_016的预期消息\n            )\n\ntests\\test_crawler_tasks.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [200]>, expected_code = 200\nexpected_success = True, expected_message = '数据分析已启动'\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n        assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response.text}\"\n    \n        if response.status_code != 200:\n            return\n    \n        try:\n            json_data = response.json()\n        except:\n            assert False, f\"响应不是有效的JSON格式: {response.text}\"\n    \n        if expected_success is not None:\n            assert json_data.get(\"success\") == expected_success, \\\n                f\"success字段不符：预期{expected_success}，实际{json_data.get('success')}，完整response：{response.text}\"\n    \n        if expected_message:\n>           assert json_data.get(\"message\") == expected_message, \\\n                f\"消息不符：预期{expected_message}，实际{json_data.get('message')}，完整response：{response.text}\"\nE           AssertionError: 消息不符：预期数据分析已启动，实际操作成功，完整response：{\"success\":true,\"message\":\"操作成功\",\"data\":\"数据分析已启动\"}\nE           assert '操作成功' == '数据分析已启动'\nE             - 数据分析已启动\nE             + 操作成功\n\nutils\\test_utils.py:23: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"auth_token","time":{"start":1753987845157,"stop":1753987845338,"duration":181},"status":"passed","steps":[{"name":"发送请求：'POST' '/auth/login'","time":{"start":1753987845157,"stop":1753987845338,"duration":181},"status":"passed","steps":[],"attachments":[{"uid":"573585a853193c43","name":"请求信息","source":"573585a853193c43.txt","type":"text/plain","size":41},{"uid":"1c9908bbd2ee9e77","name":"请求头","source":"1c9908bbd2ee9e77.txt","type":"text/plain","size":45},{"uid":"9e1cdb678a005858","name":"请求参数","source":"9e1cdb678a005858.json","type":"application/json","size":58},{"uid":"99efb253ff696502","name":"响应信息","source":"99efb253ff696502.txt","type":"text/plain","size":14},{"uid":"94c087d0ae3811a5","name":"响应体","source":"94c087d0ae3811a5.json","type":"application/json","size":214}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/login'"},{"name":"headers","value":"None"},{"name":"params","value":"None"},{"name":"json","value":"{'username': 'admin1155', 'password': 'admin1155'}"},{"name":"files","value":"None"},{"name":"token","value":"None"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":1},{"name":"task_id","time":{"start":1753987845338,"stop":1753987845359,"duration":21},"status":"passed","steps":[{"name":"发送请求：'POST' '/crawler/tasks'","time":{"start":1753987845338,"stop":1753987845359,"duration":21},"status":"passed","steps":[],"attachments":[{"uid":"1db967a2deabe700","name":"请求信息","source":"1db967a2deabe700.txt","type":"text/plain","size":44},{"uid":"b73991c866b8e859","name":"请求头","source":"b73991c866b8e859.txt","type":"text/plain","size":209},{"uid":"7cf640082f211a6f","name":"请求参数","source":"7cf640082f211a6f.json","type":"application/json","size":141},{"uid":"811b89e62c674c5d","name":"响应信息","source":"811b89e62c674c5d.txt","type":"text/plain","size":14},{"uid":"2e2fd3fab5c4138d","name":"响应体","source":"2e2fd3fab5c4138d.json","type":"application/json","size":326}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/crawler/tasks'"},{"name":"headers","value":"None"},{"name":"params","value":"None"},{"name":"json","value":"{'processName': '测试任务_None', 'asinList': 'B08XJ8J7SZ', 'requiredInfo': ['price'], 'platform': 'Amazon', 'timeCycle': 'daily'}"},{"name":"files","value":"None"},{"name":"token","value":"'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODc4NDUsImV4cCI6MTc1Mzk5NTA0NX0.Oz_ogO5ZJX_bimBTbEcs0WV26Ia8eNOnPqdlddL1QgY'"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"验证响应：状态码200，消息None","time":{"start":1753987845359,"stop":1753987845359,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"response","value":"<Response [200]>"},{"name":"expected_code","value":"200"},{"name":"expected_success","value":"True"},{"name":"expected_message","value":"None"}],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":2}],"testStage":{"status":"failed","statusMessage":"AssertionError: 消息不符：预期数据分析已启动，实际操作成功，完整response：{\"success\":true,\"message\":\"操作成功\",\"data\":\"数据分析已启动\"}\nassert '操作成功' == '数据分析已启动'\n  - 数据分析已启动\n  + 操作成功","statusTrace":"case = {'case_id': 'task_017', 'expected_code': 200, 'expected_content_type': 'application/vnd.openxmlformats-officedocument.presentationml.presentation', 'headers': {'Authorization': ''}, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODc4NDUsImV4cCI6MTc1Mzk5NTA0NX0.Oz_ogO5ZJX_bimBTbEcs0WV26Ia8eNOnPqdlddL1QgY'\ntask_id = 271\n\n    @allure.feature(\"爬虫任务模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_crawler_tasks(case, auth_token, task_id):\n        allure.story(case[\"name\"])\n        allure.title(f\"{case['case_id']}: {case['name']}\")\n    \n        # 替换任务ID占位符\n        if \"{task_id}\" in case[\"url\"]:\n            case[\"url\"] = case[\"url\"].replace(\"{task_id}\", str(task_id))\n            allure.attach(f\"使用任务ID: {task_id}\", \"测试信息\", allure.attachment_type.TEXT)\n    \n        # --------------------------\n        # 关键修改：处理PPT下载的前置依赖\n        # --------------------------\n        # 1. 若当前是下载PPT的用例（task_017），先启动数据分析并等待完成\n        if case[\"case_id\"] == \"task_017\":\n            allure.attach(\"开始执行数据分析数据分析前置操作\", \"前置依赖\", allure.attachment_type.TEXT)\n    \n            # 1.1 启动数据分析\n            analyze_response = Request.send_request(\n                \"POST\", f\"/crawler/tasks/{task_id}/analyze\",  # 对应task_016的接口\n                token=auth_token\n            )\n>           assert_response(\n                analyze_response,\n                200,\n                expected_success=True,\n                expected_message=\"数据分析已启动\"  # 匹配task_016的预期消息\n            )\n\ntests\\test_crawler_tasks.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [200]>, expected_code = 200\nexpected_success = True, expected_message = '数据分析已启动'\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n        assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response.text}\"\n    \n        if response.status_code != 200:\n            return\n    \n        try:\n            json_data = response.json()\n        except:\n            assert False, f\"响应不是有效的JSON格式: {response.text}\"\n    \n        if expected_success is not None:\n            assert json_data.get(\"success\") == expected_success, \\\n                f\"success字段不符：预期{expected_success}，实际{json_data.get('success')}，完整response：{response.text}\"\n    \n        if expected_message:\n>           assert json_data.get(\"message\") == expected_message, \\\n                f\"消息不符：预期{expected_message}，实际{json_data.get('message')}，完整response：{response.text}\"\nE           AssertionError: 消息不符：预期数据分析已启动，实际操作成功，完整response：{\"success\":true,\"message\":\"操作成功\",\"data\":\"数据分析已启动\"}\nE           assert '操作成功' == '数据分析已启动'\nE             - 数据分析已启动\nE             + 操作成功\n\nutils\\test_utils.py:23: AssertionError","steps":[{"name":"发送请求：'POST' '/crawler/tasks/271/analyze'","time":{"start":1753987845362,"stop":1753987845378,"duration":16},"status":"passed","steps":[],"attachments":[{"uid":"2bfedf69f1782e13","name":"请求信息","source":"2bfedf69f1782e13.txt","type":"text/plain","size":56},{"uid":"75c57a92eb956bd4","name":"请求头","source":"75c57a92eb956bd4.txt","type":"text/plain","size":209},{"uid":"78c61a2f5550c67f","name":"请求参数","source":"78c61a2f5550c67f.json","type":"application/json","size":12},{"uid":"8cade50eecb94ede","name":"响应信息","source":"8cade50eecb94ede.txt","type":"text/plain","size":14},{"uid":"6693ec950f0c492b","name":"响应体","source":"6693ec950f0c492b.json","type":"application/json","size":72}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/crawler/tasks/271/analyze'"},{"name":"headers","value":"None"},{"name":"params","value":"None"},{"name":"json","value":"None"},{"name":"files","value":"None"},{"name":"token","value":"'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODc4NDUsImV4cCI6MTc1Mzk5NTA0NX0.Oz_ogO5ZJX_bimBTbEcs0WV26Ia8eNOnPqdlddL1QgY'"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"验证响应：状态码200，消息'数据分析已启动'","time":{"start":1753987845378,"stop":1753987845379,"duration":1},"status":"failed","statusMessage":"AssertionError: 消息不符：预期数据分析已启动，实际操作成功，完整response：{\"success\":true,\"message\":\"操作成功\",\"data\":\"数据分析已启动\"}\nassert '操作成功' == '数据分析已启动'\n  - 数据分析已启动\n  + 操作成功\n","statusTrace":"  File \"D:\\Anaconda3\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"D:\\工作记录\\项目说明\\api_test\\utils\\test_utils.py\", line 23, in assert_response\n    assert json_data.get(\"message\") == expected_message, \\\n","steps":[],"attachments":[],"parameters":[{"name":"response","value":"<Response [200]>"},{"name":"expected_code","value":"200"},{"name":"expected_success","value":"True"},{"name":"expected_message","value":"'数据分析已启动'"}],"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[{"uid":"d47cfab1e7cfbde0","name":"测试信息","source":"d47cfab1e7cfbde0.txt","type":"text/plain","size":19},{"uid":"727d019785886826","name":"前置依赖","source":"727d019785886826.txt","type":"text/plain","size":48},{"uid":"3eea92a122178f9","name":"log","source":"3eea92a122178f9.txt","type":"text/plain","size":2680},{"uid":"5bb9f19d80e40187","name":"stdout","source":"5bb9f19d80e40187.txt","type":"text/plain","size":183},{"uid":"f572458cc01fd030","name":"stderr","source":"f572458cc01fd030.txt","type":"text/plain","size":2168}],"parameters":[],"attachmentsCount":10,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":2},"afterStages":[{"name":"task_id::0","time":{"start":1753987845401,"stop":1753987845430,"duration":29},"status":"passed","steps":[{"name":"发送请求：'DELETE' '/crawler/tasks/271'","time":{"start":1753987845401,"stop":1753987845429,"duration":28},"status":"passed","steps":[],"attachments":[{"uid":"97f0412e308f5567","name":"请求信息","source":"97f0412e308f5567.txt","type":"text/plain","size":48},{"uid":"ebff5b072992ea62","name":"请求头","source":"ebff5b072992ea62.txt","type":"text/plain","size":209},{"uid":"3877a209b005918e","name":"请求参数","source":"3877a209b005918e.json","type":"application/json","size":12},{"uid":"4fd73fa85412556e","name":"响应信息","source":"4fd73fa85412556e.txt","type":"text/plain","size":14},{"uid":"9430a7abeda4d9a6","name":"响应体","source":"9430a7abeda4d9a6.json","type":"application/json","size":69}],"parameters":[{"name":"method","value":"'DELETE'"},{"name":"endpoint","value":"'/crawler/tasks/271'"},{"name":"headers","value":"None"},{"name":"params","value":"None"},{"name":"json","value":"None"},{"name":"files","value":"None"},{"name":"token","value":"'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODc4NDUsImV4cCI6MTc1Mzk5NTA0NX0.Oz_ogO5ZJX_bimBTbEcs0WV26Ia8eNOnPqdlddL1QgY'"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":1}],"labels":[{"name":"feature","value":"爬虫任务模块"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_crawler_tasks"},{"name":"host","value":"CYJ"},{"name":"thread","value":"22580-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_crawler_tasks"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"case","value":"{'case_id': 'task_017', 'name': '下载分析后的PPT', 'method': 'GET', 'url': '/crawler/tasks/{task_id}/analyze/ppt', 'headers': {'Authorization': ''}, 'expected_code': 200, 'expected_content_type': 'application/vnd.openxmlformats-officedocument.presentationml.presentation'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"79d7fa72d72168c.json","parameterValues":["{'case_id': 'task_017', 'name': '下载分析后的PPT', 'method': 'GET', 'url': '/crawler/tasks/{task_id}/analyze/ppt', 'headers': {'Authorization': ''}, 'expected_code': 200, 'expected_content_type': 'application/vnd.openxmlformats-officedocument.presentationml.presentation'}"]}