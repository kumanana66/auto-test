{"uid":"1486a2acf29d643b","name":"test_crawler_tasks[case3]","fullName":"tests.test_crawler_tasks#test_crawler_tasks","historyId":"545cc0deaa26c5eebe66b802f8bd69e3","time":{"start":1753991281898,"stop":1753991281915,"duration":17},"status":"failed","statusMessage":"AssertionError: 状态码不符：预期403，实际200，完整response：{\"success\":true,\"message\":\"任务创建成功\",\"data\":{\"id\":499,\"processName\":\"亚马逊监控\",\"asinList\":\"B08XJ8J7SZ,B08LGD78Q5\",\"requiredInfo\":null,\"platform\":\"Amazon\",\"timeCycle\":\"daily\",\"createTime\":\"2025-08-01T03:48:01.9039454\",\"updateTime\":\"2025-08-01T03:48:01.9039454\",\"status\":\"ACTIVE\",\"userId\":4,\"username\":\"admin1155\"}}\nassert 200 == 403\n +  where 200 = <Response [200]>.status_code","statusTrace":"case = {'case_id': 'task_004', 'expected_code': 403, 'expected_message': '请至少选择一项所需信息', 'expected_success': False, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5OTEyODEsImV4cCI6MTc1Mzk5ODQ4MX0.gy-nJ2StSS1BvRbaDohOGs6df9CJ3bpyP9lstDnYntY'\ntask_id = 498\n\n    @allure.feature(\"爬虫任务模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_crawler_tasks(case, auth_token, task_id):\n        allure.story(case[\"name\"])\n        allure.title(f\"{case['case_id']}: {case['name']}\")\n    \n        # 替换任务ID占位符\n        if \"{task_id}\" in case[\"url\"]:\n            case[\"url\"] = case[\"url\"].replace(\"{task_id}\", str(task_id))\n            allure.attach(f\"使用任务ID: {task_id}\", \"测试信息\", allure.attachment_type.TEXT)\n    \n        # --------------------------\n        # 关键修改：处理PPT下载的前置依赖\n        # --------------------------\n        # 1. 若当前是下载PPT的用例（task_017），先启动数据分析并等待完成\n        if case[\"case_id\"] == \"task_017\":\n            allure.attach(\"开始执行数据分析数据分析前置操作\", \"前置依赖\", allure.attachment_type.TEXT)\n    \n            # 1.1 启动数据分析\n            analyze_response = Request.send_request(\n                \"POST\", f\"/crawler/tasks/{task_id}/analyze\",  # 对应task_016的接口\n                token=auth_token\n            )\n            assert_response(\n                analyze_response,\n                200,\n                expected_success=True,\n                expected_message=\"操作成功\"  # 匹配task_016的预期消息\n            )\n            allure.attach(\"数据分析已启动\", \"前置操作结果\", allure.attachment_type.TEXT)\n    \n            # 1.2 轮询等待分析完成（复用同test_download_analyzed_ppt的逻辑）\n            max_wait_seconds = 180\n            check_interval = 5\n            elapsed_seconds = 0\n            status = \"PROCESSING\"\n    \n            while elapsed_seconds < max_wait_seconds and status == \"PROCESSING\":\n                # 查询当前状态\n                status_response = Request.send_request(\n                    \"GET\", f\"/crawler/tasks/{task_id}/analyze/status\",\n                    token=auth_token\n                )\n                assert_response(status_response, 200)\n                status = status_response.json()[\"data\"]\n                allure.attach(f\"当前分析状态: {status} (等待{elapsed_seconds}秒)\", \"状态轮询\", allure.attachment_type.TEXT)\n    \n                if status == \"PROCESSING\":\n                    time.sleep(check_interval)\n                    elapsed_seconds += check_interval\n    \n            # 1.3 校验分析状态（必须完成才能继续下载）\n            assert status in [\"COMPLETED\", \"FAILED\"], f\"数据分析超时，最终状态：{status}\"\n            if status == \"FAILED\":\n                pytest.fail(\"数据分析失败，无法下载PPT\")  # 分析失败则标记用例失败\n            allure.attach(\"数据分析已完成\", \"前置操作结果\", allure.attachment_type.TEXT)\n    \n        # 预处理请求\n        request_data = preprocess_request(case, auth_token)\n        if \"headers\" in request_data and \"Authorization\" in request_data[\"headers\"]:\n            del request_data[\"headers\"][\"Authorization\"]\n    \n        # 发送请求（对task_017而言，此时已确保分析完成）\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            token=auth_token\n        )\n    \n        # 断言（增加PPT格式校验）\n        try:\n            assert_response(\n                response,\n                expected_code=case[\"expected_code\"],\n                expected_success=case.get(\"expected_success\"),\n                expected_message=case.get(\"expected_message\"),\n                is_file=bool(case.get(\"expected_content_type\"))\n            )\n            # 额外校验PPT文件类型（对应case中的expected_content_type）\n            if case.get(\"expected_content_type\"):\n                assert case[\"expected_content_type\"] in response.headers[\"Content-Type\"], \\\n                    f\"文件类型错误，预期: {case['expected_content_type']}, 实际: {response.headers['Content-Type']}\"\n        except AssertionError as e:\n            allure.attach(f\"响应内容: {response.text}\", \"断言失败详情\", allure.attachment_type.TEXT)\n>           raise e\n\ntests\\test_crawler_tasks.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\test_crawler_tasks.py:108: in test_crawler_tasks\n    assert_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [200]>, expected_code = 403\nexpected_success = False, expected_message = '请至少选择一项所需信息'\nis_file = False\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None, is_file=False):\n        \"\"\"\n        新增is_file参数：标记是否为文件下载接口（无需JSON解析）\n        \"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response.text}\"\nE       AssertionError: 状态码不符：预期403，实际200，完整response：{\"success\":true,\"message\":\"任务创建成功\",\"data\":{\"id\":499,\"processName\":\"亚马逊监控\",\"asinList\":\"B08XJ8J7SZ,B08LGD78Q5\",\"requiredInfo\":null,\"platform\":\"Amazon\",\"timeCycle\":\"daily\",\"createTime\":\"2025-08-01T03:48:01.9039454\",\"updateTime\":\"2025-08-01T03:48:01.9039454\",\"status\":\"ACTIVE\",\"userId\":4,\"username\":\"admin1155\"}}\nE       assert 200 == 403\nE        +  where 200 = <Response [200]>.status_code\n\nutils\\test_utils.py:9: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":13,"retriesStatusChange":false,"beforeStages":[{"name":"auth_token","time":{"start":1753991281746,"stop":1753991281882,"duration":136},"status":"passed","steps":[{"name":"发送请求：'POST' '/auth/login'","time":{"start":1753991281746,"stop":1753991281882,"duration":136},"status":"passed","steps":[],"attachments":[{"uid":"fc6f9592b1a883c5","name":"请求信息","source":"fc6f9592b1a883c5.txt","type":"text/plain","size":41},{"uid":"ad04ae9c9655a6ad","name":"请求头","source":"ad04ae9c9655a6ad.txt","type":"text/plain","size":45},{"uid":"b16fe28412951173","name":"请求参数","source":"b16fe28412951173.json","type":"application/json","size":58},{"uid":"a8ab7435a11ef3f5","name":"响应信息","source":"a8ab7435a11ef3f5.txt","type":"text/plain","size":14},{"uid":"3282ae8a4a6fb6c0","name":"响应体","source":"3282ae8a4a6fb6c0.json","type":"application/json","size":214}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/login'"},{"name":"headers","value":"None"},{"name":"params","value":"None"},{"name":"json","value":"{'username': 'admin1155', 'password': 'admin1155'}"},{"name":"files","value":"None"},{"name":"token","value":"None"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":1},{"name":"task_id","time":{"start":1753991281882,"stop":1753991281898,"duration":16},"status":"passed","steps":[{"name":"发送请求：'POST' '/crawler/tasks'","time":{"start":1753991281882,"stop":1753991281897,"duration":15},"status":"passed","steps":[],"attachments":[{"uid":"1b82c98bb551cc05","name":"请求信息","source":"1b82c98bb551cc05.txt","type":"text/plain","size":44},{"uid":"705c7d50030bd25e","name":"请求头","source":"705c7d50030bd25e.txt","type":"text/plain","size":209},{"uid":"42cce69a81fc1981","name":"请求参数","source":"42cce69a81fc1981.json","type":"application/json","size":141},{"uid":"73a3679ae53bfbda","name":"响应信息","source":"73a3679ae53bfbda.txt","type":"text/plain","size":14},{"uid":"b81fe1d48257943a","name":"响应体","source":"b81fe1d48257943a.json","type":"application/json","size":326}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/crawler/tasks'"},{"name":"headers","value":"None"},{"name":"params","value":"None"},{"name":"json","value":"{'processName': '测试任务_None', 'asinList': 'B08XJ8J7SZ', 'requiredInfo': ['price'], 'platform': 'Amazon', 'timeCycle': 'daily'}"},{"name":"files","value":"None"},{"name":"token","value":"'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5OTEyODEsImV4cCI6MTc1Mzk5ODQ4MX0.gy-nJ2StSS1BvRbaDohOGs6df9CJ3bpyP9lstDnYntY'"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"验证响应：状态码200，消息None","time":{"start":1753991281897,"stop":1753991281897,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"response","value":"<Response [200]>"},{"name":"expected_code","value":"200"},{"name":"expected_success","value":"True"},{"name":"expected_message","value":"None"},{"name":"is_file","value":"False"}],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":2}],"testStage":{"status":"failed","statusMessage":"AssertionError: 状态码不符：预期403，实际200，完整response：{\"success\":true,\"message\":\"任务创建成功\",\"data\":{\"id\":499,\"processName\":\"亚马逊监控\",\"asinList\":\"B08XJ8J7SZ,B08LGD78Q5\",\"requiredInfo\":null,\"platform\":\"Amazon\",\"timeCycle\":\"daily\",\"createTime\":\"2025-08-01T03:48:01.9039454\",\"updateTime\":\"2025-08-01T03:48:01.9039454\",\"status\":\"ACTIVE\",\"userId\":4,\"username\":\"admin1155\"}}\nassert 200 == 403\n +  where 200 = <Response [200]>.status_code","statusTrace":"case = {'case_id': 'task_004', 'expected_code': 403, 'expected_message': '请至少选择一项所需信息', 'expected_success': False, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5OTEyODEsImV4cCI6MTc1Mzk5ODQ4MX0.gy-nJ2StSS1BvRbaDohOGs6df9CJ3bpyP9lstDnYntY'\ntask_id = 498\n\n    @allure.feature(\"爬虫任务模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_crawler_tasks(case, auth_token, task_id):\n        allure.story(case[\"name\"])\n        allure.title(f\"{case['case_id']}: {case['name']}\")\n    \n        # 替换任务ID占位符\n        if \"{task_id}\" in case[\"url\"]:\n            case[\"url\"] = case[\"url\"].replace(\"{task_id}\", str(task_id))\n            allure.attach(f\"使用任务ID: {task_id}\", \"测试信息\", allure.attachment_type.TEXT)\n    \n        # --------------------------\n        # 关键修改：处理PPT下载的前置依赖\n        # --------------------------\n        # 1. 若当前是下载PPT的用例（task_017），先启动数据分析并等待完成\n        if case[\"case_id\"] == \"task_017\":\n            allure.attach(\"开始执行数据分析数据分析前置操作\", \"前置依赖\", allure.attachment_type.TEXT)\n    \n            # 1.1 启动数据分析\n            analyze_response = Request.send_request(\n                \"POST\", f\"/crawler/tasks/{task_id}/analyze\",  # 对应task_016的接口\n                token=auth_token\n            )\n            assert_response(\n                analyze_response,\n                200,\n                expected_success=True,\n                expected_message=\"操作成功\"  # 匹配task_016的预期消息\n            )\n            allure.attach(\"数据分析已启动\", \"前置操作结果\", allure.attachment_type.TEXT)\n    \n            # 1.2 轮询等待分析完成（复用同test_download_analyzed_ppt的逻辑）\n            max_wait_seconds = 180\n            check_interval = 5\n            elapsed_seconds = 0\n            status = \"PROCESSING\"\n    \n            while elapsed_seconds < max_wait_seconds and status == \"PROCESSING\":\n                # 查询当前状态\n                status_response = Request.send_request(\n                    \"GET\", f\"/crawler/tasks/{task_id}/analyze/status\",\n                    token=auth_token\n                )\n                assert_response(status_response, 200)\n                status = status_response.json()[\"data\"]\n                allure.attach(f\"当前分析状态: {status} (等待{elapsed_seconds}秒)\", \"状态轮询\", allure.attachment_type.TEXT)\n    \n                if status == \"PROCESSING\":\n                    time.sleep(check_interval)\n                    elapsed_seconds += check_interval\n    \n            # 1.3 校验分析状态（必须完成才能继续下载）\n            assert status in [\"COMPLETED\", \"FAILED\"], f\"数据分析超时，最终状态：{status}\"\n            if status == \"FAILED\":\n                pytest.fail(\"数据分析失败，无法下载PPT\")  # 分析失败则标记用例失败\n            allure.attach(\"数据分析已完成\", \"前置操作结果\", allure.attachment_type.TEXT)\n    \n        # 预处理请求\n        request_data = preprocess_request(case, auth_token)\n        if \"headers\" in request_data and \"Authorization\" in request_data[\"headers\"]:\n            del request_data[\"headers\"][\"Authorization\"]\n    \n        # 发送请求（对task_017而言，此时已确保分析完成）\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            token=auth_token\n        )\n    \n        # 断言（增加PPT格式校验）\n        try:\n            assert_response(\n                response,\n                expected_code=case[\"expected_code\"],\n                expected_success=case.get(\"expected_success\"),\n                expected_message=case.get(\"expected_message\"),\n                is_file=bool(case.get(\"expected_content_type\"))\n            )\n            # 额外校验PPT文件类型（对应case中的expected_content_type）\n            if case.get(\"expected_content_type\"):\n                assert case[\"expected_content_type\"] in response.headers[\"Content-Type\"], \\\n                    f\"文件类型错误，预期: {case['expected_content_type']}, 实际: {response.headers['Content-Type']}\"\n        except AssertionError as e:\n            allure.attach(f\"响应内容: {response.text}\", \"断言失败详情\", allure.attachment_type.TEXT)\n>           raise e\n\ntests\\test_crawler_tasks.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\test_crawler_tasks.py:108: in test_crawler_tasks\n    assert_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [200]>, expected_code = 403\nexpected_success = False, expected_message = '请至少选择一项所需信息'\nis_file = False\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None, is_file=False):\n        \"\"\"\n        新增is_file参数：标记是否为文件下载接口（无需JSON解析）\n        \"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response.text}\"\nE       AssertionError: 状态码不符：预期403，实际200，完整response：{\"success\":true,\"message\":\"任务创建成功\",\"data\":{\"id\":499,\"processName\":\"亚马逊监控\",\"asinList\":\"B08XJ8J7SZ,B08LGD78Q5\",\"requiredInfo\":null,\"platform\":\"Amazon\",\"timeCycle\":\"daily\",\"createTime\":\"2025-08-01T03:48:01.9039454\",\"updateTime\":\"2025-08-01T03:48:01.9039454\",\"status\":\"ACTIVE\",\"userId\":4,\"username\":\"admin1155\"}}\nE       assert 200 == 403\nE        +  where 200 = <Response [200]>.status_code\n\nutils\\test_utils.py:9: AssertionError","steps":[{"name":"发送请求：'POST' '/crawler/tasks'","time":{"start":1753991281898,"stop":1753991281914,"duration":16},"status":"passed","steps":[],"attachments":[{"uid":"5c2361e1f1fb359a","name":"请求信息","source":"5c2361e1f1fb359a.txt","type":"text/plain","size":44},{"uid":"c92eddd73ddd4ae6","name":"请求头","source":"c92eddd73ddd4ae6.txt","type":"text/plain","size":209},{"uid":"6f58ba94864b73d6","name":"请求参数","source":"6f58ba94864b73d6.json","type":"application/json","size":123},{"uid":"d429e724b540f687","name":"响应信息","source":"d429e724b540f687.txt","type":"text/plain","size":14},{"uid":"191fcb92201f3c8e","name":"响应体","source":"191fcb92201f3c8e.json","type":"application/json","size":330}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/crawler/tasks'"},{"name":"headers","value":"{}"},{"name":"params","value":"{}"},{"name":"json","value":"{'processName': '亚马逊监控', 'asinList': 'B08XJ8J7SZ,B08LGD78Q5', 'platform': 'Amazon', 'timeCycle': 'daily'}"},{"name":"files","value":"None"},{"name":"token","value":"'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5OTEyODEsImV4cCI6MTc1Mzk5ODQ4MX0.gy-nJ2StSS1BvRbaDohOGs6df9CJ3bpyP9lstDnYntY'"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"验证响应：状态码403，消息'请至少选择一项所需信息'","time":{"start":1753991281914,"stop":1753991281914,"duration":0},"status":"failed","statusMessage":"AssertionError: 状态码不符：预期403，实际200，完整response：{\"success\":true,\"message\":\"任务创建成功\",\"data\":{\"id\":499,\"processName\":\"亚马逊监控\",\"asinList\":\"B08XJ8J7SZ,B08LGD78Q5\",\"requiredInfo\":null,\"platform\":\"Amazon\",\"timeCycle\":\"daily\",\"createTime\":\"2025-08-01T03:48:01.9039454\",\"updateTime\":\"2025-08-01T03:48:01.9039454\",\"status\":\"ACTIVE\",\"userId\":4,\"username\":\"admin1155\"}}\nassert 200 == 403\n +  where 200 = <Response [200]>.status_code\n","statusTrace":"  File \"D:\\Anaconda3\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"D:\\工作记录\\项目说明\\api_test\\utils\\test_utils.py\", line 9, in assert_response\n    assert response.status_code == expected_code, \\\n","steps":[],"attachments":[],"parameters":[{"name":"response","value":"<Response [200]>"},{"name":"expected_code","value":"403"},{"name":"expected_success","value":"False"},{"name":"expected_message","value":"'请至少选择一项所需信息'"},{"name":"is_file","value":"False"}],"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[{"uid":"953af0e208f98b79","name":"断言失败详情","source":"953af0e208f98b79.txt","type":"text/plain","size":344},{"uid":"818ff0fcb350419e","name":"log","source":"818ff0fcb350419e.txt","type":"text/plain","size":2926},{"uid":"93aad28b86f01db2","name":"stdout","source":"93aad28b86f01db2.txt","type":"text/plain","size":183},{"uid":"989a46bc84a41d98","name":"stderr","source":"989a46bc84a41d98.txt","type":"text/plain","size":2414}],"parameters":[],"attachmentsCount":9,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":2},"afterStages":[{"name":"task_id::0","time":{"start":1753991281927,"stop":1753991281945,"duration":18},"status":"passed","steps":[{"name":"发送请求：'DELETE' '/crawler/tasks/498'","time":{"start":1753991281927,"stop":1753991281944,"duration":17},"status":"passed","steps":[],"attachments":[{"uid":"89b11f62ffed8927","name":"请求信息","source":"89b11f62ffed8927.txt","type":"text/plain","size":48},{"uid":"78377570c9ff60c0","name":"请求头","source":"78377570c9ff60c0.txt","type":"text/plain","size":209},{"uid":"c708ac7214ec1ced","name":"请求参数","source":"c708ac7214ec1ced.json","type":"application/json","size":12},{"uid":"c73a2f8d05942f2d","name":"响应信息","source":"c73a2f8d05942f2d.txt","type":"text/plain","size":14},{"uid":"a134626d819975dd","name":"响应体","source":"a134626d819975dd.json","type":"application/json","size":69}],"parameters":[{"name":"method","value":"'DELETE'"},{"name":"endpoint","value":"'/crawler/tasks/498'"},{"name":"headers","value":"None"},{"name":"params","value":"None"},{"name":"json","value":"None"},{"name":"files","value":"None"},{"name":"token","value":"'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5OTEyODEsImV4cCI6MTc1Mzk5ODQ4MX0.gy-nJ2StSS1BvRbaDohOGs6df9CJ3bpyP9lstDnYntY'"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":1}],"labels":[{"name":"feature","value":"爬虫任务模块"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_crawler_tasks"},{"name":"host","value":"CYJ"},{"name":"thread","value":"28060-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_crawler_tasks"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"case","value":"{'case_id': 'task_004', 'name': '所需信息未选择', 'method': 'POST', 'url': '/crawler/tasks', 'headers': {'Authorization': ''}, 'json': {'processName': '亚马逊监控', 'asinList': 'B08XJ8J7SZ,B08LGD78Q5', 'platform': 'Amazon', 'timeCycle': 'daily'}, 'expected_code': 403, 'expected_success': False, 'expected_message': '请至少选择一项所需信息'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"7f6a1251f3399909","status":"failed","statusDetails":"AssertionError: 状态码不符：预期403，实际200，完整response：{\"success\":true,\"message\":\"任务创建成功\",\"data\":{\"id\":477,\"processName\":\"亚马逊监控\",\"asinList\":\"B08XJ8J7SZ,B08LGD78Q5\",\"requiredInfo\":null,\"platform\":\"Amazon\",\"timeCycle\":\"daily\",\"createTime\":\"2025-08-01T03:43:04.0437025\",\"updateTime\":\"2025-08-01T03:43:04.0437025\",\"status\":\"ACTIVE\",\"userId\":4,\"username\":\"admin1155\"}}\nassert 200 == 403\n +  where 200 = <Response [200]>.status_code","time":{"start":1753990984037,"stop":1753990984057,"duration":20}},{"uid":"ee906bfbafb80f62","status":"failed","statusDetails":"AssertionError: 状态码不符：预期403，实际200，完整response：{\"success\":true,\"message\":\"任务创建成功\",\"data\":{\"id\":455,\"processName\":\"亚马逊监控\",\"asinList\":\"B08XJ8J7SZ,B08LGD78Q5\",\"requiredInfo\":null,\"platform\":\"Amazon\",\"timeCycle\":\"daily\",\"createTime\":\"2025-08-01T03:36:37.4957841\",\"updateTime\":\"2025-08-01T03:36:37.4957841\",\"status\":\"ACTIVE\",\"userId\":4,\"username\":\"admin1155\"}}\nassert 200 == 403\n +  where 200 = <Response [200]>.status_code","time":{"start":1753990597477,"stop":1753990597511,"duration":34}},{"uid":"94c71bed1ab5955d","status":"failed","statusDetails":"AssertionError: 状态码不符：预期403，实际200，完整response：{\"success\":true,\"message\":\"任务创建成功\",\"data\":{\"id\":433,\"processName\":\"亚马逊监控\",\"asinList\":\"B08XJ8J7SZ,B08LGD78Q5\",\"requiredInfo\":null,\"platform\":\"Amazon\",\"timeCycle\":\"daily\",\"createTime\":\"2025-08-01T03:36:11.6427344\",\"updateTime\":\"2025-08-01T03:36:11.6427344\",\"status\":\"ACTIVE\",\"userId\":4,\"username\":\"admin1155\"}}\nassert 200 == 403\n +  where 200 = <Response [200]>.status_code","time":{"start":1753990571637,"stop":1753990571655,"duration":18}},{"uid":"fc88a89cf6be86c2","status":"failed","statusDetails":"AssertionError: 状态码不符：预期403，实际200，完整response：{\"success\":true,\"message\":\"任务创建成功\",\"data\":{\"id\":411,\"processName\":\"亚马逊监控\",\"asinList\":\"B08XJ8J7SZ,B08LGD78Q5\",\"requiredInfo\":null,\"platform\":\"Amazon\",\"timeCycle\":\"daily\",\"createTime\":\"2025-08-01T03:35:26.6881478\",\"updateTime\":\"2025-08-01T03:35:26.6881478\",\"status\":\"ACTIVE\",\"userId\":4,\"username\":\"admin1155\"}}\nassert 200 == 403\n +  where 200 = <Response [200]>.status_code","time":{"start":1753990526672,"stop":1753990526703,"duration":31}},{"uid":"95c83f3a3908bd74","status":"failed","statusDetails":"AssertionError: 状态码不符：预期403，实际200，完整response：{\"success\":true,\"message\":\"任务创建成功\",\"data\":{\"id\":389,\"processName\":\"亚马逊监控\",\"asinList\":\"B08XJ8J7SZ,B08LGD78Q5\",\"requiredInfo\":null,\"platform\":\"Amazon\",\"timeCycle\":\"daily\",\"createTime\":\"2025-08-01T03:31:36.4575227\",\"updateTime\":\"2025-08-01T03:31:36.4575227\",\"status\":\"ACTIVE\",\"userId\":4,\"username\":\"admin1155\"}}\nassert 200 == 403\n +  where 200 = <Response [200]>.status_code","time":{"start":1753990296451,"stop":1753990296470,"duration":19}},{"uid":"8e5415514995ed20","status":"failed","statusDetails":"AssertionError: 状态码不符：预期403，实际200，完整response：{\"success\":true,\"message\":\"任务创建成功\",\"data\":{\"id\":367,\"processName\":\"亚马逊监控\",\"asinList\":\"B08XJ8J7SZ,B08LGD78Q5\",\"requiredInfo\":null,\"platform\":\"Amazon\",\"timeCycle\":\"daily\",\"createTime\":\"2025-08-01T03:29:06.5579064\",\"updateTime\":\"2025-08-01T03:29:06.5579064\",\"status\":\"ACTIVE\",\"userId\":4,\"username\":\"admin1155\"}}\nassert 200 == 403\n +  where 200 = <Response [200]>.status_code","time":{"start":1753990146551,"stop":1753990146570,"duration":19}},{"uid":"ec7832348274365c","status":"failed","statusDetails":"AssertionError: 状态码不符：预期403，实际200，完整response：{\"success\":true,\"message\":\"任务创建成功\",\"data\":{\"id\":345,\"processName\":\"亚马逊监控\",\"asinList\":\"B08XJ8J7SZ,B08LGD78Q5\",\"requiredInfo\":null,\"platform\":\"Amazon\",\"timeCycle\":\"daily\",\"createTime\":\"2025-08-01T03:20:47.755764\",\"updateTime\":\"2025-08-01T03:20:47.755764\",\"status\":\"ACTIVE\",\"userId\":4,\"username\":\"admin1155\"}}\nassert 200 == 403\n +  where 200 = <Response [200]>.status_code","time":{"start":1753989647750,"stop":1753989647769,"duration":19}},{"uid":"7b84adb0c8bba3d6","status":"failed","statusDetails":"AssertionError: 状态码不符：预期403，实际200，完整response：{\"success\":true,\"message\":\"任务创建成功\",\"data\":{\"id\":323,\"processName\":\"亚马逊监控\",\"asinList\":\"B08XJ8J7SZ,B08LGD78Q5\",\"requiredInfo\":null,\"platform\":\"Amazon\",\"timeCycle\":\"daily\",\"createTime\":\"2025-08-01T03:14:36.399385\",\"updateTime\":\"2025-08-01T03:14:36.399385\",\"status\":\"ACTIVE\",\"userId\":4,\"username\":\"admin1155\"}}\nassert 200 == 403\n +  where 200 = <Response [200]>.status_code","time":{"start":1753989276393,"stop":1753989276413,"duration":20}},{"uid":"ab379a88afcdea38","status":"failed","statusDetails":"AssertionError: 状态码不符：预期403，实际200，完整response：{\"success\":true,\"message\":\"任务创建成功\",\"data\":{\"id\":301,\"processName\":\"亚马逊监控\",\"asinList\":\"B08XJ8J7SZ,B08LGD78Q5\",\"requiredInfo\":null,\"platform\":\"Amazon\",\"timeCycle\":\"daily\",\"createTime\":\"2025-08-01T03:04:46.6174969\",\"updateTime\":\"2025-08-01T03:04:46.6174969\",\"status\":\"ACTIVE\",\"userId\":4,\"username\":\"admin1155\"}}\nassert 200 == 403\n +  where 200 = <Response [200]>.status_code","time":{"start":1753988686601,"stop":1753988686634,"duration":33}},{"uid":"13993664595ba282","status":"failed","statusDetails":"AssertionError: 状态码不符：预期403，实际200，完整response：{\"success\":true,\"message\":\"任务创建成功\",\"data\":{\"id\":279,\"processName\":\"亚马逊监控\",\"asinList\":\"B08XJ8J7SZ,B08LGD78Q5\",\"requiredInfo\":null,\"platform\":\"Amazon\",\"timeCycle\":\"daily\",\"createTime\":\"2025-08-01T02:57:38.2773671\",\"updateTime\":\"2025-08-01T02:57:38.2773671\",\"status\":\"ACTIVE\",\"userId\":4,\"username\":\"admin1155\"}}\nassert 200 == 403\n +  where 200 = <Response [200]>.status_code","time":{"start":1753988258250,"stop":1753988258296,"duration":46}},{"uid":"d3e006a9f70d76ad","status":"failed","statusDetails":"AssertionError: 状态码不符：预期403，实际200，完整response：{\"success\":true,\"message\":\"任务创建成功\",\"data\":{\"id\":257,\"processName\":\"亚马逊监控\",\"asinList\":\"B08XJ8J7SZ,B08LGD78Q5\",\"requiredInfo\":null,\"platform\":\"Amazon\",\"timeCycle\":\"daily\",\"createTime\":\"2025-08-01T02:50:37.5610671\",\"updateTime\":\"2025-08-01T02:50:37.5610671\",\"status\":\"ACTIVE\",\"userId\":4,\"username\":\"admin1155\"}}\nassert 200 == 403\n +  where 200 = <Response [200]>.status_code","time":{"start":1753987837548,"stop":1753987837585,"duration":37}},{"uid":"4a790b31f0e3bf75","status":"failed","statusDetails":"AssertionError: 状态码不符：预期403，实际200，完整response：{\"success\":true,\"message\":\"任务创建成功\",\"data\":{\"id\":247,\"processName\":\"亚马逊监控\",\"asinList\":\"B08XJ8J7SZ,B08LGD78Q5\",\"requiredInfo\":null,\"platform\":\"Amazon\",\"timeCycle\":\"daily\",\"createTime\":\"2025-08-01T02:38:29.9467059\",\"updateTime\":\"2025-08-01T02:38:29.9467059\",\"status\":\"ACTIVE\",\"userId\":4,\"username\":\"admin1155\"}}\nassert 200 == 403\n +  where 200 = <Response [200]>.status_code","time":{"start":1753987109917,"stop":1753987109968,"duration":51}},{"uid":"acf0b7c813a27baf","status":"failed","statusDetails":"AssertionError: 状态码不符：预期403，实际200，完整response：{\"success\":true,\"message\":\"任务创建成功\",\"data\":{\"id\":241,\"processName\":\"亚马逊监控\",\"asinList\":\"B08XJ8J7SZ,B08LGD78Q5\",\"requiredInfo\":null,\"platform\":\"Amazon\",\"timeCycle\":\"daily\",\"createTime\":\"2025-08-01T02:36:18.4920633\",\"updateTime\":\"2025-08-01T02:36:18.4920633\",\"status\":\"ACTIVE\",\"userId\":4,\"username\":\"admin1155\"}}\nassert 200 == 403\n +  where 200 = <Response [200]>.status_code","time":{"start":1753986978451,"stop":1753986978538,"duration":87}}],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"1486a2acf29d643b.json","parameterValues":["{'case_id': 'task_004', 'name': '所需信息未选择', 'method': 'POST', 'url': '/crawler/tasks', 'headers': {'Authorization': ''}, 'json': {'processName': '亚马逊监控', 'asinList': 'B08XJ8J7SZ,B08LGD78Q5', 'platform': 'Amazon', 'timeCycle': 'daily'}, 'expected_code': 403, 'expected_success': False, 'expected_message': '请至少选择一项所需信息'}"]}