{"uid":"75f55a2a3d19e728","name":"test_user_auth[case20]","fullName":"tests.test_user_auth#test_user_auth","historyId":"24f13640df5a7716fa28cd3732c78f43","time":{"start":1753986233368,"stop":1753986233394,"duration":26},"status":"failed","statusMessage":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","statusTrace":"case = {'case_id': 'auth_021', 'expected_code': 200, 'expected_message': '个人信息更新成功', 'expected_success': True, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODYyMzIsImV4cCI6MTc1Mzk5MzQzMn0.qdVCgfeHlD_9zIYKh8Mvt51oA-78ivXKL72S4oSmLII'\nsmall_jpg_image = 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmpmnh1r8_o.jpg'\nlarge_jpg_image = 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmppjcu8npz.jpg'\nsmall_png_image = 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmpvz5bl1r0.png'\nlarge_png_image = 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmp_09ni8ih.png'\nnon_image_file = 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmp4nbo7tm7.txt'\n\n    @allure.feature(\"用户认证模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_user_auth(case, auth_token, small_jpg_image, large_jpg_image, small_png_image, large_png_image, non_image_file):\n        allure.story(case[\"name\"])\n        allure.title(f\"{case['case_id']}: {case['name']}\")\n        logger.info(f\"开始执行用例: {case['case_id']} - {case['name']}\")\n    \n        # 文件映射\n        file_map = {\n            \"test_avatar.jpg\": small_jpg_image,\n            \"large_avatar.jpg\": large_jpg_image,\n            \"test_avatar.png\": small_png_image,\n            \"large_avatar.png\": large_png_image,\n            \"test_file.txt\": non_image_file\n        }\n    \n        # 预处理请求\n        request_data = preprocess_request(case, auth_token, file_map)\n    \n        # 注册用例处理验证码\n        if (case[\"case_id\"].startswith(\"auth_00\")\n            and case[\"method\"] == \"POST\"\n            and case[\"url\"] == \"/auth/register\"):\n    \n            email = request_data[\"json\"][\"email\"]\n            verify_code = send_and_get_verify_code(email)\n            request_data[\"json\"][\"verifyCode\"] = verify_code\n            logger.info(f\"为注册邮箱 {email} 填充验证码: {verify_code}\")\n    \n        # 4. auth_029：未登录状态上传头像\n        use_token = case[\"case_id\"] != \"auth_029\"\n        logger.info(f\"是否使用Token: {use_token}\")\n        current_token = auth_token if use_token else None\n    \n        # 发送请求\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            files=request_data.get(\"files\"),\n            token=current_token\n        )\n    \n        # 5. 增强断言信息（便于定位问题）\n        try:\n>           assert_response(\n                response,\n                expected_code=case[\"expected_code\"],\n                expected_success=case.get(\"expected_success\"),\n                expected_message=case.get(\"expected_message\")\n            )\n\ntests\\test_user_auth.py:75: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [403]>, expected_code = 200\nexpected_success = True, expected_message = '个人信息更新成功'\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response}\"\nE       AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nE       assert 403 == 200\nE        +  where 403 = <Response [403]>.status_code\n\nutils\\test_utils.py:7: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":20,"retriesStatusChange":true,"beforeStages":[{"name":"auth_token","time":{"start":1753986232057,"stop":1753986232224,"duration":167},"status":"passed","steps":[{"name":"发送请求：'POST' '/auth/login'","time":{"start":1753986232057,"stop":1753986232223,"duration":166},"status":"passed","steps":[],"attachments":[{"uid":"bf30586ebb2e6633","name":"请求信息","source":"bf30586ebb2e6633.txt","type":"text/plain","size":41},{"uid":"2bfbcd12103ce84f","name":"请求头","source":"2bfbcd12103ce84f.txt","type":"text/plain","size":45},{"uid":"3a79a51c4b735a54","name":"请求参数","source":"3a79a51c4b735a54.json","type":"application/json","size":58},{"uid":"20aedec88311b77d","name":"响应信息","source":"20aedec88311b77d.txt","type":"text/plain","size":14},{"uid":"fd6b5fbd16baaf1d","name":"响应体","source":"fd6b5fbd16baaf1d.json","type":"application/json","size":214}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/login'"},{"name":"headers","value":"None"},{"name":"params","value":"None"},{"name":"json","value":"{'username': 'admin1155', 'password': 'admin1155'}"},{"name":"files","value":"None"},{"name":"token","value":"None"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":1},{"name":"small_jpg_image","time":{"start":1753986232224,"stop":1753986232338,"duration":114},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_jpg_image","time":{"start":1753986232338,"stop":1753986232917,"duration":579},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"small_png_image","time":{"start":1753986232917,"stop":1753986232978,"duration":61},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_png_image","time":{"start":1753986232978,"stop":1753986233366,"duration":388},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"non_image_file","time":{"start":1753986233366,"stop":1753986233367,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","statusTrace":"case = {'case_id': 'auth_021', 'expected_code': 200, 'expected_message': '个人信息更新成功', 'expected_success': True, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODYyMzIsImV4cCI6MTc1Mzk5MzQzMn0.qdVCgfeHlD_9zIYKh8Mvt51oA-78ivXKL72S4oSmLII'\nsmall_jpg_image = 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmpmnh1r8_o.jpg'\nlarge_jpg_image = 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmppjcu8npz.jpg'\nsmall_png_image = 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmpvz5bl1r0.png'\nlarge_png_image = 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmp_09ni8ih.png'\nnon_image_file = 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmp4nbo7tm7.txt'\n\n    @allure.feature(\"用户认证模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_user_auth(case, auth_token, small_jpg_image, large_jpg_image, small_png_image, large_png_image, non_image_file):\n        allure.story(case[\"name\"])\n        allure.title(f\"{case['case_id']}: {case['name']}\")\n        logger.info(f\"开始执行用例: {case['case_id']} - {case['name']}\")\n    \n        # 文件映射\n        file_map = {\n            \"test_avatar.jpg\": small_jpg_image,\n            \"large_avatar.jpg\": large_jpg_image,\n            \"test_avatar.png\": small_png_image,\n            \"large_avatar.png\": large_png_image,\n            \"test_file.txt\": non_image_file\n        }\n    \n        # 预处理请求\n        request_data = preprocess_request(case, auth_token, file_map)\n    \n        # 注册用例处理验证码\n        if (case[\"case_id\"].startswith(\"auth_00\")\n            and case[\"method\"] == \"POST\"\n            and case[\"url\"] == \"/auth/register\"):\n    \n            email = request_data[\"json\"][\"email\"]\n            verify_code = send_and_get_verify_code(email)\n            request_data[\"json\"][\"verifyCode\"] = verify_code\n            logger.info(f\"为注册邮箱 {email} 填充验证码: {verify_code}\")\n    \n        # 4. auth_029：未登录状态上传头像\n        use_token = case[\"case_id\"] != \"auth_029\"\n        logger.info(f\"是否使用Token: {use_token}\")\n        current_token = auth_token if use_token else None\n    \n        # 发送请求\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            files=request_data.get(\"files\"),\n            token=current_token\n        )\n    \n        # 5. 增强断言信息（便于定位问题）\n        try:\n>           assert_response(\n                response,\n                expected_code=case[\"expected_code\"],\n                expected_success=case.get(\"expected_success\"),\n                expected_message=case.get(\"expected_message\")\n            )\n\ntests\\test_user_auth.py:75: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [403]>, expected_code = 200\nexpected_success = True, expected_message = '个人信息更新成功'\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response}\"\nE       AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nE       assert 403 == 200\nE        +  where 403 = <Response [403]>.status_code\n\nutils\\test_utils.py:7: AssertionError","steps":[{"name":"发送请求：'PUT' '/auth/userinfo'","time":{"start":1753986233370,"stop":1753986233388,"duration":18},"status":"passed","steps":[],"attachments":[{"uid":"8b5666e9053d8e01","name":"请求信息","source":"8b5666e9053d8e01.txt","type":"text/plain","size":44},{"uid":"98242ca2ad97f944","name":"请求头","source":"98242ca2ad97f944.txt","type":"text/plain","size":73},{"uid":"80846513d289c9ce","name":"请求参数","source":"80846513d289c9ce.json","type":"application/json","size":144},{"uid":"f185a879a9812761","name":"响应信息","source":"f185a879a9812761.txt","type":"text/plain","size":14},{"uid":"d869c5e68b6ea365","name":"响应体","source":"d869c5e68b6ea365.json","type":"application/json","size":0}],"parameters":[{"name":"method","value":"'PUT'"},{"name":"endpoint","value":"'/auth/userinfo'"},{"name":"headers","value":"{'Authorization': 'Bearer '}"},{"name":"params","value":"{}"},{"name":"json","value":"{'oldPassword': 'admin1155', 'newPassword': 'NewTest789', 'securityEmail': 'admin1155@example.com', 'verificationCode': '{verify_code}'}"},{"name":"files","value":"None"},{"name":"token","value":"'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODYyMzIsImV4cCI6MTc1Mzk5MzQzMn0.qdVCgfeHlD_9zIYKh8Mvt51oA-78ivXKL72S4oSmLII'"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"验证响应：状态码200，消息'个人信息更新成功'","time":{"start":1753986233389,"stop":1753986233389,"duration":0},"status":"failed","statusMessage":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code\n","statusTrace":"  File \"D:\\Anaconda3\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"D:\\工作记录\\项目说明\\api_test\\utils\\test_utils.py\", line 7, in assert_response\n    assert response.status_code == expected_code, \\\n","steps":[],"attachments":[],"parameters":[{"name":"response","value":"<Response [403]>"},{"name":"expected_code","value":"200"},{"name":"expected_success","value":"True"},{"name":"expected_message","value":"'个人信息更新成功'"}],"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[{"uid":"afd73706265c233b","name":"失败信息","source":"afd73706265c233b.txt","type":"text/plain","size":18},{"uid":"6fd13b9ca424317a","name":"调试信息","source":"6fd13b9ca424317a.txt","type":"text/plain","size":17},{"uid":"c590b28c922e8720","name":"log","source":"c590b28c922e8720.txt","type":"text/plain","size":1391},{"uid":"a64aa799f3747c93","name":"stdout","source":"a64aa799f3747c93.txt","type":"text/plain","size":183},{"uid":"bdce6da25aa6d789","name":"stderr","source":"bdce6da25aa6d789.txt","type":"text/plain","size":1044}],"parameters":[],"attachmentsCount":10,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":2},"afterStages":[{"name":"non_image_file::0","time":{"start":1753986233414,"stop":1753986233415,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_png_image::0","time":{"start":1753986233417,"stop":1753986233425,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"small_png_image::0","time":{"start":1753986233427,"stop":1753986233429,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_jpg_image::0","time":{"start":1753986233432,"stop":1753986233444,"duration":12},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"small_jpg_image::0","time":{"start":1753986233447,"stop":1753986233450,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"labels":[{"name":"feature","value":"用户认证模块"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_user_auth"},{"name":"host","value":"CYJ"},{"name":"thread","value":"3924-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_user_auth"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"case","value":"{'case_id': 'auth_021', 'name': '旧密码正确+新密码符合强度要求', 'method': 'PUT', 'url': '/auth/userinfo', 'headers': {'Authorization': 'Bearer '}, 'json': {'oldPassword': 'admin1155', 'newPassword': 'NewTest789', 'securityEmail': 'admin1155@example.com', 'verificationCode': '{verify_code}'}, 'expected_code': 200, 'expected_success': True, 'expected_message': '个人信息更新成功'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"42c2feac65b664d6","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753985535752,"stop":1753985535765,"duration":13}},{"uid":"315b2bcfbe25e4fd","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753976486688,"stop":1753976486704,"duration":16}},{"uid":"83230bd9f871a69","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753976334659,"stop":1753976334711,"duration":52}},{"uid":"d4a693e062bdccfa","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753975901654,"stop":1753975901680,"duration":26}},{"uid":"dc858977a5a53819","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753974397263,"stop":1753974397273,"duration":10}},{"uid":"557279533292ee80","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753973819100,"stop":1753973819146,"duration":46}},{"uid":"4891ffb6efb049a2","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753973668311,"stop":1753973668340,"duration":29}},{"uid":"a69a510d4d777a7c","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753972606372,"stop":1753972606381,"duration":9}},{"uid":"d0f75c8f08092c50","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753971271310,"stop":1753971271320,"duration":10}},{"uid":"b37912ee4f89a7e3","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403，完整response:<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753970520253,"stop":1753970520272,"duration":19}},{"uid":"cf79bccce35b2189","status":"broken","statusDetails":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1753970294646,"stop":1753970294680,"duration":34}},{"uid":"3ded7709ceffb51b","status":"broken","statusDetails":"UnboundLocalError: cannot access local variable 'json_data' where it is not associated with a value","time":{"start":1753969960546,"stop":1753969960589,"duration":43}},{"uid":"e9a8083013b3c967","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753969627063,"stop":1753969627094,"duration":31}},{"uid":"1cd45cc20818f6f9","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753969395661,"stop":1753969395703,"duration":42}},{"uid":"4432ccf3fd9c5bc4","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753969133524,"stop":1753969133535,"duration":11}},{"uid":"80553e719daa0834","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753968176476,"stop":1753968176493,"duration":17}},{"uid":"34033309c4e67daf","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753967371462,"stop":1753967371494,"duration":32}},{"uid":"a174bbe3e0323ecf","status":"broken","statusDetails":"KeyError: 'url'","time":{"start":1753967267567,"stop":1753967267567,"duration":0}},{"uid":"9b21fb734dabdbc0","status":"broken","statusDetails":"requests.exceptions.ConnectionError: HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /api/auth/login (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x000001657E09DE50>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。'))","time":{"start":1753967192955,"stop":1753967192955,"duration":0}},{"uid":"da67f7fe082b71a9","status":"broken","statusDetails":"KeyError: 'url'","time":{"start":1753966889789,"stop":1753966889789,"duration":0}}],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"75f55a2a3d19e728.json","parameterValues":["{'case_id': 'auth_021', 'name': '旧密码正确+新密码符合强度要求', 'method': 'PUT', 'url': '/auth/userinfo', 'headers': {'Authorization': 'Bearer '}, 'json': {'oldPassword': 'admin1155', 'newPassword': 'NewTest789', 'securityEmail': 'admin1155@example.com', 'verificationCode': '{verify_code}'}, 'expected_code': 200, 'expected_success': True, 'expected_message': '个人信息更新成功'}"]}