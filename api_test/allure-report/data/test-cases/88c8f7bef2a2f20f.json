{"uid":"88c8f7bef2a2f20f","name":"test_crawler_tasks[case11]","fullName":"tests.test_crawler_tasks#test_crawler_tasks","historyId":"db9466c387e9c129e4c218c798d5e4ac","time":{"start":1753986171640,"stop":1753986171660,"duration":20},"status":"failed","statusMessage":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","statusTrace":"case = {'case_id': 'task_012', 'expected_code': 200, 'expected_message': '任务列表获取成功', 'expected_success': True, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODYxNzEsImV4cCI6MTc1Mzk5MzM3MX0.zK-nKV5gA87c92ZxqcAnIPEtww1qnqyR8zmpdQuFASU'\n\n    @allure.feature(\"爬虫任务模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_crawler_tasks(case, auth_token):\n        allure.story(case[\"name\"])\n        allure.title(case[\"case_id\"] + \": \" + case[\"name\"])\n    \n        # 替换任务ID占位符\n        if \"{task_id}\" in case[\"url\"]:\n            # 先创建一个测试任务获取ID\n            from utils.context import context\n            if not context.get(\"task_id\"):\n                create_response = Request.send_request(\n                    \"POST\", \"/crawler/tasks\",\n                    json={\n                        \"processName\": \"测试任务\",\n                        \"asinList\": \"B08XJ8J7SZ\",\n                        \"requiredInfo\": [\"price\"],\n                        \"platform\": \"Amazon\",\n                        \"timeCycle\": \"daily\"\n                    },\n                    token=auth_token\n                )\n                context.set(\"task_id\", create_response.json()[\"data\"][\"id\"])\n            task_id = context.get(\"task_id\")\n            case[\"url\"] = case[\"url\"].replace(\"{task_id}\", str(task_id))\n    \n        # 预处理请求\n        request_data = preprocess_request(case, auth_token)\n    \n        # 发送请求\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            token=auth_token\n        )\n    \n        # 断言\n>       assert_response(\n            response,\n            expected_code=case[\"expected_code\"],\n            expected_success=case.get(\"expected_success\"),\n            expected_message=case.get(\"expected_message\")\n        )\n\ntests\\test_crawler_tasks.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [403]>, expected_code = 200\nexpected_success = True, expected_message = '任务列表获取成功'\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response}\"\nE       AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nE       assert 403 == 200\nE        +  where 403 = <Response [403]>.status_code\n\nutils\\test_utils.py:7: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":20,"retriesStatusChange":true,"beforeStages":[{"name":"auth_token","time":{"start":1753986171477,"stop":1753986171639,"duration":162},"status":"passed","steps":[{"name":"发送请求：'POST' '/auth/login'","time":{"start":1753986171477,"stop":1753986171638,"duration":161},"status":"passed","steps":[],"attachments":[{"uid":"964e2e95429bd2b0","name":"请求信息","source":"964e2e95429bd2b0.txt","type":"text/plain","size":41},{"uid":"d4325178cae0039d","name":"请求头","source":"d4325178cae0039d.txt","type":"text/plain","size":45},{"uid":"412f16806ee749b7","name":"请求参数","source":"412f16806ee749b7.json","type":"application/json","size":58},{"uid":"e28bf8019a2b79a7","name":"响应信息","source":"e28bf8019a2b79a7.txt","type":"text/plain","size":14},{"uid":"f10358aae9b815a4","name":"响应体","source":"f10358aae9b815a4.json","type":"application/json","size":214}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/login'"},{"name":"headers","value":"None"},{"name":"params","value":"None"},{"name":"json","value":"{'username': 'admin1155', 'password': 'admin1155'}"},{"name":"files","value":"None"},{"name":"token","value":"None"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":1}],"testStage":{"status":"failed","statusMessage":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","statusTrace":"case = {'case_id': 'task_012', 'expected_code': 200, 'expected_message': '任务列表获取成功', 'expected_success': True, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODYxNzEsImV4cCI6MTc1Mzk5MzM3MX0.zK-nKV5gA87c92ZxqcAnIPEtww1qnqyR8zmpdQuFASU'\n\n    @allure.feature(\"爬虫任务模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_crawler_tasks(case, auth_token):\n        allure.story(case[\"name\"])\n        allure.title(case[\"case_id\"] + \": \" + case[\"name\"])\n    \n        # 替换任务ID占位符\n        if \"{task_id}\" in case[\"url\"]:\n            # 先创建一个测试任务获取ID\n            from utils.context import context\n            if not context.get(\"task_id\"):\n                create_response = Request.send_request(\n                    \"POST\", \"/crawler/tasks\",\n                    json={\n                        \"processName\": \"测试任务\",\n                        \"asinList\": \"B08XJ8J7SZ\",\n                        \"requiredInfo\": [\"price\"],\n                        \"platform\": \"Amazon\",\n                        \"timeCycle\": \"daily\"\n                    },\n                    token=auth_token\n                )\n                context.set(\"task_id\", create_response.json()[\"data\"][\"id\"])\n            task_id = context.get(\"task_id\")\n            case[\"url\"] = case[\"url\"].replace(\"{task_id}\", str(task_id))\n    \n        # 预处理请求\n        request_data = preprocess_request(case, auth_token)\n    \n        # 发送请求\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            token=auth_token\n        )\n    \n        # 断言\n>       assert_response(\n            response,\n            expected_code=case[\"expected_code\"],\n            expected_success=case.get(\"expected_success\"),\n            expected_message=case.get(\"expected_message\")\n        )\n\ntests\\test_crawler_tasks.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [403]>, expected_code = 200\nexpected_success = True, expected_message = '任务列表获取成功'\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response}\"\nE       AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nE       assert 403 == 200\nE        +  where 403 = <Response [403]>.status_code\n\nutils\\test_utils.py:7: AssertionError","steps":[{"name":"发送请求：'GET' '/crawler/tasks'","time":{"start":1753986171641,"stop":1753986171657,"duration":16},"status":"passed","steps":[],"attachments":[{"uid":"6b58a283d6e23497","name":"请求信息","source":"6b58a283d6e23497.txt","type":"text/plain","size":44},{"uid":"132e17751b122e6a","name":"请求头","source":"132e17751b122e6a.txt","type":"text/plain","size":73},{"uid":"300f58e1c9a2ce8d","name":"请求参数","source":"300f58e1c9a2ce8d.json","type":"application/json","size":29},{"uid":"47966624646c649c","name":"响应信息","source":"47966624646c649c.txt","type":"text/plain","size":14},{"uid":"f09cb19e4f89acb2","name":"响应体","source":"f09cb19e4f89acb2.json","type":"application/json","size":0}],"parameters":[{"name":"method","value":"'GET'"},{"name":"endpoint","value":"'/crawler/tasks'"},{"name":"headers","value":"{'Authorization': 'Bearer '}"},{"name":"params","value":"{'status': 'INVALID'}"},{"name":"json","value":"{}"},{"name":"files","value":"None"},{"name":"token","value":"'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODYxNzEsImV4cCI6MTc1Mzk5MzM3MX0.zK-nKV5gA87c92ZxqcAnIPEtww1qnqyR8zmpdQuFASU'"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"验证响应：状态码200，消息'任务列表获取成功'","time":{"start":1753986171657,"stop":1753986171658,"duration":1},"status":"failed","statusMessage":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code\n","statusTrace":"  File \"D:\\Anaconda3\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"D:\\工作记录\\项目说明\\api_test\\utils\\test_utils.py\", line 7, in assert_response\n    assert response.status_code == expected_code, \\\n","steps":[],"attachments":[],"parameters":[{"name":"response","value":"<Response [403]>"},{"name":"expected_code","value":"200"},{"name":"expected_success","value":"True"},{"name":"expected_message","value":"'任务列表获取成功'"}],"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[{"uid":"2c1489579758c513","name":"log","source":"2c1489579758c513.txt","type":"text/plain","size":948},{"uid":"e55c937789371ec4","name":"stdout","source":"e55c937789371ec4.txt","type":"text/plain","size":183},{"uid":"3a5b34cad8943047","name":"stderr","source":"3a5b34cad8943047.txt","type":"text/plain","size":707}],"parameters":[],"attachmentsCount":8,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":2},"afterStages":[],"labels":[{"name":"feature","value":"爬虫任务模块"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_crawler_tasks"},{"name":"host","value":"CYJ"},{"name":"thread","value":"3924-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_crawler_tasks"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"case","value":"{'case_id': 'task_012', 'name': '筛选不存在的任务状态', 'method': 'GET', 'url': '/crawler/tasks', 'headers': {'Authorization': 'Bearer '}, 'params': {'status': 'INVALID'}, 'expected_code': 200, 'expected_success': True, 'expected_message': '任务列表获取成功'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"3e21f94aaecfeec2","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753976706487,"stop":1753976706502,"duration":15}},{"uid":"46ab9f70d68e7327","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753976447805,"stop":1753976447826,"duration":21}},{"uid":"1f61f239f43b75e0","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753976288197,"stop":1753976288210,"duration":13}},{"uid":"61ab8761bbbb7c1d","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753975842100,"stop":1753975842132,"duration":32}},{"uid":"7fc340815dd0179c","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753974333964,"stop":1753974333995,"duration":31}},{"uid":"cd148d1eab54fe8d","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753973756775,"stop":1753973756811,"duration":36}},{"uid":"565d946f4352f201","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753973620118,"stop":1753973620131,"duration":13}},{"uid":"1520751f03353ec0","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753972559459,"stop":1753972559475,"duration":16}},{"uid":"727d042958f89f11","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753971207013,"stop":1753971207024,"duration":11}},{"uid":"cb563bcb4821bbeb","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403，完整response:<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753970477426,"stop":1753970477451,"duration":25}},{"uid":"8e7a11f212ce41d8","status":"broken","statusDetails":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1753970254070,"stop":1753970254122,"duration":52}},{"uid":"a2ffff768fc81a5c","status":"broken","statusDetails":"UnboundLocalError: cannot access local variable 'json_data' where it is not associated with a value","time":{"start":1753969915433,"stop":1753969915461,"duration":28}},{"uid":"8c207b1843d264a9","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753969580786,"stop":1753969580800,"duration":14}},{"uid":"1ea7d16c98147fdb","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753969356849,"stop":1753969356893,"duration":44}},{"uid":"960f76dd719edd0d","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753969088304,"stop":1753969088319,"duration":15}},{"uid":"8103d0c87fcbe295","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753968138691,"stop":1753968138704,"duration":13}},{"uid":"7bfcd847b7b3d378","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753967369114,"stop":1753967369128,"duration":14}},{"uid":"b6cbd46daae1847a","status":"broken","statusDetails":"KeyError: 'url'","time":{"start":1753967266885,"stop":1753967266885,"duration":0}},{"uid":"8b111e8b9cded839","status":"broken","statusDetails":"requests.exceptions.ConnectionError: HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /api/auth/login (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x000001657E09DE50>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。'))","time":{"start":1753967173743,"stop":1753967173743,"duration":0}},{"uid":"b58e687d388ef516","status":"broken","statusDetails":"KeyError: 'url'","time":{"start":1753966888808,"stop":1753966888808,"duration":0}}],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"88c8f7bef2a2f20f.json","parameterValues":["{'case_id': 'task_012', 'name': '筛选不存在的任务状态', 'method': 'GET', 'url': '/crawler/tasks', 'headers': {'Authorization': 'Bearer '}, 'params': {'status': 'INVALID'}, 'expected_code': 200, 'expected_success': True, 'expected_message': '任务列表获取成功'}"]}