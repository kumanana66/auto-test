{"uid":"a0b4c9dd7f487d17","name":"test_user_auth[case22]","fullName":"tests.test_user_auth#test_user_auth","historyId":"78c1f28a1eb1d7e1b021f39fa5697cd7","time":{"start":1753967371618,"stop":1753967371645,"duration":27},"status":"failed","statusMessage":"AssertionError: 状态码不符：预期400，实际403\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code","statusTrace":"case = {'case_id': 'auth_023', 'expected_code': 400, 'expected_message': '新密码不能与当前密码相同', 'expected_success': False, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5NjczNjcsImV4cCI6MTc1Mzk3NDU2N30.jIsaUzukKTtbhO9rKcCGYS2LggbhBmAKqATRvS_FPks'\ntest_image = 'test_7466.png'\n\n    @allure.feature(\"用户认证模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_user_auth(case, auth_token, test_image):\n        allure.story(case[\"name\"])\n        allure.title(case[\"case_id\"] + \": \" + case[\"name\"])\n    \n        # 文件映射（用例中文件名 -> 实际测试文件）\n        file_map = {\n            \"test_avatar.jpg\": test_image,\n            \"test_avatar.png\": test_image\n        }\n    \n        # 预处理请求\n        request_data = preprocess_request(case, auth_token, file_map)\n    \n        # 发送请求\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            files=request_data.get(\"files\"),\n            token=auth_token\n        )\n    \n        # 断言\n>       assert_response(\n            response,\n            expected_code=case[\"expected_code\"],\n            expected_success=case.get(\"expected_success\"),\n            expected_message=case.get(\"expected_message\")\n        )\n\ntests\\test_user_auth.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [403]>, expected_code = 400\nexpected_success = False\nexpected_message = '新密码不能与当前密码相同'\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}\"\nE       AssertionError: 状态码不符：预期400，实际403\nE       assert 403 == 400\nE        +  where 403 = <Response [403]>.status_code\n\nutils\\test_utils.py:7: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"auth_token","time":{"start":1753967365307,"stop":1753967367526,"duration":2219},"status":"passed","steps":[{"name":"登录获取token","time":{"start":1753967365307,"stop":1753967367525,"duration":2218},"status":"passed","steps":[{"name":"发送请求：'POST' '/auth/login'","time":{"start":1753967365308,"stop":1753967367525,"duration":2217},"status":"passed","steps":[],"attachments":[{"uid":"90bd2c3a3819bd86","name":"请求信息","source":"90bd2c3a3819bd86.json","type":"application/json","size":64},{"uid":"f61c985fe02df236","name":"响应信息","source":"f61c985fe02df236.txt","type":"text/plain","size":20},{"uid":"6951dd3621d333ba","name":"响应体","source":"6951dd3621d333ba.json","type":"application/json","size":214}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/login'"},{"name":"headers","value":"None"},{"name":"params","value":"None"},{"name":"json","value":"{'username': 'admin1155', 'password': 'admin1155'}"},{"name":"files","value":"None"},{"name":"token","value":"None"}],"attachmentsCount":3,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":3,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":1}],"attachments":[],"parameters":[],"attachmentsCount":3,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":2},{"name":"test_image","time":{"start":1753967371615,"stop":1753967371617,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: 状态码不符：预期400，实际403\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code","statusTrace":"case = {'case_id': 'auth_023', 'expected_code': 400, 'expected_message': '新密码不能与当前密码相同', 'expected_success': False, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5NjczNjcsImV4cCI6MTc1Mzk3NDU2N30.jIsaUzukKTtbhO9rKcCGYS2LggbhBmAKqATRvS_FPks'\ntest_image = 'test_7466.png'\n\n    @allure.feature(\"用户认证模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_user_auth(case, auth_token, test_image):\n        allure.story(case[\"name\"])\n        allure.title(case[\"case_id\"] + \": \" + case[\"name\"])\n    \n        # 文件映射（用例中文件名 -> 实际测试文件）\n        file_map = {\n            \"test_avatar.jpg\": test_image,\n            \"test_avatar.png\": test_image\n        }\n    \n        # 预处理请求\n        request_data = preprocess_request(case, auth_token, file_map)\n    \n        # 发送请求\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            files=request_data.get(\"files\"),\n            token=auth_token\n        )\n    \n        # 断言\n>       assert_response(\n            response,\n            expected_code=case[\"expected_code\"],\n            expected_success=case.get(\"expected_success\"),\n            expected_message=case.get(\"expected_message\")\n        )\n\ntests\\test_user_auth.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [403]>, expected_code = 400\nexpected_success = False\nexpected_message = '新密码不能与当前密码相同'\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}\"\nE       AssertionError: 状态码不符：预期400，实际403\nE       assert 403 == 400\nE        +  where 403 = <Response [403]>.status_code\n\nutils\\test_utils.py:7: AssertionError","steps":[{"name":"发送请求：'PUT' '/auth/userinfo'","time":{"start":1753967371618,"stop":1753967371641,"duration":23},"status":"passed","steps":[],"attachments":[{"uid":"2cccb99019031367","name":"请求信息","source":"2cccb99019031367.json","type":"application/json","size":149},{"uid":"d362d4d401ae6493","name":"响应信息","source":"d362d4d401ae6493.txt","type":"text/plain","size":20},{"uid":"40081fd2cc6979fb","name":"响应体","source":"40081fd2cc6979fb.json","type":"application/json","size":0}],"parameters":[{"name":"method","value":"'PUT'"},{"name":"endpoint","value":"'/auth/userinfo'"},{"name":"headers","value":"{'Authorization': 'Bearer '}"},{"name":"params","value":"{}"},{"name":"json","value":"{'oldPassword': 'admin1155', 'newPassword': 'admin1155', 'securityEmail': 'admin1155@example.com', 'verificationCode': '{verify_code}'}"},{"name":"files","value":"None"},{"name":"token","value":"'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5NjczNjcsImV4cCI6MTc1Mzk3NDU2N30.jIsaUzukKTtbhO9rKcCGYS2LggbhBmAKqATRvS_FPks'"}],"attachmentsCount":3,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"验证响应：状态码400，消息'新密码不能与当前密码相同'","time":{"start":1753967371641,"stop":1753967371642,"duration":1},"status":"failed","statusMessage":"AssertionError: 状态码不符：预期400，实际403\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code\n","statusTrace":"  File \"D:\\Anaconda3\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"D:\\工作记录\\项目说明\\api_test\\utils\\test_utils.py\", line 7, in assert_response\n    assert response.status_code == expected_code, \\\n","steps":[],"attachments":[],"parameters":[{"name":"response","value":"<Response [403]>"},{"name":"expected_code","value":"400"},{"name":"expected_success","value":"False"},{"name":"expected_message","value":"'新密码不能与当前密码相同'"}],"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":3,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":2},"afterStages":[{"name":"test_image::0","time":{"start":1753967371664,"stop":1753967371665,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"labels":[{"name":"feature","value":"用户认证模块"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_user_auth"},{"name":"host","value":"CYJ"},{"name":"thread","value":"22888-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_user_auth"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"case","value":"{'case_id': 'auth_023', 'name': '新密码与旧密码相同', 'method': 'PUT', 'url': '/auth/userinfo', 'headers': {'Authorization': 'Bearer '}, 'json': {'oldPassword': 'admin1155', 'newPassword': 'admin1155', 'securityEmail': 'admin1155@example.com', 'verificationCode': '{verify_code}'}, 'expected_code': 400, 'expected_success': False, 'expected_message': '新密码不能与当前密码相同'}"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"a0b4c9dd7f487d17.json","parameterValues":["{'case_id': 'auth_023', 'name': '新密码与旧密码相同', 'method': 'PUT', 'url': '/auth/userinfo', 'headers': {'Authorization': 'Bearer '}, 'json': {'oldPassword': 'admin1155', 'newPassword': 'admin1155', 'securityEmail': 'admin1155@example.com', 'verificationCode': '{verify_code}'}, 'expected_code': 400, 'expected_success': False, 'expected_message': '新密码不能与当前密码相同'}"]}