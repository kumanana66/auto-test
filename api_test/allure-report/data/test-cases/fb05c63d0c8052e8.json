{"uid":"fb05c63d0c8052e8","name":"test_user_auth[case5]","fullName":"tests.test_user_auth#test_user_auth","historyId":"d5272e81589ad4ee4f1619314496bf5c","time":{"start":1753973782833,"stop":1753973785046,"duration":2213},"status":"failed","statusMessage":"AssertionError: 状态码不符：预期403，实际400，完整response：<Response [400]>\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","statusTrace":"case = {'case_id': 'auth_006', 'expected_code': 403, 'expected_message': '用户名格式无效（仅支持中文、英文、数字、下划线）', 'expected_success': False, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5NzM3ODEsImV4cCI6MTc1Mzk4MDk4MX0._NRiQLz6LjU6zJXU5ONXhBdu_j4VLJCM-H383AbIexs'\nsmall_jpg_image = 'small_1133.jpg', large_jpg_image = 'large_4671.jpg'\nsmall_png_image = 'small_3395.png', large_png_image = 'large_9159.png'\nnon_image_file = 'test_7747.txt'\n\n    @allure.feature(\"用户认证模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_user_auth(case, auth_token, small_jpg_image, large_jpg_image, small_png_image, large_png_image, non_image_file):\n        allure.story(case[\"name\"])\n        allure.title(f\"{case['case_id']}: {case['name']}\")\n    \n        # 文件映射：用例文件名 -> 实际测试文件\n        file_map = {\n            \"test_avatar.jpg\": small_jpg_image,\n            \"large_avatar.jpg\": large_jpg_image,\n            \"test_avatar.png\": small_png_image,\n            \"large_avatar.png\": large_png_image,\n            \"test_file.txt\": non_image_file\n        }\n    \n        # 预处理请求\n        request_data = preprocess_request(case, auth_token, file_map)\n    \n        # 注册用例单独处理验证码\n        if (case[\"case_id\"].startswith(\"auth_00\")\n            and case[\"method\"] == \"POST\"\n            and case[\"url\"] == \"/auth/register\"):\n    \n            # 获取注册邮箱\n            email = request_data[\"json\"][\"email\"]\n            # 发送并获取验证码\n            verify_code = send_and_get_verify_code(email)\n            # 填充验证码到请求参数\n            request_data[\"json\"][\"verifyCode\"] = verify_code\n    \n        # 发送请求\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            files=request_data.get(\"files\"),\n            token=auth_token if case[\"case_id\"] != \"auth_029\" else None  # 未登录用例移除token\n        )\n    \n        # 断言\n>       assert_response(\n            response,\n            expected_code=case[\"expected_code\"],\n            expected_success=case.get(\"expected_success\"),\n            expected_message=case.get(\"expected_message\")\n        )\n\ntests\\test_user_auth.py:71: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [400]>, expected_code = 403, expected_success = False\nexpected_message = '用户名格式无效（仅支持中文、英文、数字、下划线）'\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response}\"\nE       AssertionError: 状态码不符：预期403，实际400，完整response：<Response [400]>\nE       assert 400 == 403\nE        +  where 400 = <Response [400]>.status_code\n\nutils\\test_utils.py:7: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"auth_token","time":{"start":1753973781001,"stop":1753973781227,"duration":226},"status":"passed","steps":[{"name":"发送请求：'POST' '/auth/login'","time":{"start":1753973781001,"stop":1753973781227,"duration":226},"status":"passed","steps":[],"attachments":[{"uid":"487f8ff14c092b27","name":"请求信息","source":"487f8ff14c092b27.json","type":"application/json","size":64},{"uid":"33e754daf48c5a3e","name":"响应信息","source":"33e754daf48c5a3e.txt","type":"text/plain","size":20},{"uid":"167dd7d0a8dfd86d","name":"响应体","source":"167dd7d0a8dfd86d.json","type":"application/json","size":214}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/login'"},{"name":"headers","value":"None"},{"name":"params","value":"None"},{"name":"json","value":"{'username': 'admin1155', 'password': 'admin1155'}"},{"name":"files","value":"None"},{"name":"token","value":"None"}],"attachmentsCount":3,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":3,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":1},{"name":"small_jpg_image","time":{"start":1753973781229,"stop":1753973781368,"duration":139},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_jpg_image","time":{"start":1753973781368,"stop":1753973782278,"duration":910},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"small_png_image","time":{"start":1753973782278,"stop":1753973782399,"duration":121},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_png_image","time":{"start":1753973782400,"stop":1753973782827,"duration":427},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"non_image_file","time":{"start":1753973782827,"stop":1753973782831,"duration":4},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: 状态码不符：预期403，实际400，完整response：<Response [400]>\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","statusTrace":"case = {'case_id': 'auth_006', 'expected_code': 403, 'expected_message': '用户名格式无效（仅支持中文、英文、数字、下划线）', 'expected_success': False, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5NzM3ODEsImV4cCI6MTc1Mzk4MDk4MX0._NRiQLz6LjU6zJXU5ONXhBdu_j4VLJCM-H383AbIexs'\nsmall_jpg_image = 'small_1133.jpg', large_jpg_image = 'large_4671.jpg'\nsmall_png_image = 'small_3395.png', large_png_image = 'large_9159.png'\nnon_image_file = 'test_7747.txt'\n\n    @allure.feature(\"用户认证模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_user_auth(case, auth_token, small_jpg_image, large_jpg_image, small_png_image, large_png_image, non_image_file):\n        allure.story(case[\"name\"])\n        allure.title(f\"{case['case_id']}: {case['name']}\")\n    \n        # 文件映射：用例文件名 -> 实际测试文件\n        file_map = {\n            \"test_avatar.jpg\": small_jpg_image,\n            \"large_avatar.jpg\": large_jpg_image,\n            \"test_avatar.png\": small_png_image,\n            \"large_avatar.png\": large_png_image,\n            \"test_file.txt\": non_image_file\n        }\n    \n        # 预处理请求\n        request_data = preprocess_request(case, auth_token, file_map)\n    \n        # 注册用例单独处理验证码\n        if (case[\"case_id\"].startswith(\"auth_00\")\n            and case[\"method\"] == \"POST\"\n            and case[\"url\"] == \"/auth/register\"):\n    \n            # 获取注册邮箱\n            email = request_data[\"json\"][\"email\"]\n            # 发送并获取验证码\n            verify_code = send_and_get_verify_code(email)\n            # 填充验证码到请求参数\n            request_data[\"json\"][\"verifyCode\"] = verify_code\n    \n        # 发送请求\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            files=request_data.get(\"files\"),\n            token=auth_token if case[\"case_id\"] != \"auth_029\" else None  # 未登录用例移除token\n        )\n    \n        # 断言\n>       assert_response(\n            response,\n            expected_code=case[\"expected_code\"],\n            expected_success=case.get(\"expected_success\"),\n            expected_message=case.get(\"expected_message\")\n        )\n\ntests\\test_user_auth.py:71: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [400]>, expected_code = 403, expected_success = False\nexpected_message = '用户名格式无效（仅支持中文、英文、数字、下划线）'\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response}\"\nE       AssertionError: 状态码不符：预期403，实际400，完整response：<Response [400]>\nE       assert 400 == 403\nE        +  where 400 = <Response [400]>.status_code\n\nutils\\test_utils.py:7: AssertionError","steps":[{"name":"从数据库获取验证码：'test_9va63r@example.com'","time":{"start":1753973782833,"stop":1753973782843,"duration":10},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"email","value":"'test_9va63r@example.com'"}],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"发送请求：'POST' '/auth/send-verify-code'","time":{"start":1753973782844,"stop":1753973783952,"duration":1108},"status":"passed","steps":[],"attachments":[{"uid":"2af725a01ca45a7e","name":"请求信息","source":"2af725a01ca45a7e.json","type":"application/json","size":50},{"uid":"9eaa84329046f716","name":"响应信息","source":"9eaa84329046f716.txt","type":"text/plain","size":20},{"uid":"356ad9176cb74058","name":"响应体","source":"356ad9176cb74058.json","type":"application/json","size":84}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/send-verify-code'"},{"name":"headers","value":"None"},{"name":"params","value":"{'email': 'test_9va63r@example.com'}"},{"name":"json","value":"None"},{"name":"files","value":"None"},{"name":"token","value":"None"}],"attachmentsCount":3,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"验证响应：状态码200，消息None","time":{"start":1753973783953,"stop":1753973783953,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"response","value":"<Response [200]>"},{"name":"expected_code","value":"200"},{"name":"expected_success","value":"None"},{"name":"expected_message","value":"None"}],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"从数据库获取验证码：'test_9va63r@example.com'","time":{"start":1753973784955,"stop":1753973784968,"duration":13},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"email","value":"'test_9va63r@example.com'"}],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"发送请求：'POST' '/auth/register'","time":{"start":1753973784969,"stop":1753973785040,"duration":71},"status":"passed","steps":[],"attachments":[{"uid":"84061e1015f31333","name":"请求信息","source":"84061e1015f31333.json","type":"application/json","size":122},{"uid":"f450f6f64bb13636","name":"响应信息","source":"f450f6f64bb13636.txt","type":"text/plain","size":20},{"uid":"af58bb554d4760cc","name":"响应体","source":"af58bb554d4760cc.json","type":"application/json","size":63}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/register'"},{"name":"headers","value":"{}"},{"name":"params","value":"{}"},{"name":"json","value":"{'username': 'test@1', 'password': 'Test123456', 'email': 'test_9va63r@example.com', 'verifyCode': '986824'}"},{"name":"files","value":"None"},{"name":"token","value":"'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5NzM3ODEsImV4cCI6MTc1Mzk4MDk4MX0._NRiQLz6LjU6zJXU5ONXhBdu_j4VLJCM-H383AbIexs'"}],"attachmentsCount":3,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"验证响应：状态码403，消息'用户名格式无效（仅支持中文、英文、数字、下划线）'","time":{"start":1753973785041,"stop":1753973785042,"duration":1},"status":"failed","statusMessage":"AssertionError: 状态码不符：预期403，实际400，完整response：<Response [400]>\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"D:\\Anaconda3\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"D:\\工作记录\\项目说明\\api_test\\utils\\test_utils.py\", line 7, in assert_response\n    assert response.status_code == expected_code, \\\n","steps":[],"attachments":[],"parameters":[{"name":"response","value":"<Response [400]>"},{"name":"expected_code","value":"403"},{"name":"expected_success","value":"False"},{"name":"expected_message","value":"'用户名格式无效（仅支持中文、英文、数字、下划线）'"}],"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[{"uid":"1e1f4e096b42f148","name":"stdout","source":"1e1f4e096b42f148.txt","type":"text/plain","size":183}],"parameters":[],"attachmentsCount":7,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":6},"afterStages":[{"name":"non_image_file::0","time":{"start":1753973785089,"stop":1753973785091,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_png_image::0","time":{"start":1753973785095,"stop":1753973785101,"duration":6},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"small_png_image::0","time":{"start":1753973785109,"stop":1753973785112,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_jpg_image::0","time":{"start":1753973785119,"stop":1753973785135,"duration":16},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"small_jpg_image::0","time":{"start":1753973785144,"stop":1753973785151,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"labels":[{"name":"feature","value":"用户认证模块"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_user_auth"},{"name":"host","value":"CYJ"},{"name":"thread","value":"1232-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_user_auth"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"case","value":"{'case_id': 'auth_006', 'name': '用户名包含特殊符号', 'method': 'POST', 'url': '/auth/register', 'json': {'username': 'test@1', 'password': 'Test123456', 'email': 'test_9va63r@example.com', 'verifyCode': '{verify_code}'}, 'expected_code': 403, 'expected_success': False, 'expected_message': '用户名格式无效（仅支持中文、英文、数字、下划线）'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"fb05c63d0c8052e8.json","parameterValues":["{'case_id': 'auth_006', 'name': '用户名包含特殊符号', 'method': 'POST', 'url': '/auth/register', 'json': {'username': 'test@1', 'password': 'Test123456', 'email': 'test_9va63r@example.com', 'verifyCode': '{verify_code}'}, 'expected_code': 403, 'expected_success': False, 'expected_message': '用户名格式无效（仅支持中文、英文、数字、下划线）'}"]}