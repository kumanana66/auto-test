{"uid":"24607b3da98f735","name":"test_crawler_tasks[case7]","fullName":"tests.test_crawler_tasks#test_crawler_tasks","historyId":"3e84237200f5622c90ac5676c4cd00b4","time":{"start":1753987839577,"stop":1753987839669,"duration":92},"status":"failed","statusMessage":"AssertionError: 消息不符：预期任务已暂停，实际操作成功，完整response：{\"success\":true,\"message\":\"操作成功\",\"data\":\"任务已暂停\"}\nassert '操作成功' == '任务已暂停'\n  - 任务已暂停\n  + 操作成功","statusTrace":"case = {'case_id': 'task_008', 'expected_code': 200, 'expected_message': '任务已暂停', 'expected_success': True, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODc4MzksImV4cCI6MTc1Mzk5NTAzOX0.5S-D4oCTun_3nBTEihlWNVG_wRJ_7Ed7dNJBb72ULY0'\ntask_id = 262\n\n    @allure.feature(\"爬虫任务模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_crawler_tasks(case, auth_token, task_id):\n        allure.story(case[\"name\"])\n        allure.title(f\"{case['case_id']}: {case['name']}\")\n    \n        # 替换任务ID占位符\n        if \"{task_id}\" in case[\"url\"]:\n            case[\"url\"] = case[\"url\"].replace(\"{task_id}\", str(task_id))\n            allure.attach(f\"使用任务ID: {task_id}\", \"测试信息\", allure.attachment_type.TEXT)\n    \n        # --------------------------\n        # 关键修改：处理PPT下载的前置依赖\n        # --------------------------\n        # 1. 若当前是下载PPT的用例（task_017），先启动数据分析并等待完成\n        if case[\"case_id\"] == \"task_017\":\n            allure.attach(\"开始执行数据分析数据分析前置操作\", \"前置依赖\", allure.attachment_type.TEXT)\n    \n            # 1.1 启动数据分析\n            analyze_response = Request.send_request(\n                \"POST\", f\"/crawler/tasks/{task_id}/analyze\",  # 对应task_016的接口\n                token=auth_token\n            )\n            assert_response(\n                analyze_response,\n                200,\n                expected_success=True,\n                expected_message=\"数据分析已启动\"  # 匹配task_016的预期消息\n            )\n            allure.attach(\"数据分析已启动\", \"前置操作结果\", allure.attachment_type.TEXT)\n    \n            # 1.2 轮询等待分析完成（复用同test_download_analyzed_ppt的逻辑）\n            max_wait_seconds = 180\n            check_interval = 5\n            elapsed_seconds = 0\n            status = \"PROCESSING\"\n    \n            while elapsed_seconds < max_wait_seconds and status == \"PROCESSING\":\n                # 查询当前状态\n                status_response = Request.send_request(\n                    \"GET\", f\"/crawler/tasks/{task_id}/analyze/status\",\n                    token=auth_token\n                )\n                assert_response(status_response, 200)\n                status = status_response.json()[\"data\"]\n                allure.attach(f\"当前分析状态: {status} (等待{elapsed_seconds}秒)\", \"状态轮询\", allure.attachment_type.TEXT)\n    \n                if status == \"PROCESSING\":\n                    time.sleep(check_interval)\n                    elapsed_seconds += check_interval\n    \n            # 1.3 校验分析状态（必须完成才能继续下载）\n            assert status in [\"COMPLETED\", \"FAILED\"], f\"数据分析超时，最终状态：{status}\"\n            if status == \"FAILED\":\n                pytest.fail(\"数据分析失败，无法下载PPT\")  # 分析失败则标记用例失败\n            allure.attach(\"数据分析已完成\", \"前置操作结果\", allure.attachment_type.TEXT)\n    \n        # 预处理请求\n        request_data = preprocess_request(case, auth_token)\n        if \"headers\" in request_data and \"Authorization\" in request_data[\"headers\"]:\n            del request_data[\"headers\"][\"Authorization\"]\n    \n        # 发送请求（对task_017而言，此时已确保分析完成）\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            token=auth_token\n        )\n    \n        # 断言（增加PPT格式校验）\n        try:\n            assert_response(\n                response,\n                expected_code=case[\"expected_code\"],\n                expected_success=case.get(\"expected_success\"),\n                expected_message=case.get(\"expected_message\")\n            )\n            # 额外校验PPT文件类型（对应case中的expected_content_type）\n            if case.get(\"expected_content_type\"):\n                assert case[\"expected_content_type\"] in response.headers[\"Content-Type\"], \\\n                    f\"文件类型错误，预期: {case['expected_content_type']}, 实际: {response.headers['Content-Type']}\"\n        except AssertionError as e:\n            allure.attach(f\"响应内容: {response.text}\", \"断言失败详情\", allure.attachment_type.TEXT)\n>           raise e\n\ntests\\test_crawler_tasks.py:120: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\test_crawler_tasks.py:108: in test_crawler_tasks\n    assert_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [200]>, expected_code = 200\nexpected_success = True, expected_message = '任务已暂停'\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n        assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response.text}\"\n    \n        if response.status_code != 200:\n            return\n    \n        try:\n            json_data = response.json()\n        except:\n            assert False, f\"响应不是有效的JSON格式: {response.text}\"\n    \n        if expected_success is not None:\n            assert json_data.get(\"success\") == expected_success, \\\n                f\"success字段不符：预期{expected_success}，实际{json_data.get('success')}，完整response：{response.text}\"\n    \n        if expected_message:\n>           assert json_data.get(\"message\") == expected_message, \\\n                f\"消息不符：预期{expected_message}，实际{json_data.get('message')}，完整response：{response.text}\"\nE           AssertionError: 消息不符：预期任务已暂停，实际操作成功，完整response：{\"success\":true,\"message\":\"操作成功\",\"data\":\"任务已暂停\"}\nE           assert '操作成功' == '任务已暂停'\nE             - 任务已暂停\nE             + 操作成功\n\nutils\\test_utils.py:23: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"auth_token","time":{"start":1753987839202,"stop":1753987839510,"duration":308},"status":"passed","steps":[{"name":"发送请求：'POST' '/auth/login'","time":{"start":1753987839202,"stop":1753987839508,"duration":306},"status":"passed","steps":[],"attachments":[{"uid":"1bd977ee8392a8ad","name":"请求信息","source":"1bd977ee8392a8ad.txt","type":"text/plain","size":41},{"uid":"c6870a4a6ee8de3a","name":"请求头","source":"c6870a4a6ee8de3a.txt","type":"text/plain","size":45},{"uid":"99aff4e982a414f2","name":"请求参数","source":"99aff4e982a414f2.json","type":"application/json","size":58},{"uid":"91e86db9dfde7621","name":"响应信息","source":"91e86db9dfde7621.txt","type":"text/plain","size":14},{"uid":"763aed7b39bf6e1e","name":"响应体","source":"763aed7b39bf6e1e.json","type":"application/json","size":214}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/login'"},{"name":"headers","value":"None"},{"name":"params","value":"None"},{"name":"json","value":"{'username': 'admin1155', 'password': 'admin1155'}"},{"name":"files","value":"None"},{"name":"token","value":"None"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":1},{"name":"task_id","time":{"start":1753987839511,"stop":1753987839573,"duration":62},"status":"passed","steps":[{"name":"发送请求：'POST' '/crawler/tasks'","time":{"start":1753987839512,"stop":1753987839572,"duration":60},"status":"passed","steps":[],"attachments":[{"uid":"bd0974618c750056","name":"请求信息","source":"bd0974618c750056.txt","type":"text/plain","size":44},{"uid":"7c2c4a29f6f95c38","name":"请求头","source":"7c2c4a29f6f95c38.txt","type":"text/plain","size":209},{"uid":"cb8c3b6a8b2b81e1","name":"请求参数","source":"cb8c3b6a8b2b81e1.json","type":"application/json","size":141},{"uid":"44b023c2e9f70132","name":"响应信息","source":"44b023c2e9f70132.txt","type":"text/plain","size":14},{"uid":"3c4ba603962c730f","name":"响应体","source":"3c4ba603962c730f.json","type":"application/json","size":326}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/crawler/tasks'"},{"name":"headers","value":"None"},{"name":"params","value":"None"},{"name":"json","value":"{'processName': '测试任务_None', 'asinList': 'B08XJ8J7SZ', 'requiredInfo': ['price'], 'platform': 'Amazon', 'timeCycle': 'daily'}"},{"name":"files","value":"None"},{"name":"token","value":"'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODc4MzksImV4cCI6MTc1Mzk5NTAzOX0.5S-D4oCTun_3nBTEihlWNVG_wRJ_7Ed7dNJBb72ULY0'"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"验证响应：状态码200，消息None","time":{"start":1753987839573,"stop":1753987839573,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"response","value":"<Response [200]>"},{"name":"expected_code","value":"200"},{"name":"expected_success","value":"True"},{"name":"expected_message","value":"None"}],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":2}],"testStage":{"status":"failed","statusMessage":"AssertionError: 消息不符：预期任务已暂停，实际操作成功，完整response：{\"success\":true,\"message\":\"操作成功\",\"data\":\"任务已暂停\"}\nassert '操作成功' == '任务已暂停'\n  - 任务已暂停\n  + 操作成功","statusTrace":"case = {'case_id': 'task_008', 'expected_code': 200, 'expected_message': '任务已暂停', 'expected_success': True, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODc4MzksImV4cCI6MTc1Mzk5NTAzOX0.5S-D4oCTun_3nBTEihlWNVG_wRJ_7Ed7dNJBb72ULY0'\ntask_id = 262\n\n    @allure.feature(\"爬虫任务模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_crawler_tasks(case, auth_token, task_id):\n        allure.story(case[\"name\"])\n        allure.title(f\"{case['case_id']}: {case['name']}\")\n    \n        # 替换任务ID占位符\n        if \"{task_id}\" in case[\"url\"]:\n            case[\"url\"] = case[\"url\"].replace(\"{task_id}\", str(task_id))\n            allure.attach(f\"使用任务ID: {task_id}\", \"测试信息\", allure.attachment_type.TEXT)\n    \n        # --------------------------\n        # 关键修改：处理PPT下载的前置依赖\n        # --------------------------\n        # 1. 若当前是下载PPT的用例（task_017），先启动数据分析并等待完成\n        if case[\"case_id\"] == \"task_017\":\n            allure.attach(\"开始执行数据分析数据分析前置操作\", \"前置依赖\", allure.attachment_type.TEXT)\n    \n            # 1.1 启动数据分析\n            analyze_response = Request.send_request(\n                \"POST\", f\"/crawler/tasks/{task_id}/analyze\",  # 对应task_016的接口\n                token=auth_token\n            )\n            assert_response(\n                analyze_response,\n                200,\n                expected_success=True,\n                expected_message=\"数据分析已启动\"  # 匹配task_016的预期消息\n            )\n            allure.attach(\"数据分析已启动\", \"前置操作结果\", allure.attachment_type.TEXT)\n    \n            # 1.2 轮询等待分析完成（复用同test_download_analyzed_ppt的逻辑）\n            max_wait_seconds = 180\n            check_interval = 5\n            elapsed_seconds = 0\n            status = \"PROCESSING\"\n    \n            while elapsed_seconds < max_wait_seconds and status == \"PROCESSING\":\n                # 查询当前状态\n                status_response = Request.send_request(\n                    \"GET\", f\"/crawler/tasks/{task_id}/analyze/status\",\n                    token=auth_token\n                )\n                assert_response(status_response, 200)\n                status = status_response.json()[\"data\"]\n                allure.attach(f\"当前分析状态: {status} (等待{elapsed_seconds}秒)\", \"状态轮询\", allure.attachment_type.TEXT)\n    \n                if status == \"PROCESSING\":\n                    time.sleep(check_interval)\n                    elapsed_seconds += check_interval\n    \n            # 1.3 校验分析状态（必须完成才能继续下载）\n            assert status in [\"COMPLETED\", \"FAILED\"], f\"数据分析超时，最终状态：{status}\"\n            if status == \"FAILED\":\n                pytest.fail(\"数据分析失败，无法下载PPT\")  # 分析失败则标记用例失败\n            allure.attach(\"数据分析已完成\", \"前置操作结果\", allure.attachment_type.TEXT)\n    \n        # 预处理请求\n        request_data = preprocess_request(case, auth_token)\n        if \"headers\" in request_data and \"Authorization\" in request_data[\"headers\"]:\n            del request_data[\"headers\"][\"Authorization\"]\n    \n        # 发送请求（对task_017而言，此时已确保分析完成）\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            token=auth_token\n        )\n    \n        # 断言（增加PPT格式校验）\n        try:\n            assert_response(\n                response,\n                expected_code=case[\"expected_code\"],\n                expected_success=case.get(\"expected_success\"),\n                expected_message=case.get(\"expected_message\")\n            )\n            # 额外校验PPT文件类型（对应case中的expected_content_type）\n            if case.get(\"expected_content_type\"):\n                assert case[\"expected_content_type\"] in response.headers[\"Content-Type\"], \\\n                    f\"文件类型错误，预期: {case['expected_content_type']}, 实际: {response.headers['Content-Type']}\"\n        except AssertionError as e:\n            allure.attach(f\"响应内容: {response.text}\", \"断言失败详情\", allure.attachment_type.TEXT)\n>           raise e\n\ntests\\test_crawler_tasks.py:120: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\test_crawler_tasks.py:108: in test_crawler_tasks\n    assert_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [200]>, expected_code = 200\nexpected_success = True, expected_message = '任务已暂停'\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n        assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response.text}\"\n    \n        if response.status_code != 200:\n            return\n    \n        try:\n            json_data = response.json()\n        except:\n            assert False, f\"响应不是有效的JSON格式: {response.text}\"\n    \n        if expected_success is not None:\n            assert json_data.get(\"success\") == expected_success, \\\n                f\"success字段不符：预期{expected_success}，实际{json_data.get('success')}，完整response：{response.text}\"\n    \n        if expected_message:\n>           assert json_data.get(\"message\") == expected_message, \\\n                f\"消息不符：预期{expected_message}，实际{json_data.get('message')}，完整response：{response.text}\"\nE           AssertionError: 消息不符：预期任务已暂停，实际操作成功，完整response：{\"success\":true,\"message\":\"操作成功\",\"data\":\"任务已暂停\"}\nE           assert '操作成功' == '任务已暂停'\nE             - 任务已暂停\nE             + 操作成功\n\nutils\\test_utils.py:23: AssertionError","steps":[{"name":"发送请求：'POST' '/crawler/tasks/262/pause'","time":{"start":1753987839580,"stop":1753987839661,"duration":81},"status":"passed","steps":[],"attachments":[{"uid":"43e0ffcf1edd136a","name":"请求信息","source":"43e0ffcf1edd136a.txt","type":"text/plain","size":54},{"uid":"d3fb7f343a0268b5","name":"请求头","source":"d3fb7f343a0268b5.txt","type":"text/plain","size":209},{"uid":"711c6803135ce9e1","name":"请求参数","source":"711c6803135ce9e1.json","type":"application/json","size":10},{"uid":"f5ee3d1b6831a28c","name":"响应信息","source":"f5ee3d1b6831a28c.txt","type":"text/plain","size":14},{"uid":"fda69fbb01508706","name":"响应体","source":"fda69fbb01508706.json","type":"application/json","size":66}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/crawler/tasks/262/pause'"},{"name":"headers","value":"{}"},{"name":"params","value":"{}"},{"name":"json","value":"{}"},{"name":"files","value":"None"},{"name":"token","value":"'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODc4MzksImV4cCI6MTc1Mzk5NTAzOX0.5S-D4oCTun_3nBTEihlWNVG_wRJ_7Ed7dNJBb72ULY0'"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"验证响应：状态码200，消息'任务已暂停'","time":{"start":1753987839661,"stop":1753987839662,"duration":1},"status":"failed","statusMessage":"AssertionError: 消息不符：预期任务已暂停，实际操作成功，完整response：{\"success\":true,\"message\":\"操作成功\",\"data\":\"任务已暂停\"}\nassert '操作成功' == '任务已暂停'\n  - 任务已暂停\n  + 操作成功\n","statusTrace":"  File \"D:\\Anaconda3\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"D:\\工作记录\\项目说明\\api_test\\utils\\test_utils.py\", line 23, in assert_response\n    assert json_data.get(\"message\") == expected_message, \\\n","steps":[],"attachments":[],"parameters":[{"name":"response","value":"<Response [200]>"},{"name":"expected_code","value":"200"},{"name":"expected_success","value":"True"},{"name":"expected_message","value":"'任务已暂停'"}],"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[{"uid":"1e2779ccb7307dc6","name":"测试信息","source":"1e2779ccb7307dc6.txt","type":"text/plain","size":19},{"uid":"7bc3df74daf73f83","name":"断言失败详情","source":"7bc3df74daf73f83.txt","type":"text/plain","size":80},{"uid":"272665ce6dddb6aa","name":"log","source":"272665ce6dddb6aa.txt","type":"text/plain","size":2672},{"uid":"7105a42c0a25c28c","name":"stdout","source":"7105a42c0a25c28c.txt","type":"text/plain","size":183},{"uid":"19f87537d089034c","name":"stderr","source":"19f87537d089034c.txt","type":"text/plain","size":2160}],"parameters":[],"attachmentsCount":10,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":2},"afterStages":[{"name":"task_id::0","time":{"start":1753987839748,"stop":1753987839837,"duration":89},"status":"passed","steps":[{"name":"发送请求：'DELETE' '/crawler/tasks/262'","time":{"start":1753987839749,"stop":1753987839836,"duration":87},"status":"passed","steps":[],"attachments":[{"uid":"a6ea070b3bf16b9d","name":"请求信息","source":"a6ea070b3bf16b9d.txt","type":"text/plain","size":48},{"uid":"6e91edaa6bfff506","name":"请求头","source":"6e91edaa6bfff506.txt","type":"text/plain","size":209},{"uid":"90b79453d1030e36","name":"请求参数","source":"90b79453d1030e36.json","type":"application/json","size":12},{"uid":"c8b3fce5cd7ff3fd","name":"响应信息","source":"c8b3fce5cd7ff3fd.txt","type":"text/plain","size":14},{"uid":"17855e0c31f7f11c","name":"响应体","source":"17855e0c31f7f11c.json","type":"application/json","size":69}],"parameters":[{"name":"method","value":"'DELETE'"},{"name":"endpoint","value":"'/crawler/tasks/262'"},{"name":"headers","value":"None"},{"name":"params","value":"None"},{"name":"json","value":"None"},{"name":"files","value":"None"},{"name":"token","value":"'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODc4MzksImV4cCI6MTc1Mzk5NTAzOX0.5S-D4oCTun_3nBTEihlWNVG_wRJ_7Ed7dNJBb72ULY0'"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":1}],"labels":[{"name":"feature","value":"爬虫任务模块"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_crawler_tasks"},{"name":"host","value":"CYJ"},{"name":"thread","value":"22580-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_crawler_tasks"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"case","value":"{'case_id': 'task_008', 'name': '暂停活跃任务', 'method': 'POST', 'url': '/crawler/tasks/{task_id}/pause', 'headers': {'Authorization': ''}, 'expected_code': 200, 'expected_success': True, 'expected_message': '任务已暂停'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"24607b3da98f735.json","parameterValues":["{'case_id': 'task_008', 'name': '暂停活跃任务', 'method': 'POST', 'url': '/crawler/tasks/{task_id}/pause', 'headers': {'Authorization': ''}, 'expected_code': 200, 'expected_success': True, 'expected_message': '任务已暂停'}"]}