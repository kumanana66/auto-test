{"uid":"5b28dbbd48508689","name":"test_crawler_tasks[case14]","fullName":"tests.test_crawler_tasks#test_crawler_tasks","historyId":"6a310a7ca0136beecbe933c87046ae7e","time":{"start":1753986982913,"stop":1753986982968,"duration":55},"status":"failed","statusMessage":"AssertionError: 状态码不符：预期200，实际500，完整response：导出数据失败: Task not found with id: 243\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code","statusTrace":"case = {'case_id': 'task_015', 'expected_code': 200, 'expected_content_type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'headers': {'Authorization': ''}, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODY5ODIsImV4cCI6MTc1Mzk5NDE4Mn0.IQotoVAMppNXd4xB_wv1CB6gzjIVg2PAP6gVc90YBMw'\n\n    @allure.feature(\"爬虫任务模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_crawler_tasks(case, auth_token):\n        allure.story(case[\"name\"])\n        allure.title(case[\"case_id\"] + \": \" + case[\"name\"])\n    \n        # 替换任务ID占位符\n        if \"{task_id}\" in case[\"url\"]:\n            # 先创建一个测试任务获取ID\n            from utils.context import context\n            if not context.get(\"task_id\"):\n                create_response = Request.send_request(\n                    \"POST\", \"/crawler/tasks\",\n                    json={\n                        \"processName\": \"测试任务\",\n                        \"asinList\": \"B08XJ8J7SZ\",\n                        \"requiredInfo\": [\"price\"],\n                        \"platform\": \"Amazon\",\n                        \"timeCycle\": \"daily\"\n                    },\n                    token=auth_token\n                )\n                context.set(\"task_id\", create_response.json()[\"data\"][\"id\"])\n            task_id = context.get(\"task_id\")\n            case[\"url\"] = case[\"url\"].replace(\"{task_id}\", str(task_id))\n    \n        # 预处理请求\n        request_data = preprocess_request(case, auth_token)\n    \n        # 发送请求\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            token=auth_token\n        )\n    \n        # 断言\n>       assert_response(\n            response,\n            expected_code=case[\"expected_code\"],\n            expected_success=case.get(\"expected_success\"),\n            expected_message=case.get(\"expected_message\")\n        )\n\ntests\\test_crawler_tasks.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [500]>, expected_code = 200\nexpected_success = None, expected_message = None\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response.text}\"\nE       AssertionError: 状态码不符：预期200，实际500，完整response：导出数据失败: Task not found with id: 243\nE       assert 500 == 200\nE        +  where 500 = <Response [500]>.status_code\n\nutils\\test_utils.py:7: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"auth_token","time":{"start":1753986982669,"stop":1753986982912,"duration":243},"status":"passed","steps":[{"name":"发送请求：'POST' '/auth/login'","time":{"start":1753986982670,"stop":1753986982912,"duration":242},"status":"passed","steps":[],"attachments":[{"uid":"bfb580d6a17e97fc","name":"请求信息","source":"bfb580d6a17e97fc.txt","type":"text/plain","size":41},{"uid":"afe0ee349fed80a7","name":"请求头","source":"afe0ee349fed80a7.txt","type":"text/plain","size":45},{"uid":"dad0e099f551c80e","name":"请求参数","source":"dad0e099f551c80e.json","type":"application/json","size":58},{"uid":"90b9a984a061a26b","name":"响应信息","source":"90b9a984a061a26b.txt","type":"text/plain","size":14},{"uid":"ee6059a0e419b019","name":"响应体","source":"ee6059a0e419b019.json","type":"application/json","size":214}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/login'"},{"name":"headers","value":"None"},{"name":"params","value":"None"},{"name":"json","value":"{'username': 'admin1155', 'password': 'admin1155'}"},{"name":"files","value":"None"},{"name":"token","value":"None"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":1}],"testStage":{"status":"failed","statusMessage":"AssertionError: 状态码不符：预期200，实际500，完整response：导出数据失败: Task not found with id: 243\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code","statusTrace":"case = {'case_id': 'task_015', 'expected_code': 200, 'expected_content_type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'headers': {'Authorization': ''}, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODY5ODIsImV4cCI6MTc1Mzk5NDE4Mn0.IQotoVAMppNXd4xB_wv1CB6gzjIVg2PAP6gVc90YBMw'\n\n    @allure.feature(\"爬虫任务模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_crawler_tasks(case, auth_token):\n        allure.story(case[\"name\"])\n        allure.title(case[\"case_id\"] + \": \" + case[\"name\"])\n    \n        # 替换任务ID占位符\n        if \"{task_id}\" in case[\"url\"]:\n            # 先创建一个测试任务获取ID\n            from utils.context import context\n            if not context.get(\"task_id\"):\n                create_response = Request.send_request(\n                    \"POST\", \"/crawler/tasks\",\n                    json={\n                        \"processName\": \"测试任务\",\n                        \"asinList\": \"B08XJ8J7SZ\",\n                        \"requiredInfo\": [\"price\"],\n                        \"platform\": \"Amazon\",\n                        \"timeCycle\": \"daily\"\n                    },\n                    token=auth_token\n                )\n                context.set(\"task_id\", create_response.json()[\"data\"][\"id\"])\n            task_id = context.get(\"task_id\")\n            case[\"url\"] = case[\"url\"].replace(\"{task_id}\", str(task_id))\n    \n        # 预处理请求\n        request_data = preprocess_request(case, auth_token)\n    \n        # 发送请求\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            token=auth_token\n        )\n    \n        # 断言\n>       assert_response(\n            response,\n            expected_code=case[\"expected_code\"],\n            expected_success=case.get(\"expected_success\"),\n            expected_message=case.get(\"expected_message\")\n        )\n\ntests\\test_crawler_tasks.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [500]>, expected_code = 200\nexpected_success = None, expected_message = None\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response.text}\"\nE       AssertionError: 状态码不符：预期200，实际500，完整response：导出数据失败: Task not found with id: 243\nE       assert 500 == 200\nE        +  where 500 = <Response [500]>.status_code\n\nutils\\test_utils.py:7: AssertionError","steps":[{"name":"发送请求：'GET' '/crawler/tasks/243/export'","time":{"start":1753986982914,"stop":1753986982965,"duration":51},"status":"passed","steps":[],"attachments":[{"uid":"7e6fd68e67c223c6","name":"请求信息","source":"7e6fd68e67c223c6.txt","type":"text/plain","size":55},{"uid":"7176ef8860d15542","name":"请求头","source":"7176ef8860d15542.txt","type":"text/plain","size":209},{"uid":"a7c927211ba04024","name":"请求参数","source":"a7c927211ba04024.json","type":"application/json","size":30},{"uid":"34b31be6cf5c3a3b","name":"响应信息","source":"34b31be6cf5c3a3b.txt","type":"text/plain","size":14},{"uid":"11e17216cb1a7f65","name":"响应体","source":"11e17216cb1a7f65.json","type":"application/json","size":47}],"parameters":[{"name":"method","value":"'GET'"},{"name":"endpoint","value":"'/crawler/tasks/243/export'"},{"name":"headers","value":"{}"},{"name":"params","value":"{'type': 'price-rank'}"},{"name":"json","value":"{}"},{"name":"files","value":"None"},{"name":"token","value":"'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODY5ODIsImV4cCI6MTc1Mzk5NDE4Mn0.IQotoVAMppNXd4xB_wv1CB6gzjIVg2PAP6gVc90YBMw'"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"验证响应：状态码200，消息None","time":{"start":1753986982966,"stop":1753986982966,"duration":0},"status":"failed","statusMessage":"AssertionError: 状态码不符：预期200，实际500，完整response：导出数据失败: Task not found with id: 243\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code\n","statusTrace":"  File \"D:\\Anaconda3\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"D:\\工作记录\\项目说明\\api_test\\utils\\test_utils.py\", line 7, in assert_response\n    assert response.status_code == expected_code, \\\n","steps":[],"attachments":[],"parameters":[{"name":"response","value":"<Response [500]>"},{"name":"expected_code","value":"200"},{"name":"expected_success","value":"None"},{"name":"expected_message","value":"None"}],"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[{"uid":"79198a4788976dda","name":"log","source":"79198a4788976dda.txt","type":"text/plain","size":1143},{"uid":"807667c20032b56b","name":"stdout","source":"807667c20032b56b.txt","type":"text/plain","size":183},{"uid":"9d326d8b79f92c65","name":"stderr","source":"9d326d8b79f92c65.txt","type":"text/plain","size":901}],"parameters":[],"attachmentsCount":8,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":2},"afterStages":[],"labels":[{"name":"feature","value":"爬虫任务模块"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_crawler_tasks"},{"name":"host","value":"CYJ"},{"name":"thread","value":"23876-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_crawler_tasks"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"case","value":"{'case_id': 'task_015', 'name': '导出价格排名数据', 'method': 'GET', 'url': '/crawler/tasks/{task_id}/export', 'headers': {'Authorization': ''}, 'params': {'type': 'price-rank'}, 'expected_code': 200, 'expected_content_type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"5b28dbbd48508689.json","parameterValues":["{'case_id': 'task_015', 'name': '导出价格排名数据', 'method': 'GET', 'url': '/crawler/tasks/{task_id}/export', 'headers': {'Authorization': ''}, 'params': {'type': 'price-rank'}, 'expected_code': 200, 'expected_content_type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'}"]}