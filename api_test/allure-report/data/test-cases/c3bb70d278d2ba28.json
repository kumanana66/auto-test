{"uid":"c3bb70d278d2ba28","name":"test_user_auth[case5]","fullName":"tests.test_user_auth#test_user_auth","historyId":"8a2c8ed780679562e63c3bef7179ec4c","time":{"start":1753976728670,"stop":1753976729637,"duration":967},"status":"failed","statusMessage":"AssertionError: 状态码不符：预期200，实际500，完整response：<Response [500]>\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code","statusTrace":"case = {'case_id': 'auth_006', 'expected_code': 400, 'expected_message': '用户名格式无效（仅支持中文、英文、数字、下划线）', 'expected_success': False, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5NzY3MjcsImV4cCI6MTc1Mzk4MzkyN30.b-AFujNsdqpqD9b_X1BYMCVMEiac1ycu6MonXtQfOj4'\nsmall_jpg_image = 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmpb7irdy6s.jpg'\nlarge_jpg_image = 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmpw6ptm_5i.jpg'\nsmall_png_image = 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmpvvcn9256.png'\nlarge_png_image = 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmp_v5ci_zh.png'\nnon_image_file = 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmpouz8d2gs.txt'\n\n    @allure.feature(\"用户认证模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_user_auth(case, auth_token, small_jpg_image, large_jpg_image, small_png_image, large_png_image, non_image_file):\n        allure.story(case[\"name\"])\n        allure.title(f\"{case['case_id']}: {case['name']}\")\n    \n        # 文件映射：用例文件名 -> 实际测试文件\n        file_map = {\n            \"test_avatar.jpg\": small_jpg_image,\n            \"large_avatar.jpg\": large_jpg_image,\n            \"test_avatar.png\": small_png_image,\n            \"large_avatar.png\": large_png_image,\n            \"test_file.txt\": non_image_file\n        }\n    \n        # 预处理请求\n        request_data = preprocess_request(case, auth_token, file_map)\n    \n        # 注册用例单独处理验证码\n        if (case[\"case_id\"].startswith(\"auth_00\")\n            and case[\"method\"] == \"POST\"\n            and case[\"url\"] == \"/auth/register\"):\n    \n            # 获取注册邮箱\n            email = request_data[\"json\"][\"email\"]\n            # 发送并获取验证码\n>           verify_code = send_and_get_verify_code(email)\n\ntests\\test_user_auth.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\test_user_auth.py:19: in send_and_get_verify_code\n    assert_response(send_response, 200)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [500]>, expected_code = 200, expected_success = None\nexpected_message = None\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response}\"\nE       AssertionError: 状态码不符：预期200，实际500，完整response：<Response [500]>\nE       assert 500 == 200\nE        +  where 500 = <Response [500]>.status_code\n\nutils\\test_utils.py:7: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"auth_token","time":{"start":1753976726776,"stop":1753976727058,"duration":282},"status":"passed","steps":[{"name":"发送请求：'POST' '/auth/login'","time":{"start":1753976726777,"stop":1753976727056,"duration":279},"status":"passed","steps":[],"attachments":[{"uid":"2c23e4331869d4eb","name":"请求信息","source":"2c23e4331869d4eb.json","type":"application/json","size":64},{"uid":"352da337b08c8139","name":"响应信息","source":"352da337b08c8139.txt","type":"text/plain","size":20},{"uid":"32363a334971b4b8","name":"响应体","source":"32363a334971b4b8.json","type":"application/json","size":214}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/login'"},{"name":"headers","value":"None"},{"name":"params","value":"None"},{"name":"json","value":"{'username': 'admin1155', 'password': 'admin1155'}"},{"name":"files","value":"None"},{"name":"token","value":"None"}],"attachmentsCount":3,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":3,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":1},{"name":"small_jpg_image","time":{"start":1753976727059,"stop":1753976727227,"duration":168},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_jpg_image","time":{"start":1753976727228,"stop":1753976727899,"duration":671},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"small_png_image","time":{"start":1753976727899,"stop":1753976727961,"duration":62},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_png_image","time":{"start":1753976727961,"stop":1753976728667,"duration":706},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"non_image_file","time":{"start":1753976728667,"stop":1753976728669,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: 状态码不符：预期200，实际500，完整response：<Response [500]>\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code","statusTrace":"case = {'case_id': 'auth_006', 'expected_code': 400, 'expected_message': '用户名格式无效（仅支持中文、英文、数字、下划线）', 'expected_success': False, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5NzY3MjcsImV4cCI6MTc1Mzk4MzkyN30.b-AFujNsdqpqD9b_X1BYMCVMEiac1ycu6MonXtQfOj4'\nsmall_jpg_image = 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmpb7irdy6s.jpg'\nlarge_jpg_image = 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmpw6ptm_5i.jpg'\nsmall_png_image = 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmpvvcn9256.png'\nlarge_png_image = 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmp_v5ci_zh.png'\nnon_image_file = 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmpouz8d2gs.txt'\n\n    @allure.feature(\"用户认证模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_user_auth(case, auth_token, small_jpg_image, large_jpg_image, small_png_image, large_png_image, non_image_file):\n        allure.story(case[\"name\"])\n        allure.title(f\"{case['case_id']}: {case['name']}\")\n    \n        # 文件映射：用例文件名 -> 实际测试文件\n        file_map = {\n            \"test_avatar.jpg\": small_jpg_image,\n            \"large_avatar.jpg\": large_jpg_image,\n            \"test_avatar.png\": small_png_image,\n            \"large_avatar.png\": large_png_image,\n            \"test_file.txt\": non_image_file\n        }\n    \n        # 预处理请求\n        request_data = preprocess_request(case, auth_token, file_map)\n    \n        # 注册用例单独处理验证码\n        if (case[\"case_id\"].startswith(\"auth_00\")\n            and case[\"method\"] == \"POST\"\n            and case[\"url\"] == \"/auth/register\"):\n    \n            # 获取注册邮箱\n            email = request_data[\"json\"][\"email\"]\n            # 发送并获取验证码\n>           verify_code = send_and_get_verify_code(email)\n\ntests\\test_user_auth.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\test_user_auth.py:19: in send_and_get_verify_code\n    assert_response(send_response, 200)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [500]>, expected_code = 200, expected_success = None\nexpected_message = None\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response}\"\nE       AssertionError: 状态码不符：预期200，实际500，完整response：<Response [500]>\nE       assert 500 == 200\nE        +  where 500 = <Response [500]>.status_code\n\nutils\\test_utils.py:7: AssertionError","steps":[{"name":"从数据库获取验证码：'test_5926dc@example.com'","time":{"start":1753976728670,"stop":1753976728676,"duration":6},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"email","value":"'test_5926dc@example.com'"}],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"发送请求：'POST' '/auth/send-verify-code'","time":{"start":1753976728676,"stop":1753976729632,"duration":956},"status":"passed","steps":[],"attachments":[{"uid":"bd850ee5befc3727","name":"请求信息","source":"bd850ee5befc3727.json","type":"application/json","size":50},{"uid":"454bb5290805ae04","name":"响应信息","source":"454bb5290805ae04.txt","type":"text/plain","size":20},{"uid":"5c73193023101438","name":"响应体","source":"5c73193023101438.json","type":"application/json","size":81}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/send-verify-code'"},{"name":"headers","value":"None"},{"name":"params","value":"{'email': 'test_5926dc@example.com'}"},{"name":"json","value":"None"},{"name":"files","value":"None"},{"name":"token","value":"None"}],"attachmentsCount":3,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"验证响应：状态码200，消息None","time":{"start":1753976729634,"stop":1753976729634,"duration":0},"status":"failed","statusMessage":"AssertionError: 状态码不符：预期200，实际500，完整response：<Response [500]>\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code\n","statusTrace":"  File \"D:\\Anaconda3\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"D:\\工作记录\\项目说明\\api_test\\utils\\test_utils.py\", line 7, in assert_response\n    assert response.status_code == expected_code, \\\n","steps":[],"attachments":[],"parameters":[{"name":"response","value":"<Response [500]>"},{"name":"expected_code","value":"200"},{"name":"expected_success","value":"None"},{"name":"expected_message","value":"None"}],"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[{"uid":"7bc07625999bcee6","name":"stdout","source":"7bc07625999bcee6.txt","type":"text/plain","size":183}],"parameters":[],"attachmentsCount":4,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":3},"afterStages":[{"name":"non_image_file::0","time":{"start":1753976729702,"stop":1753976729704,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_png_image::0","time":{"start":1753976729719,"stop":1753976729734,"duration":15},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"small_png_image::0","time":{"start":1753976729737,"stop":1753976729739,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_jpg_image::0","time":{"start":1753976729742,"stop":1753976729751,"duration":9},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"small_jpg_image::0","time":{"start":1753976729753,"stop":1753976729756,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"labels":[{"name":"feature","value":"用户认证模块"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_user_auth"},{"name":"host","value":"CYJ"},{"name":"thread","value":"28204-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_user_auth"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"case","value":"{'case_id': 'auth_006', 'name': '用户名包含特殊符号', 'method': 'POST', 'url': '/auth/register', 'json': {'username': 'test@1', 'password': 'Test123456', 'email': 'test_5926dc@example.com', 'verifyCode': '{verify_code}'}, 'expected_code': 400, 'expected_success': False, 'expected_message': '用户名格式无效（仅支持中文、英文、数字、下划线）'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"c3bb70d278d2ba28.json","parameterValues":["{'case_id': 'auth_006', 'name': '用户名包含特殊符号', 'method': 'POST', 'url': '/auth/register', 'json': {'username': 'test@1', 'password': 'Test123456', 'email': 'test_5926dc@example.com', 'verifyCode': '{verify_code}'}, 'expected_code': 400, 'expected_success': False, 'expected_message': '用户名格式无效（仅支持中文、英文、数字、下划线）'}"]}