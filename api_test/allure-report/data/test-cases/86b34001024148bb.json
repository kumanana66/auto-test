{"uid":"86b34001024148bb","name":"test_crawler_tasks[case15]","fullName":"tests.test_crawler_tasks#test_crawler_tasks","historyId":"fb30c5193480a352814532b6b81a9b2d","time":{"start":1753987113992,"stop":1753987114010,"duration":18},"status":"failed","statusMessage":"AssertionError: 消息不符：预期数据分析已启动，实际操作成功，完整response：{\"success\":true,\"message\":\"操作成功\",\"data\":\"数据分析已启动\"}\nassert '操作成功' == '数据分析已启动'\n  - 数据分析已启动\n  + 操作成功","statusTrace":"case = {'case_id': 'task_016', 'expected_code': 200, 'expected_message': '数据分析已启动', 'expected_success': True, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODcxMTMsImV4cCI6MTc1Mzk5NDMxM30.mUhuwkt_nFcCnD_4DHOF7dOP0BtUuObYWFuAsvs7cRk'\n\n    @allure.feature(\"爬虫任务模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_crawler_tasks(case, auth_token):\n        allure.story(case[\"name\"])\n        allure.title(case[\"case_id\"] + \": \" + case[\"name\"])\n    \n        # 替换任务ID占位符\n        if \"{task_id}\" in case[\"url\"]:\n            # 先创建一个测试任务获取ID\n            from utils.context import context\n            if not context.get(\"task_id\"):\n                create_response = Request.send_request(\n                    \"POST\", \"/crawler/tasks\",\n                    json={\n                        \"processName\": \"测试任务\",\n                        \"asinList\": \"B08XJ8J7SZ\",\n                        \"requiredInfo\": [\"price\"],\n                        \"platform\": \"Amazon\",\n                        \"timeCycle\": \"daily\"\n                    },\n                    token=auth_token\n                )\n                context.set(\"task_id\", create_response.json()[\"data\"][\"id\"])\n            task_id = context.get(\"task_id\")\n            case[\"url\"] = case[\"url\"].replace(\"{task_id}\", str(task_id))\n    \n        # 预处理请求\n        request_data = preprocess_request(case, auth_token)\n    \n        # 发送请求\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            token=auth_token\n        )\n    \n        # 断言\n>       assert_response(\n            response,\n            expected_code=case[\"expected_code\"],\n            expected_success=case.get(\"expected_success\"),\n            expected_message=case.get(\"expected_message\")\n        )\n\ntests\\test_crawler_tasks.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [200]>, expected_code = 200\nexpected_success = True, expected_message = '数据分析已启动'\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n        assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response.text}\"\n    \n        if response.status_code != 200:\n            return\n    \n        try:\n            json_data = response.json()\n        except:\n            assert False, f\"响应不是有效的JSON格式: {response.text}\"\n    \n        if expected_success is not None:\n            assert json_data.get(\"success\") == expected_success, \\\n                f\"success字段不符：预期{expected_success}，实际{json_data.get('success')}，完整response：{response.text}\"\n    \n        if expected_message:\n>           assert json_data.get(\"message\") == expected_message, \\\n                f\"消息不符：预期{expected_message}，实际{json_data.get('message')}，完整response：{response.text}\"\nE           AssertionError: 消息不符：预期数据分析已启动，实际操作成功，完整response：{\"success\":true,\"message\":\"操作成功\",\"data\":\"数据分析已启动\"}\nE           assert '操作成功' == '数据分析已启动'\nE             - 数据分析已启动\nE             + 操作成功\n\nutils\\test_utils.py:23: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"auth_token","time":{"start":1753987113799,"stop":1753987113991,"duration":192},"status":"passed","steps":[{"name":"发送请求：'POST' '/auth/login'","time":{"start":1753987113800,"stop":1753987113990,"duration":190},"status":"passed","steps":[],"attachments":[{"uid":"c2981d2511ca7c89","name":"请求信息","source":"c2981d2511ca7c89.txt","type":"text/plain","size":41},{"uid":"7d92757c3183b54e","name":"请求头","source":"7d92757c3183b54e.txt","type":"text/plain","size":45},{"uid":"bedd73c9ae3bd069","name":"请求参数","source":"bedd73c9ae3bd069.json","type":"application/json","size":58},{"uid":"a3211414b4b5ab8c","name":"响应信息","source":"a3211414b4b5ab8c.txt","type":"text/plain","size":14},{"uid":"ba422ff0c618bf02","name":"响应体","source":"ba422ff0c618bf02.json","type":"application/json","size":214}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/login'"},{"name":"headers","value":"None"},{"name":"params","value":"None"},{"name":"json","value":"{'username': 'admin1155', 'password': 'admin1155'}"},{"name":"files","value":"None"},{"name":"token","value":"None"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":1}],"testStage":{"status":"failed","statusMessage":"AssertionError: 消息不符：预期数据分析已启动，实际操作成功，完整response：{\"success\":true,\"message\":\"操作成功\",\"data\":\"数据分析已启动\"}\nassert '操作成功' == '数据分析已启动'\n  - 数据分析已启动\n  + 操作成功","statusTrace":"case = {'case_id': 'task_016', 'expected_code': 200, 'expected_message': '数据分析已启动', 'expected_success': True, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODcxMTMsImV4cCI6MTc1Mzk5NDMxM30.mUhuwkt_nFcCnD_4DHOF7dOP0BtUuObYWFuAsvs7cRk'\n\n    @allure.feature(\"爬虫任务模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_crawler_tasks(case, auth_token):\n        allure.story(case[\"name\"])\n        allure.title(case[\"case_id\"] + \": \" + case[\"name\"])\n    \n        # 替换任务ID占位符\n        if \"{task_id}\" in case[\"url\"]:\n            # 先创建一个测试任务获取ID\n            from utils.context import context\n            if not context.get(\"task_id\"):\n                create_response = Request.send_request(\n                    \"POST\", \"/crawler/tasks\",\n                    json={\n                        \"processName\": \"测试任务\",\n                        \"asinList\": \"B08XJ8J7SZ\",\n                        \"requiredInfo\": [\"price\"],\n                        \"platform\": \"Amazon\",\n                        \"timeCycle\": \"daily\"\n                    },\n                    token=auth_token\n                )\n                context.set(\"task_id\", create_response.json()[\"data\"][\"id\"])\n            task_id = context.get(\"task_id\")\n            case[\"url\"] = case[\"url\"].replace(\"{task_id}\", str(task_id))\n    \n        # 预处理请求\n        request_data = preprocess_request(case, auth_token)\n    \n        # 发送请求\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            token=auth_token\n        )\n    \n        # 断言\n>       assert_response(\n            response,\n            expected_code=case[\"expected_code\"],\n            expected_success=case.get(\"expected_success\"),\n            expected_message=case.get(\"expected_message\")\n        )\n\ntests\\test_crawler_tasks.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [200]>, expected_code = 200\nexpected_success = True, expected_message = '数据分析已启动'\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n        assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response.text}\"\n    \n        if response.status_code != 200:\n            return\n    \n        try:\n            json_data = response.json()\n        except:\n            assert False, f\"响应不是有效的JSON格式: {response.text}\"\n    \n        if expected_success is not None:\n            assert json_data.get(\"success\") == expected_success, \\\n                f\"success字段不符：预期{expected_success}，实际{json_data.get('success')}，完整response：{response.text}\"\n    \n        if expected_message:\n>           assert json_data.get(\"message\") == expected_message, \\\n                f\"消息不符：预期{expected_message}，实际{json_data.get('message')}，完整response：{response.text}\"\nE           AssertionError: 消息不符：预期数据分析已启动，实际操作成功，完整response：{\"success\":true,\"message\":\"操作成功\",\"data\":\"数据分析已启动\"}\nE           assert '操作成功' == '数据分析已启动'\nE             - 数据分析已启动\nE             + 操作成功\n\nutils\\test_utils.py:23: AssertionError","steps":[{"name":"发送请求：'POST' '/crawler/tasks/249/analyze'","time":{"start":1753987113992,"stop":1753987114008,"duration":16},"status":"passed","steps":[],"attachments":[{"uid":"d3f74b50b28a16ec","name":"请求信息","source":"d3f74b50b28a16ec.txt","type":"text/plain","size":56},{"uid":"b4bf3c81d8223a42","name":"请求头","source":"b4bf3c81d8223a42.txt","type":"text/plain","size":209},{"uid":"7b4e6d5f1f7a3d7f","name":"请求参数","source":"7b4e6d5f1f7a3d7f.json","type":"application/json","size":10},{"uid":"1c267edc98cf0472","name":"响应信息","source":"1c267edc98cf0472.txt","type":"text/plain","size":14},{"uid":"f7574dbea170096","name":"响应体","source":"f7574dbea170096.json","type":"application/json","size":72}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/crawler/tasks/249/analyze'"},{"name":"headers","value":"{}"},{"name":"params","value":"{}"},{"name":"json","value":"{}"},{"name":"files","value":"None"},{"name":"token","value":"'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODcxMTMsImV4cCI6MTc1Mzk5NDMxM30.mUhuwkt_nFcCnD_4DHOF7dOP0BtUuObYWFuAsvs7cRk'"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"验证响应：状态码200，消息'数据分析已启动'","time":{"start":1753987114008,"stop":1753987114009,"duration":1},"status":"failed","statusMessage":"AssertionError: 消息不符：预期数据分析已启动，实际操作成功，完整response：{\"success\":true,\"message\":\"操作成功\",\"data\":\"数据分析已启动\"}\nassert '操作成功' == '数据分析已启动'\n  - 数据分析已启动\n  + 操作成功\n","statusTrace":"  File \"D:\\Anaconda3\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"D:\\工作记录\\项目说明\\api_test\\utils\\test_utils.py\", line 23, in assert_response\n    assert json_data.get(\"message\") == expected_message, \\\n","steps":[],"attachments":[],"parameters":[{"name":"response","value":"<Response [200]>"},{"name":"expected_code","value":"200"},{"name":"expected_success","value":"True"},{"name":"expected_message","value":"'数据分析已启动'"}],"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[{"uid":"5b0411255b45427e","name":"log","source":"5b0411255b45427e.txt","type":"text/plain","size":1169},{"uid":"d7e1045df483e856","name":"stdout","source":"d7e1045df483e856.txt","type":"text/plain","size":183},{"uid":"34dd619b2c7949e5","name":"stderr","source":"34dd619b2c7949e5.txt","type":"text/plain","size":927}],"parameters":[],"attachmentsCount":8,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":2},"afterStages":[],"labels":[{"name":"feature","value":"爬虫任务模块"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_crawler_tasks"},{"name":"host","value":"CYJ"},{"name":"thread","value":"24408-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_crawler_tasks"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"case","value":"{'case_id': 'task_016', 'name': '执行数据分析并下载PPT', 'method': 'POST', 'url': '/crawler/tasks/{task_id}/analyze', 'headers': {'Authorization': ''}, 'expected_code': 200, 'expected_success': True, 'expected_message': '数据分析已启动'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"86b34001024148bb.json","parameterValues":["{'case_id': 'task_016', 'name': '执行数据分析并下载PPT', 'method': 'POST', 'url': '/crawler/tasks/{task_id}/analyze', 'headers': {'Authorization': ''}, 'expected_code': 200, 'expected_success': True, 'expected_message': '数据分析已启动'}"]}