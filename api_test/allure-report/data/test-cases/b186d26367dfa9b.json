{"uid":"b186d26367dfa9b","name":"test_user_auth[case23]","fullName":"tests.test_user_auth#test_user_auth","historyId":"4af971bc013669d4fd30f4c35de6dde1","time":{"start":1753986238441,"stop":1753986238499,"duration":58},"status":"failed","statusMessage":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","statusTrace":"case = {'case_id': 'auth_024', 'expected_code': 200, 'expected_content_type': 'application/json', 'expected_success': True, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODYyMzcsImV4cCI6MTc1Mzk5MzQzN30.9y2gK5D1ey-5-tu-Gs4lHZ4F0HAPAu1k8L8hRUAxXO0'\nsmall_jpg_image = 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmpodadrnuh.jpg'\nlarge_jpg_image = 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmpyfenexdg.jpg'\nsmall_png_image = 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmpme6cik3i.png'\nlarge_png_image = 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmp76g4r6of.png'\nnon_image_file = 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmpia3xyxvm.txt'\n\n    @allure.feature(\"用户认证模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_user_auth(case, auth_token, small_jpg_image, large_jpg_image, small_png_image, large_png_image, non_image_file):\n        allure.story(case[\"name\"])\n        allure.title(f\"{case['case_id']}: {case['name']}\")\n        logger.info(f\"开始执行用例: {case['case_id']} - {case['name']}\")\n    \n        # 文件映射\n        file_map = {\n            \"test_avatar.jpg\": small_jpg_image,\n            \"large_avatar.jpg\": large_jpg_image,\n            \"test_avatar.png\": small_png_image,\n            \"large_avatar.png\": large_png_image,\n            \"test_file.txt\": non_image_file\n        }\n    \n        # 预处理请求\n        request_data = preprocess_request(case, auth_token, file_map)\n    \n        # 注册用例处理验证码\n        if (case[\"case_id\"].startswith(\"auth_00\")\n            and case[\"method\"] == \"POST\"\n            and case[\"url\"] == \"/auth/register\"):\n    \n            email = request_data[\"json\"][\"email\"]\n            verify_code = send_and_get_verify_code(email)\n            request_data[\"json\"][\"verifyCode\"] = verify_code\n            logger.info(f\"为注册邮箱 {email} 填充验证码: {verify_code}\")\n    \n        # 4. auth_029：未登录状态上传头像\n        use_token = case[\"case_id\"] != \"auth_029\"\n        logger.info(f\"是否使用Token: {use_token}\")\n        current_token = auth_token if use_token else None\n    \n        # 发送请求\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            files=request_data.get(\"files\"),\n            token=current_token\n        )\n    \n        # 5. 增强断言信息（便于定位问题）\n        try:\n>           assert_response(\n                response,\n                expected_code=case[\"expected_code\"],\n                expected_success=case.get(\"expected_success\"),\n                expected_message=case.get(\"expected_message\")\n            )\n\ntests\\test_user_auth.py:75: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [403]>, expected_code = 200\nexpected_success = True, expected_message = None\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response}\"\nE       AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nE       assert 403 == 200\nE        +  where 403 = <Response [403]>.status_code\n\nutils\\test_utils.py:7: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":20,"retriesStatusChange":true,"beforeStages":[{"name":"auth_token","time":{"start":1753986236909,"stop":1753986237124,"duration":215},"status":"passed","steps":[{"name":"发送请求：'POST' '/auth/login'","time":{"start":1753986236909,"stop":1753986237123,"duration":214},"status":"passed","steps":[],"attachments":[{"uid":"f7940882e2a90d36","name":"请求信息","source":"f7940882e2a90d36.txt","type":"text/plain","size":41},{"uid":"29ce6b20c0f60459","name":"请求头","source":"29ce6b20c0f60459.txt","type":"text/plain","size":45},{"uid":"550613a176611364","name":"请求参数","source":"550613a176611364.json","type":"application/json","size":58},{"uid":"a3dbd98659fdb092","name":"响应信息","source":"a3dbd98659fdb092.txt","type":"text/plain","size":14},{"uid":"4244690bfdf83280","name":"响应体","source":"4244690bfdf83280.json","type":"application/json","size":214}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/login'"},{"name":"headers","value":"None"},{"name":"params","value":"None"},{"name":"json","value":"{'username': 'admin1155', 'password': 'admin1155'}"},{"name":"files","value":"None"},{"name":"token","value":"None"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":1},{"name":"small_jpg_image","time":{"start":1753986237124,"stop":1753986237255,"duration":131},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_jpg_image","time":{"start":1753986237255,"stop":1753986237777,"duration":522},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"small_png_image","time":{"start":1753986237777,"stop":1753986237848,"duration":71},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_png_image","time":{"start":1753986237848,"stop":1753986238434,"duration":586},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"non_image_file","time":{"start":1753986238434,"stop":1753986238438,"duration":4},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","statusTrace":"case = {'case_id': 'auth_024', 'expected_code': 200, 'expected_content_type': 'application/json', 'expected_success': True, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODYyMzcsImV4cCI6MTc1Mzk5MzQzN30.9y2gK5D1ey-5-tu-Gs4lHZ4F0HAPAu1k8L8hRUAxXO0'\nsmall_jpg_image = 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmpodadrnuh.jpg'\nlarge_jpg_image = 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmpyfenexdg.jpg'\nsmall_png_image = 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmpme6cik3i.png'\nlarge_png_image = 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmp76g4r6of.png'\nnon_image_file = 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmpia3xyxvm.txt'\n\n    @allure.feature(\"用户认证模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_user_auth(case, auth_token, small_jpg_image, large_jpg_image, small_png_image, large_png_image, non_image_file):\n        allure.story(case[\"name\"])\n        allure.title(f\"{case['case_id']}: {case['name']}\")\n        logger.info(f\"开始执行用例: {case['case_id']} - {case['name']}\")\n    \n        # 文件映射\n        file_map = {\n            \"test_avatar.jpg\": small_jpg_image,\n            \"large_avatar.jpg\": large_jpg_image,\n            \"test_avatar.png\": small_png_image,\n            \"large_avatar.png\": large_png_image,\n            \"test_file.txt\": non_image_file\n        }\n    \n        # 预处理请求\n        request_data = preprocess_request(case, auth_token, file_map)\n    \n        # 注册用例处理验证码\n        if (case[\"case_id\"].startswith(\"auth_00\")\n            and case[\"method\"] == \"POST\"\n            and case[\"url\"] == \"/auth/register\"):\n    \n            email = request_data[\"json\"][\"email\"]\n            verify_code = send_and_get_verify_code(email)\n            request_data[\"json\"][\"verifyCode\"] = verify_code\n            logger.info(f\"为注册邮箱 {email} 填充验证码: {verify_code}\")\n    \n        # 4. auth_029：未登录状态上传头像\n        use_token = case[\"case_id\"] != \"auth_029\"\n        logger.info(f\"是否使用Token: {use_token}\")\n        current_token = auth_token if use_token else None\n    \n        # 发送请求\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            files=request_data.get(\"files\"),\n            token=current_token\n        )\n    \n        # 5. 增强断言信息（便于定位问题）\n        try:\n>           assert_response(\n                response,\n                expected_code=case[\"expected_code\"],\n                expected_success=case.get(\"expected_success\"),\n                expected_message=case.get(\"expected_message\")\n            )\n\ntests\\test_user_auth.py:75: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [403]>, expected_code = 200\nexpected_success = True, expected_message = None\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response}\"\nE       AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nE       assert 403 == 200\nE        +  where 403 = <Response [403]>.status_code\n\nutils\\test_utils.py:7: AssertionError","steps":[{"name":"发送请求：'POST' '/auth/upload/avatar'","time":{"start":1753986238443,"stop":1753986238482,"duration":39},"status":"passed","steps":[],"attachments":[{"uid":"7850b5a552f3cbd5","name":"请求信息","source":"7850b5a552f3cbd5.txt","type":"text/plain","size":49},{"uid":"bdc6364bba6b32e7","name":"请求头","source":"bdc6364bba6b32e7.txt","type":"text/plain","size":37},{"uid":"bb14450a090ab54a","name":"请求参数","source":"bb14450a090ab54a.json","type":"application/json","size":10},{"uid":"77c7fff68eb421f3","name":"响应信息","source":"77c7fff68eb421f3.txt","type":"text/plain","size":14},{"uid":"1a843c7f1f5af053","name":"响应体","source":"1a843c7f1f5af053.json","type":"application/json","size":0}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/upload/avatar'"},{"name":"headers","value":"{'Authorization': 'Bearer ', 'Content-Type': 'multipart/form-data'}"},{"name":"params","value":"{}"},{"name":"json","value":"{}"},{"name":"files","value":"{'file': <_io.BufferedReader name='C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmpodadrnuh.jpg'>}"},{"name":"token","value":"'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODYyMzcsImV4cCI6MTc1Mzk5MzQzN30.9y2gK5D1ey-5-tu-Gs4lHZ4F0HAPAu1k8L8hRUAxXO0'"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"验证响应：状态码200，消息None","time":{"start":1753986238483,"stop":1753986238484,"duration":1},"status":"failed","statusMessage":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code\n","statusTrace":"  File \"D:\\Anaconda3\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"D:\\工作记录\\项目说明\\api_test\\utils\\test_utils.py\", line 7, in assert_response\n    assert response.status_code == expected_code, \\\n","steps":[],"attachments":[],"parameters":[{"name":"response","value":"<Response [403]>"},{"name":"expected_code","value":"200"},{"name":"expected_success","value":"True"},{"name":"expected_message","value":"None"}],"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[{"uid":"5fc351bda82e237","name":"失败信息","source":"5fc351bda82e237.txt","type":"text/plain","size":18},{"uid":"ade0fdbe05401614","name":"调试信息","source":"ade0fdbe05401614.txt","type":"text/plain","size":17},{"uid":"7e2ff5643b946b16","name":"log","source":"7e2ff5643b946b16.txt","type":"text/plain","size":1344},{"uid":"676b08ed89448830","name":"stdout","source":"676b08ed89448830.txt","type":"text/plain","size":235},{"uid":"16e14b24fa54eac9","name":"stderr","source":"16e14b24fa54eac9.txt","type":"text/plain","size":1078}],"parameters":[],"attachmentsCount":10,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":2},"afterStages":[{"name":"non_image_file::0","time":{"start":1753986238547,"stop":1753986238551,"duration":4},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_png_image::0","time":{"start":1753986238555,"stop":1753986238571,"duration":16},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"small_png_image::0","time":{"start":1753986238574,"stop":1753986238577,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_jpg_image::0","time":{"start":1753986238581,"stop":1753986238589,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"small_jpg_image::0","time":{"start":1753986238592,"stop":1753986238637,"duration":45},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"labels":[{"name":"feature","value":"用户认证模块"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_user_auth"},{"name":"host","value":"CYJ"},{"name":"thread","value":"3924-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_user_auth"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"case","value":"{'case_id': 'auth_024', 'name': '上传2MB以内的JPG图片', 'method': 'POST', 'url': '/auth/upload/avatar', 'headers': {'Authorization': 'Bearer ', 'Content-Type': 'multipart/form-data'}, 'files': {'file': 'test_avatar.jpg'}, 'expected_code': 200, 'expected_success': True, 'expected_content_type': 'application/json'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"e9e37a68df792a7d","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753985540184,"stop":1753985540197,"duration":13}},{"uid":"9173ae6fa68d9601","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753976489681,"stop":1753976489696,"duration":15}},{"uid":"50a6255f8bdb1c20","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753976341043,"stop":1753976341057,"duration":14}},{"uid":"57d83ccead6c1bc1","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753975907580,"stop":1753975907617,"duration":37}},{"uid":"c0425be116cca4c5","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753974402315,"stop":1753974402347,"duration":32}},{"uid":"4fe5078145cedf97","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753973825114,"stop":1753973825147,"duration":33}},{"uid":"d7557cfd5b724b4d","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753973672674,"stop":1753973672727,"duration":53}},{"uid":"265fb11f53dfc5b7","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753972610429,"stop":1753972610461,"duration":32}},{"uid":"7179fe2909c3d7b5","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753971277624,"stop":1753971277641,"duration":17}},{"uid":"9e6d9eb6158c2aa0","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403，完整response:<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753970526602,"stop":1753970526634,"duration":32}},{"uid":"81722a9a9e0733ca","status":"broken","statusDetails":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1753970302296,"stop":1753970302358,"duration":62}},{"uid":"88b405554e6ea4ce","status":"broken","statusDetails":"UnboundLocalError: cannot access local variable 'json_data' where it is not associated with a value","time":{"start":1753969967264,"stop":1753969967321,"duration":57}},{"uid":"1761e922e59dc142","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753969634077,"stop":1753969634119,"duration":42}},{"uid":"ac6cb0259371968c","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753969400861,"stop":1753969400911,"duration":50}},{"uid":"56aa5834b4aa91c9","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753969138991,"stop":1753969139009,"duration":18}},{"uid":"f67c782e5af11e56","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753968181005,"stop":1753968181042,"duration":37}},{"uid":"ac67cb0fadab9c66","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753967371691,"stop":1753967371714,"duration":23}},{"uid":"70d7f741495c23f","status":"broken","statusDetails":"KeyError: 'url'","time":{"start":1753967267669,"stop":1753967267669,"duration":0}},{"uid":"9c9725936a79875f","status":"broken","statusDetails":"requests.exceptions.ConnectionError: HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /api/auth/login (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x000001657E09DE50>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。'))","time":{"start":1753967194266,"stop":1753967194266,"duration":0}},{"uid":"f53260de983c0e85","status":"broken","statusDetails":"KeyError: 'url'","time":{"start":1753966889913,"stop":1753966889913,"duration":0}}],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"b186d26367dfa9b.json","parameterValues":["{'case_id': 'auth_024', 'name': '上传2MB以内的JPG图片', 'method': 'POST', 'url': '/auth/upload/avatar', 'headers': {'Authorization': 'Bearer ', 'Content-Type': 'multipart/form-data'}, 'files': {'file': 'test_avatar.jpg'}, 'expected_code': 200, 'expected_success': True, 'expected_content_type': 'application/json'}"]}