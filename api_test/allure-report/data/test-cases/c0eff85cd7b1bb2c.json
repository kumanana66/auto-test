{"uid":"c0eff85cd7b1bb2c","name":"test_crawler_tasks[case4]","fullName":"tests.test_crawler_tasks#test_crawler_tasks","historyId":"0bdb0a6f0a6aafab65367620073031c1","time":{"start":1753987110241,"stop":1753987110277,"duration":36},"status":"failed","statusMessage":"AssertionError: 状态码不符：预期403，实际500，完整response：{\"success\":false,\"message\":\"系统异常，请稍后重试\",\"data\":null}\nassert 500 == 403\n +  where 500 = <Response [500]>.status_code","statusTrace":"case = {'case_id': 'task_005', 'expected_code': 403, 'expected_message': '请选择抓取平台', 'expected_success': False, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODcxMTAsImV4cCI6MTc1Mzk5NDMxMH0.3yk0aLj1Ifmn47xUMK2nov1ss5mMveXwd1sOPPbiYqw'\n\n    @allure.feature(\"爬虫任务模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_crawler_tasks(case, auth_token):\n        allure.story(case[\"name\"])\n        allure.title(case[\"case_id\"] + \": \" + case[\"name\"])\n    \n        # 替换任务ID占位符\n        if \"{task_id}\" in case[\"url\"]:\n            # 先创建一个测试任务获取ID\n            from utils.context import context\n            if not context.get(\"task_id\"):\n                create_response = Request.send_request(\n                    \"POST\", \"/crawler/tasks\",\n                    json={\n                        \"processName\": \"测试任务\",\n                        \"asinList\": \"B08XJ8J7SZ\",\n                        \"requiredInfo\": [\"price\"],\n                        \"platform\": \"Amazon\",\n                        \"timeCycle\": \"daily\"\n                    },\n                    token=auth_token\n                )\n                context.set(\"task_id\", create_response.json()[\"data\"][\"id\"])\n            task_id = context.get(\"task_id\")\n            case[\"url\"] = case[\"url\"].replace(\"{task_id}\", str(task_id))\n    \n        # 预处理请求\n        request_data = preprocess_request(case, auth_token)\n    \n        # 发送请求\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            token=auth_token\n        )\n    \n        # 断言\n>       assert_response(\n            response,\n            expected_code=case[\"expected_code\"],\n            expected_success=case.get(\"expected_success\"),\n            expected_message=case.get(\"expected_message\")\n        )\n\ntests\\test_crawler_tasks.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [500]>, expected_code = 403\nexpected_success = False, expected_message = '请选择抓取平台'\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response.text}\"\nE       AssertionError: 状态码不符：预期403，实际500，完整response：{\"success\":false,\"message\":\"系统异常，请稍后重试\",\"data\":null}\nE       assert 500 == 403\nE        +  where 500 = <Response [500]>.status_code\n\nutils\\test_utils.py:7: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"auth_token","time":{"start":1753987110002,"stop":1753987110241,"duration":239},"status":"passed","steps":[{"name":"发送请求：'POST' '/auth/login'","time":{"start":1753987110002,"stop":1753987110240,"duration":238},"status":"passed","steps":[],"attachments":[{"uid":"2be8a1ae95aee0c0","name":"请求信息","source":"2be8a1ae95aee0c0.txt","type":"text/plain","size":41},{"uid":"f72935c415af381e","name":"请求头","source":"f72935c415af381e.txt","type":"text/plain","size":45},{"uid":"eb3429e137deb896","name":"请求参数","source":"eb3429e137deb896.json","type":"application/json","size":58},{"uid":"846b89c8f9cf7c69","name":"响应信息","source":"846b89c8f9cf7c69.txt","type":"text/plain","size":14},{"uid":"3e7e4f22d0603612","name":"响应体","source":"3e7e4f22d0603612.json","type":"application/json","size":214}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/login'"},{"name":"headers","value":"None"},{"name":"params","value":"None"},{"name":"json","value":"{'username': 'admin1155', 'password': 'admin1155'}"},{"name":"files","value":"None"},{"name":"token","value":"None"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":1}],"testStage":{"status":"failed","statusMessage":"AssertionError: 状态码不符：预期403，实际500，完整response：{\"success\":false,\"message\":\"系统异常，请稍后重试\",\"data\":null}\nassert 500 == 403\n +  where 500 = <Response [500]>.status_code","statusTrace":"case = {'case_id': 'task_005', 'expected_code': 403, 'expected_message': '请选择抓取平台', 'expected_success': False, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODcxMTAsImV4cCI6MTc1Mzk5NDMxMH0.3yk0aLj1Ifmn47xUMK2nov1ss5mMveXwd1sOPPbiYqw'\n\n    @allure.feature(\"爬虫任务模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_crawler_tasks(case, auth_token):\n        allure.story(case[\"name\"])\n        allure.title(case[\"case_id\"] + \": \" + case[\"name\"])\n    \n        # 替换任务ID占位符\n        if \"{task_id}\" in case[\"url\"]:\n            # 先创建一个测试任务获取ID\n            from utils.context import context\n            if not context.get(\"task_id\"):\n                create_response = Request.send_request(\n                    \"POST\", \"/crawler/tasks\",\n                    json={\n                        \"processName\": \"测试任务\",\n                        \"asinList\": \"B08XJ8J7SZ\",\n                        \"requiredInfo\": [\"price\"],\n                        \"platform\": \"Amazon\",\n                        \"timeCycle\": \"daily\"\n                    },\n                    token=auth_token\n                )\n                context.set(\"task_id\", create_response.json()[\"data\"][\"id\"])\n            task_id = context.get(\"task_id\")\n            case[\"url\"] = case[\"url\"].replace(\"{task_id}\", str(task_id))\n    \n        # 预处理请求\n        request_data = preprocess_request(case, auth_token)\n    \n        # 发送请求\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            token=auth_token\n        )\n    \n        # 断言\n>       assert_response(\n            response,\n            expected_code=case[\"expected_code\"],\n            expected_success=case.get(\"expected_success\"),\n            expected_message=case.get(\"expected_message\")\n        )\n\ntests\\test_crawler_tasks.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [500]>, expected_code = 403\nexpected_success = False, expected_message = '请选择抓取平台'\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response.text}\"\nE       AssertionError: 状态码不符：预期403，实际500，完整response：{\"success\":false,\"message\":\"系统异常，请稍后重试\",\"data\":null}\nE       assert 500 == 403\nE        +  where 500 = <Response [500]>.status_code\n\nutils\\test_utils.py:7: AssertionError","steps":[{"name":"发送请求：'POST' '/crawler/tasks'","time":{"start":1753987110242,"stop":1753987110274,"duration":32},"status":"passed","steps":[],"attachments":[{"uid":"d40f8e4c40ca0386","name":"请求信息","source":"d40f8e4c40ca0386.txt","type":"text/plain","size":44},{"uid":"a6101973cfc9fbd5","name":"请求头","source":"a6101973cfc9fbd5.txt","type":"text/plain","size":209},{"uid":"218961343a21e22b","name":"请求参数","source":"218961343a21e22b.json","type":"application/json","size":138},{"uid":"4b2a0dd137e3e73e","name":"响应信息","source":"4b2a0dd137e3e73e.txt","type":"text/plain","size":14},{"uid":"e49551ac01a93c59","name":"响应体","source":"e49551ac01a93c59.json","type":"application/json","size":72}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/crawler/tasks'"},{"name":"headers","value":"{}"},{"name":"params","value":"{}"},{"name":"json","value":"{'processName': '亚马逊监控', 'asinList': 'B08XJ8J7SZ,B08LGD78Q5', 'requiredInfo': ['price', 'review'], 'timeCycle': 'daily'}"},{"name":"files","value":"None"},{"name":"token","value":"'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODcxMTAsImV4cCI6MTc1Mzk5NDMxMH0.3yk0aLj1Ifmn47xUMK2nov1ss5mMveXwd1sOPPbiYqw'"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"验证响应：状态码403，消息'请选择抓取平台'","time":{"start":1753987110275,"stop":1753987110275,"duration":0},"status":"failed","statusMessage":"AssertionError: 状态码不符：预期403，实际500，完整response：{\"success\":false,\"message\":\"系统异常，请稍后重试\",\"data\":null}\nassert 500 == 403\n +  where 500 = <Response [500]>.status_code\n","statusTrace":"  File \"D:\\Anaconda3\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"D:\\工作记录\\项目说明\\api_test\\utils\\test_utils.py\", line 7, in assert_response\n    assert response.status_code == expected_code, \\\n","steps":[],"attachments":[],"parameters":[{"name":"response","value":"<Response [500]>"},{"name":"expected_code","value":"403"},{"name":"expected_success","value":"False"},{"name":"expected_message","value":"'请选择抓取平台'"}],"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[{"uid":"c0bb8005346cbf42","name":"log","source":"c0bb8005346cbf42.txt","type":"text/plain","size":1157},{"uid":"9c7b3e5094e1decc","name":"stdout","source":"9c7b3e5094e1decc.txt","type":"text/plain","size":183},{"uid":"784323316f68d733","name":"stderr","source":"784323316f68d733.txt","type":"text/plain","size":915}],"parameters":[],"attachmentsCount":8,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":2},"afterStages":[],"labels":[{"name":"feature","value":"爬虫任务模块"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_crawler_tasks"},{"name":"host","value":"CYJ"},{"name":"thread","value":"24408-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_crawler_tasks"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"case","value":"{'case_id': 'task_005', 'name': '平台未选择', 'method': 'POST', 'url': '/crawler/tasks', 'headers': {'Authorization': ''}, 'json': {'processName': '亚马逊监控', 'asinList': 'B08XJ8J7SZ,B08LGD78Q5', 'requiredInfo': ['price', 'review'], 'timeCycle': 'daily'}, 'expected_code': 403, 'expected_success': False, 'expected_message': '请选择抓取平台'}"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"c0eff85cd7b1bb2c.json","parameterValues":["{'case_id': 'task_005', 'name': '平台未选择', 'method': 'POST', 'url': '/crawler/tasks', 'headers': {'Authorization': ''}, 'json': {'processName': '亚马逊监控', 'asinList': 'B08XJ8J7SZ,B08LGD78Q5', 'requiredInfo': ['price', 'review'], 'timeCycle': 'daily'}, 'expected_code': 403, 'expected_success': False, 'expected_message': '请选择抓取平台'}"]}