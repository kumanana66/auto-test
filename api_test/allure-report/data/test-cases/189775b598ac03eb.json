{"uid":"189775b598ac03eb","name":"test_user_auth[case2]","fullName":"tests.test_user_auth#test_user_auth","historyId":"8c71e2fe86f385f71549e2424ba5807a","time":{"start":1753987853513,"stop":1753987853546,"duration":33},"status":"failed","statusMessage":"AssertionError: 状态码不符：预期200，实际400，完整response：{\"success\":false,\"message\":\"验证码不能为空\",\"data\":null}\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"case = {'case_id': 'auth_003', 'expected_code': 200, 'expected_message': '注册成功', 'expected_success': True, ...}\ntest_user = {'email': 'test_lwoerd@example.com', 'token': 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0ZXN0X2x3b2VyZCIsImlhdCI6MTc1Mzk4Nzg1MiwiZXhwIjoxNzUzOTk1MDUyfQ.0mcVZgKp2_c6lDUOzETLR5eg6Gi_yTRHdlU3cddqlrw', 'username': 'test_lwoerd'}\nimage_fixtures = {'large_jpg_image': 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmpk6fxtst_.jpg', 'large_png_image': 'C:\\\\Users\\\\huawei\\...ata\\\\Local\\\\Temp\\\\tmpj8iridua.txt', 'small_jpg_image': 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmp9jjf9dsc.jpg', ...}\n\n    @allure.feature(\"用户认证模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_user_auth(case, test_user, image_fixtures):  # 使用test_user而非auth_token\n        allure.story(case[\"name\"])\n        allure.title(f\"{case['case_id']}: {case['name']}\")\n        logger.info(f\"开始执行用例: {case['case_id']} - {case['name']}\")\n    \n        # 1. 文件映射（仅文件上传用例需要）\n        file_map = {\n            \"test_avatar.jpg\": image_fixtures[\"small_jpg_image\"],\n            \"large_avatar.jpg\": image_fixtures[\"large_jpg_image\"],\n            \"test_avatar.png\": image_fixtures[\"small_png_image\"],\n            \"large_avatar.png\": image_fixtures[\"large_png_image\"],\n            \"test_file.txt\": image_fixtures[\"non_image_file\"]\n        }\n    \n        # 2. 预处理请求\n        request_data = preprocess_request(case, test_user[\"token\"], file_map)  # 使用测试用户的token\n    \n        # 3. 处理所有需要验证码的场景（覆盖注册、更新密码等）\n        json_data = request_data.get(\"json\", {})\n        if \"verifyCode\" in json_data and json_data[\"verifyCode\"] == \"{verify_code}\":\n            email = json_data.get(\"email\", test_user[\"email\"])  # 优先用请求中的邮箱，否则用测试用户邮箱\n            verify_code = send_and_get_verify_code(email)\n            json_data[\"verifyCode\"] = verify_code\n            logger.info(f\"为邮箱 {email} 填充验证码: {verify_code}\")\n        if \"verificationCode\" in json_data and json_data[\"verificationCode\"] == \"{verify_code}\":\n            email = json_data.get(\"securityEmail\", test_user[\"email\"])\n            verify_code = send_and_get_verify_code(email)\n            json_data[\"verificationCode\"] = verify_code\n            logger.info(f\"为安全邮箱 {email} 填充验证码: {verify_code}\")\n    \n        # 4. 处理未登录场景（保持原逻辑）\n        use_token = case[\"case_id\"] != \"auth_029\"\n        logger.info(f\"是否使用Token: {use_token}\")\n        current_token = test_user[\"token\"] if use_token else None  # 使用测试用户token\n    \n        # 5. 发送请求\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            files=request_data.get(\"files\"),\n            token=current_token\n        )\n    \n        # 6. 断言增强\n        try:\n>           assert_response(\n                response,\n                expected_code=case[\"expected_code\"],\n                expected_success=case.get(\"expected_success\"),\n                expected_message=case.get(\"expected_message\")\n            )\n\ntests\\test_user_auth.py:90: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [400]>, expected_code = 200\nexpected_success = True, expected_message = '注册成功'\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response.text}\"\nE       AssertionError: 状态码不符：预期200，实际400，完整response：{\"success\":false,\"message\":\"验证码不能为空\",\"data\":null}\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\nutils\\test_utils.py:7: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"test_user","time":{"start":1753987850948,"stop":1753987852199,"duration":1251},"status":"passed","steps":[{"name":"发送请求：'POST' '/auth/send-verify-code'","time":{"start":1753987850948,"stop":1753987851724,"duration":776},"status":"passed","steps":[],"attachments":[{"uid":"3db3e9549ddb499f","name":"请求信息","source":"3db3e9549ddb499f.txt","type":"text/plain","size":52},{"uid":"86a82b1903a84dce","name":"请求头","source":"86a82b1903a84dce.txt","type":"text/plain","size":45},{"uid":"edfb6ef58ecbf28f","name":"请求参数","source":"edfb6ef58ecbf28f.json","type":"application/json","size":44},{"uid":"bbf4d941fed93d04","name":"响应信息","source":"bbf4d941fed93d04.txt","type":"text/plain","size":14},{"uid":"9c75bfb6610d95f7","name":"响应体","source":"9c75bfb6610d95f7.json","type":"application/json","size":84}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/send-verify-code'"},{"name":"headers","value":"None"},{"name":"params","value":"{'email': 'test_lwoerd@example.com'}"},{"name":"json","value":"None"},{"name":"files","value":"None"},{"name":"token","value":"None"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"从数据库获取验证码：'test_lwoerd@example.com'","time":{"start":1753987851724,"stop":1753987851735,"duration":11},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"email","value":"'test_lwoerd@example.com'"}],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"发送请求：'POST' '/auth/register'","time":{"start":1753987851736,"stop":1753987852006,"duration":270},"status":"passed","steps":[],"attachments":[{"uid":"546383e938d0e611","name":"请求信息","source":"546383e938d0e611.txt","type":"text/plain","size":44},{"uid":"bb86ae7c3d2631a9","name":"请求头","source":"bb86ae7c3d2631a9.txt","type":"text/plain","size":45},{"uid":"5ecc5fde04b9da6","name":"请求参数","source":"5ecc5fde04b9da6.json","type":"application/json","size":121},{"uid":"5ac73fa24aa3b6b9","name":"响应信息","source":"5ac73fa24aa3b6b9.txt","type":"text/plain","size":14},{"uid":"6d26a962c6d4c472","name":"响应体","source":"6d26a962c6d4c472.json","type":"application/json","size":53}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/register'"},{"name":"headers","value":"None"},{"name":"params","value":"None"},{"name":"json","value":"{'username': 'test_lwoerd', 'password': 'Test123456', 'email': 'test_lwoerd@example.com', 'verifyCode': '553704'}"},{"name":"files","value":"None"},{"name":"token","value":"None"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"发送请求：'POST' '/auth/login'","time":{"start":1753987852006,"stop":1753987852199,"duration":193},"status":"passed","steps":[],"attachments":[{"uid":"28b4f3001ce49ab","name":"请求信息","source":"28b4f3001ce49ab.txt","type":"text/plain","size":41},{"uid":"89b9052519b0adc8","name":"请求头","source":"89b9052519b0adc8.txt","type":"text/plain","size":45},{"uid":"444a10dfa7f4530","name":"请求参数","source":"444a10dfa7f4530.json","type":"application/json","size":61},{"uid":"e8f40962d2583c84","name":"响应信息","source":"e8f40962d2583c84.txt","type":"text/plain","size":14},{"uid":"bba951f5846a77d","name":"响应体","source":"bba951f5846a77d.json","type":"application/json","size":217}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/login'"},{"name":"headers","value":"None"},{"name":"params","value":"None"},{"name":"json","value":"{'username': 'test_lwoerd', 'password': 'Test123456'}"},{"name":"files","value":"None"},{"name":"token","value":"None"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":15,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":4},{"name":"small_jpg_image","time":{"start":1753987852199,"stop":1753987852313,"duration":114},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_jpg_image","time":{"start":1753987852313,"stop":1753987852936,"duration":623},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"small_png_image","time":{"start":1753987852936,"stop":1753987852994,"duration":58},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_png_image","time":{"start":1753987852994,"stop":1753987853511,"duration":517},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"non_image_file","time":{"start":1753987853511,"stop":1753987853512,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"image_fixtures","time":{"start":1753987853513,"stop":1753987853513,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: 状态码不符：预期200，实际400，完整response：{\"success\":false,\"message\":\"验证码不能为空\",\"data\":null}\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"case = {'case_id': 'auth_003', 'expected_code': 200, 'expected_message': '注册成功', 'expected_success': True, ...}\ntest_user = {'email': 'test_lwoerd@example.com', 'token': 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0ZXN0X2x3b2VyZCIsImlhdCI6MTc1Mzk4Nzg1MiwiZXhwIjoxNzUzOTk1MDUyfQ.0mcVZgKp2_c6lDUOzETLR5eg6Gi_yTRHdlU3cddqlrw', 'username': 'test_lwoerd'}\nimage_fixtures = {'large_jpg_image': 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmpk6fxtst_.jpg', 'large_png_image': 'C:\\\\Users\\\\huawei\\...ata\\\\Local\\\\Temp\\\\tmpj8iridua.txt', 'small_jpg_image': 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmp9jjf9dsc.jpg', ...}\n\n    @allure.feature(\"用户认证模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_user_auth(case, test_user, image_fixtures):  # 使用test_user而非auth_token\n        allure.story(case[\"name\"])\n        allure.title(f\"{case['case_id']}: {case['name']}\")\n        logger.info(f\"开始执行用例: {case['case_id']} - {case['name']}\")\n    \n        # 1. 文件映射（仅文件上传用例需要）\n        file_map = {\n            \"test_avatar.jpg\": image_fixtures[\"small_jpg_image\"],\n            \"large_avatar.jpg\": image_fixtures[\"large_jpg_image\"],\n            \"test_avatar.png\": image_fixtures[\"small_png_image\"],\n            \"large_avatar.png\": image_fixtures[\"large_png_image\"],\n            \"test_file.txt\": image_fixtures[\"non_image_file\"]\n        }\n    \n        # 2. 预处理请求\n        request_data = preprocess_request(case, test_user[\"token\"], file_map)  # 使用测试用户的token\n    \n        # 3. 处理所有需要验证码的场景（覆盖注册、更新密码等）\n        json_data = request_data.get(\"json\", {})\n        if \"verifyCode\" in json_data and json_data[\"verifyCode\"] == \"{verify_code}\":\n            email = json_data.get(\"email\", test_user[\"email\"])  # 优先用请求中的邮箱，否则用测试用户邮箱\n            verify_code = send_and_get_verify_code(email)\n            json_data[\"verifyCode\"] = verify_code\n            logger.info(f\"为邮箱 {email} 填充验证码: {verify_code}\")\n        if \"verificationCode\" in json_data and json_data[\"verificationCode\"] == \"{verify_code}\":\n            email = json_data.get(\"securityEmail\", test_user[\"email\"])\n            verify_code = send_and_get_verify_code(email)\n            json_data[\"verificationCode\"] = verify_code\n            logger.info(f\"为安全邮箱 {email} 填充验证码: {verify_code}\")\n    \n        # 4. 处理未登录场景（保持原逻辑）\n        use_token = case[\"case_id\"] != \"auth_029\"\n        logger.info(f\"是否使用Token: {use_token}\")\n        current_token = test_user[\"token\"] if use_token else None  # 使用测试用户token\n    \n        # 5. 发送请求\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            files=request_data.get(\"files\"),\n            token=current_token\n        )\n    \n        # 6. 断言增强\n        try:\n>           assert_response(\n                response,\n                expected_code=case[\"expected_code\"],\n                expected_success=case.get(\"expected_success\"),\n                expected_message=case.get(\"expected_message\")\n            )\n\ntests\\test_user_auth.py:90: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [400]>, expected_code = 200\nexpected_success = True, expected_message = '注册成功'\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response.text}\"\nE       AssertionError: 状态码不符：预期200，实际400，完整response：{\"success\":false,\"message\":\"验证码不能为空\",\"data\":null}\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\nutils\\test_utils.py:7: AssertionError","steps":[{"name":"从数据库获取验证码：'test_3xcy1p@example.com'","time":{"start":1753987853514,"stop":1753987853518,"duration":4},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"email","value":"'test_3xcy1p@example.com'"}],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"发送请求：'POST' '/auth/register'","time":{"start":1753987853518,"stop":1753987853541,"duration":23},"status":"passed","steps":[],"attachments":[{"uid":"f4576ad186ae0b5f","name":"请求信息","source":"f4576ad186ae0b5f.txt","type":"text/plain","size":44},{"uid":"aa939bdac23ce021","name":"请求头","source":"aa939bdac23ce021.txt","type":"text/plain","size":212},{"uid":"71ddc6ed27c36728","name":"请求参数","source":"71ddc6ed27c36728.json","type":"application/json","size":126},{"uid":"750ff868c95f2795","name":"响应信息","source":"750ff868c95f2795.txt","type":"text/plain","size":14},{"uid":"1b91d3ee76bab564","name":"响应体","source":"1b91d3ee76bab564.json","type":"application/json","size":63}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/register'"},{"name":"headers","value":"{}"},{"name":"params","value":"{}"},{"name":"json","value":"{'username': 'test0000000000000001', 'password': 'Test123456', 'email': 'test_3xcy1p@example.com', 'verifyCode': None}"},{"name":"files","value":"None"},{"name":"token","value":"'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0ZXN0X2x3b2VyZCIsImlhdCI6MTc1Mzk4Nzg1MiwiZXhwIjoxNzUzOTk1MDUyfQ.0mcVZgKp2_c6lDUOzETLR5eg6Gi_yTRHdlU3cddqlrw'"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"验证响应：状态码200，消息'注册成功'","time":{"start":1753987853541,"stop":1753987853542,"duration":1},"status":"failed","statusMessage":"AssertionError: 状态码不符：预期200，实际400，完整response：{\"success\":false,\"message\":\"验证码不能为空\",\"data\":null}\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"D:\\Anaconda3\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"D:\\工作记录\\项目说明\\api_test\\utils\\test_utils.py\", line 7, in assert_response\n    assert response.status_code == expected_code, \\\n","steps":[],"attachments":[],"parameters":[{"name":"response","value":"<Response [400]>"},{"name":"expected_code","value":"200"},{"name":"expected_success","value":"True"},{"name":"expected_message","value":"'注册成功'"}],"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[{"uid":"90a1b2c218cd9443","name":"失败详情","source":"90a1b2c218cd9443.txt","type":"text/plain","size":77},{"uid":"f1dfcd4a3f60c8aa","name":"请求数据","source":"f1dfcd4a3f60c8aa.json","type":"application/json","size":132},{"uid":"26aceabf6cb59f67","name":"log","source":"26aceabf6cb59f67.txt","type":"text/plain","size":2421},{"uid":"5f15d316ad25aa58","name":"stderr","source":"5f15d316ad25aa58.txt","type":"text/plain","size":1858}],"parameters":[],"attachmentsCount":9,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":3},"afterStages":[{"name":"non_image_file::0","time":{"start":1753987853563,"stop":1753987853564,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_png_image::0","time":{"start":1753987853565,"stop":1753987853569,"duration":4},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"small_png_image::0","time":{"start":1753987853573,"stop":1753987853575,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_jpg_image::0","time":{"start":1753987853577,"stop":1753987853584,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"small_jpg_image::0","time":{"start":1753987853587,"stop":1753987853589,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"test_user::0","time":{"start":1753987853592,"stop":1753987853601,"duration":9},"status":"passed","steps":[{"name":"清理测试数据：'test_lwoerd@example.com'","time":{"start":1753987853592,"stop":1753987853600,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"email","value":"'test_lwoerd@example.com'"}],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":1}],"labels":[{"name":"feature","value":"用户认证模块"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_user_auth"},{"name":"host","value":"CYJ"},{"name":"thread","value":"22580-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_user_auth"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"case","value":"{'case_id': 'auth_003', 'name': '用户名长度为20位（最大值）', 'method': 'POST', 'url': '/auth/register', 'json': {'username': 'test0000000000000001', 'password': 'Test123456', 'email': 'test_3xcy1p@example.com', 'verifyCode': '{verify_code}'}, 'expected_code': 200, 'expected_success': True, 'expected_message': '注册成功'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"189775b598ac03eb.json","parameterValues":["{'case_id': 'auth_003', 'name': '用户名长度为20位（最大值）', 'method': 'POST', 'url': '/auth/register', 'json': {'username': 'test0000000000000001', 'password': 'Test123456', 'email': 'test_3xcy1p@example.com', 'verifyCode': '{verify_code}'}, 'expected_code': 200, 'expected_success': True, 'expected_message': '注册成功'}"]}