{"uid":"265fb11f53dfc5b7","name":"test_user_auth[case23]","fullName":"tests.test_user_auth#test_user_auth","historyId":"4af971bc013669d4fd30f4c35de6dde1","time":{"start":1753972610429,"stop":1753972610461,"duration":32},"status":"failed","statusMessage":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","statusTrace":"case = {'case_id': 'auth_024', 'expected_code': 200, 'expected_content_type': 'application/json', 'expected_success': True, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5NzI1NTcsImV4cCI6MTc1Mzk3OTc1N30.vcSylVhV7w25StQ147PqLr1nZV86-loLuVhwBF4pgsI'\nsmall_jpg_image = 'small_7847.jpg', large_jpg_image = 'large_2824.jpg'\nsmall_png_image = 'small_7959.png', large_png_image = 'large_1488.png'\nnon_image_file = 'test_7972.txt'\n\n    @allure.feature(\"用户认证模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_user_auth(\n        case,\n        auth_token,\n        small_jpg_image,\n        large_jpg_image,\n        small_png_image,\n        large_png_image,\n        non_image_file\n    ):\n        allure.story(case[\"name\"])\n        allure.title(f\"{case['case_id']}: {case['name']}\")\n    \n        # 文件映射：用例文件名 -> 实际测试文件\n        file_map = {\n            \"test_avatar.jpg\": small_jpg_image,\n            \"large_avatar.jpg\": large_jpg_image,\n            \"test_avatar.png\": small_png_image,\n            \"large_avatar.png\": large_png_image,\n            \"test_file.txt\": non_image_file\n        }\n    \n        # 预处理请求\n        request_data = preprocess_request(case, auth_token, file_map)\n    \n        # 注册用例单独处理验证码\n        if (case[\"case_id\"].startswith(\"auth_00\")\n            and case[\"method\"] == \"POST\"\n            and case[\"url\"] == \"/auth/register\"):\n    \n            # 获取注册邮箱\n            email = request_data[\"json\"][\"email\"]\n            # 发送并获取验证码\n            verify_code = send_and_get_verify_code(email)\n            # 填充验证码到请求参数\n            request_data[\"json\"][\"verifyCode\"] = verify_code\n    \n        # 发送请求\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            files=request_data.get(\"files\"),\n            token=auth_token if case[\"case_id\"] != \"auth_029\" else None  # 未登录用例移除token\n        )\n    \n        # 断言\n>       assert_response(\n            response,\n            expected_code=case[\"expected_code\"],\n            expected_success=case.get(\"expected_success\"),\n            expected_message=case.get(\"expected_message\")\n        )\n\ntests\\test_user_auth.py:79: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [403]>, expected_code = 200, expected_success = True, expected_message = None\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response}\"\nE       AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nE       assert 403 == 200\nE        +  where 403 = <Response [403]>.status_code\n\nutils\\test_utils.py:7: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"auth_token","time":{"start":1753972557223,"stop":1753972557599,"duration":376},"status":"passed","steps":[{"name":"发送请求：'POST' '/auth/login'","time":{"start":1753972557224,"stop":1753972557599,"duration":375},"status":"passed","steps":[],"attachments":[{"uid":"cea4fe549804111d","name":"请求信息","source":"cea4fe549804111d.json","type":"application/json","size":64},{"uid":"8c394077a2516ce7","name":"响应信息","source":"8c394077a2516ce7.txt","type":"text/plain","size":20},{"uid":"49aa0c0d52401d58","name":"响应体","source":"49aa0c0d52401d58.json","type":"application/json","size":214}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/login'"},{"name":"headers","value":"None"},{"name":"params","value":"None"},{"name":"json","value":"{'username': 'admin1155', 'password': 'admin1155'}"},{"name":"files","value":"None"},{"name":"token","value":"None"}],"attachmentsCount":3,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":3,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":1},{"name":"small_jpg_image","time":{"start":1753972609354,"stop":1753972609485,"duration":131},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_jpg_image","time":{"start":1753972609485,"stop":1753972609974,"duration":489},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"small_png_image","time":{"start":1753972609974,"stop":1753972610013,"duration":39},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_png_image","time":{"start":1753972610013,"stop":1753972610424,"duration":411},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"non_image_file","time":{"start":1753972610424,"stop":1753972610426,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","statusTrace":"case = {'case_id': 'auth_024', 'expected_code': 200, 'expected_content_type': 'application/json', 'expected_success': True, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5NzI1NTcsImV4cCI6MTc1Mzk3OTc1N30.vcSylVhV7w25StQ147PqLr1nZV86-loLuVhwBF4pgsI'\nsmall_jpg_image = 'small_7847.jpg', large_jpg_image = 'large_2824.jpg'\nsmall_png_image = 'small_7959.png', large_png_image = 'large_1488.png'\nnon_image_file = 'test_7972.txt'\n\n    @allure.feature(\"用户认证模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_user_auth(\n        case,\n        auth_token,\n        small_jpg_image,\n        large_jpg_image,\n        small_png_image,\n        large_png_image,\n        non_image_file\n    ):\n        allure.story(case[\"name\"])\n        allure.title(f\"{case['case_id']}: {case['name']}\")\n    \n        # 文件映射：用例文件名 -> 实际测试文件\n        file_map = {\n            \"test_avatar.jpg\": small_jpg_image,\n            \"large_avatar.jpg\": large_jpg_image,\n            \"test_avatar.png\": small_png_image,\n            \"large_avatar.png\": large_png_image,\n            \"test_file.txt\": non_image_file\n        }\n    \n        # 预处理请求\n        request_data = preprocess_request(case, auth_token, file_map)\n    \n        # 注册用例单独处理验证码\n        if (case[\"case_id\"].startswith(\"auth_00\")\n            and case[\"method\"] == \"POST\"\n            and case[\"url\"] == \"/auth/register\"):\n    \n            # 获取注册邮箱\n            email = request_data[\"json\"][\"email\"]\n            # 发送并获取验证码\n            verify_code = send_and_get_verify_code(email)\n            # 填充验证码到请求参数\n            request_data[\"json\"][\"verifyCode\"] = verify_code\n    \n        # 发送请求\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            files=request_data.get(\"files\"),\n            token=auth_token if case[\"case_id\"] != \"auth_029\" else None  # 未登录用例移除token\n        )\n    \n        # 断言\n>       assert_response(\n            response,\n            expected_code=case[\"expected_code\"],\n            expected_success=case.get(\"expected_success\"),\n            expected_message=case.get(\"expected_message\")\n        )\n\ntests\\test_user_auth.py:79: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [403]>, expected_code = 200, expected_success = True, expected_message = None\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response}\"\nE       AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nE       assert 403 == 200\nE        +  where 403 = <Response [403]>.status_code\n\nutils\\test_utils.py:7: AssertionError","steps":[{"name":"发送请求：'POST' '/auth/upload/avatar'","time":{"start":1753972610430,"stop":1753972610458,"duration":28},"status":"passed","steps":[],"attachments":[{"uid":"26e1a447517c472a","name":"请求信息","source":"26e1a447517c472a.json","type":"application/json","size":16},{"uid":"5fc845c233bcdce1","name":"响应信息","source":"5fc845c233bcdce1.txt","type":"text/plain","size":20},{"uid":"91f739f026ab5f73","name":"响应体","source":"91f739f026ab5f73.json","type":"application/json","size":0}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/upload/avatar'"},{"name":"headers","value":"{'Authorization': 'Bearer ', 'Content-Type': 'multipart/form-data'}"},{"name":"params","value":"{}"},{"name":"json","value":"{}"},{"name":"files","value":"{'file': <_io.BufferedReader name='small_7847.jpg'>}"},{"name":"token","value":"'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5NzI1NTcsImV4cCI6MTc1Mzk3OTc1N30.vcSylVhV7w25StQ147PqLr1nZV86-loLuVhwBF4pgsI'"}],"attachmentsCount":3,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"验证响应：状态码200，消息None","time":{"start":1753972610458,"stop":1753972610459,"duration":1},"status":"failed","statusMessage":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code\n","statusTrace":"  File \"D:\\Anaconda3\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"D:\\工作记录\\项目说明\\api_test\\utils\\test_utils.py\", line 7, in assert_response\n    assert response.status_code == expected_code, \\\n","steps":[],"attachments":[],"parameters":[{"name":"response","value":"<Response [403]>"},{"name":"expected_code","value":"200"},{"name":"expected_success","value":"True"},{"name":"expected_message","value":"None"}],"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":3,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":2},"afterStages":[{"name":"non_image_file::0","time":{"start":1753972610506,"stop":1753972610511,"duration":5},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_png_image::0","time":{"start":1753972610522,"stop":1753972610533,"duration":11},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"small_png_image::0","time":{"start":1753972610538,"stop":1753972610542,"duration":4},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_jpg_image::0","time":{"start":1753972610547,"stop":1753972610573,"duration":26},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"small_jpg_image::0","time":{"start":1753972610578,"stop":1753972610587,"duration":9},"status":"broken","statusMessage":"PermissionError: [WinError 32] 另一个程序正在使用此文件，进程无法访问。: 'small_7847.jpg'\n","statusTrace":"  File \"D:\\Anaconda3\\Lib\\site-packages\\allure_commons\\_allure.py\", line 231, in __call__\n    return self._fixture_function(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"D:\\Anaconda3\\Lib\\site-packages\\_pytest\\fixtures.py\", line 911, in _teardown_yield_fixture\n    next(it)\n  File \"D:\\工作记录\\项目说明\\api_test\\tests\\conftest.py\", line 67, in small_jpg_image\n    os.remove(img_path)\n","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"labels":[{"name":"feature","value":"用户认证模块"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_user_auth"},{"name":"host","value":"CYJ"},{"name":"thread","value":"27300-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_user_auth"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"case","value":"{'case_id': 'auth_024', 'name': '上传2MB以内的JPG图片', 'method': 'POST', 'url': '/auth/upload/avatar', 'headers': {'Authorization': 'Bearer ', 'Content-Type': 'multipart/form-data'}, 'files': {'file': 'test_avatar.jpg'}, 'expected_code': 200, 'expected_success': True, 'expected_content_type': 'application/json'}"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"265fb11f53dfc5b7.json","parameterValues":["{'case_id': 'auth_024', 'name': '上传2MB以内的JPG图片', 'method': 'POST', 'url': '/auth/upload/avatar', 'headers': {'Authorization': 'Bearer ', 'Content-Type': 'multipart/form-data'}, 'files': {'file': 'test_avatar.jpg'}, 'expected_code': 200, 'expected_success': True, 'expected_content_type': 'application/json'}"]}