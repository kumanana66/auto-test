{"uid":"b627bcd978001472","name":"test_user_auth[case0]","fullName":"tests.test_user_auth#test_user_auth","historyId":"5b7b83673bdb492cf79eccfc91403850","time":{"start":1753987848115,"stop":1753987848172,"duration":57},"status":"failed","statusMessage":"AssertionError: 状态码不符：预期200，实际400，完整response：{\"success\":false,\"message\":\"验证码不能为空\",\"data\":null}\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"case = {'case_id': 'auth_001', 'expected_code': 200, 'expected_message': '注册成功', 'expected_success': True, ...}\ntest_user = {'email': 'test_sjethn@example.com', 'token': 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0ZXN0X3NqZXRobiIsImlhdCI6MTc1Mzk4Nzg0NiwiZXhwIjoxNzUzOTk1MDQ2fQ.dmUf07sakLPJQlBmQcu3OSkmTphPX7ANJamt0I0eoo4', 'username': 'test_sjethn'}\nimage_fixtures = {'large_jpg_image': 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmpml_h1r25.jpg', 'large_png_image': 'C:\\\\Users\\\\huawei\\...ata\\\\Local\\\\Temp\\\\tmpkw54sbi_.txt', 'small_jpg_image': 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmp8t8vuwig.jpg', ...}\n\n    @allure.feature(\"用户认证模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_user_auth(case, test_user, image_fixtures):  # 使用test_user而非auth_token\n        allure.story(case[\"name\"])\n        allure.title(f\"{case['case_id']}: {case['name']}\")\n        logger.info(f\"开始执行用例: {case['case_id']} - {case['name']}\")\n    \n        # 1. 文件映射（仅文件上传用例需要）\n        file_map = {\n            \"test_avatar.jpg\": image_fixtures[\"small_jpg_image\"],\n            \"large_avatar.jpg\": image_fixtures[\"large_jpg_image\"],\n            \"test_avatar.png\": image_fixtures[\"small_png_image\"],\n            \"large_avatar.png\": image_fixtures[\"large_png_image\"],\n            \"test_file.txt\": image_fixtures[\"non_image_file\"]\n        }\n    \n        # 2. 预处理请求\n        request_data = preprocess_request(case, test_user[\"token\"], file_map)  # 使用测试用户的token\n    \n        # 3. 处理所有需要验证码的场景（覆盖注册、更新密码等）\n        json_data = request_data.get(\"json\", {})\n        if \"verifyCode\" in json_data and json_data[\"verifyCode\"] == \"{verify_code}\":\n            email = json_data.get(\"email\", test_user[\"email\"])  # 优先用请求中的邮箱，否则用测试用户邮箱\n            verify_code = send_and_get_verify_code(email)\n            json_data[\"verifyCode\"] = verify_code\n            logger.info(f\"为邮箱 {email} 填充验证码: {verify_code}\")\n        if \"verificationCode\" in json_data and json_data[\"verificationCode\"] == \"{verify_code}\":\n            email = json_data.get(\"securityEmail\", test_user[\"email\"])\n            verify_code = send_and_get_verify_code(email)\n            json_data[\"verificationCode\"] = verify_code\n            logger.info(f\"为安全邮箱 {email} 填充验证码: {verify_code}\")\n    \n        # 4. 处理未登录场景（保持原逻辑）\n        use_token = case[\"case_id\"] != \"auth_029\"\n        logger.info(f\"是否使用Token: {use_token}\")\n        current_token = test_user[\"token\"] if use_token else None  # 使用测试用户token\n    \n        # 5. 发送请求\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            files=request_data.get(\"files\"),\n            token=current_token\n        )\n    \n        # 6. 断言增强\n        try:\n>           assert_response(\n                response,\n                expected_code=case[\"expected_code\"],\n                expected_success=case.get(\"expected_success\"),\n                expected_message=case.get(\"expected_message\")\n            )\n\ntests\\test_user_auth.py:90: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [400]>, expected_code = 200\nexpected_success = True, expected_message = '注册成功'\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response.text}\"\nE       AssertionError: 状态码不符：预期200，实际400，完整response：{\"success\":false,\"message\":\"验证码不能为空\",\"data\":null}\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\nutils\\test_utils.py:7: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"test_user","time":{"start":1753987845460,"stop":1753987846806,"duration":1346},"status":"passed","steps":[{"name":"发送请求：'POST' '/auth/send-verify-code'","time":{"start":1753987845461,"stop":1753987846375,"duration":914},"status":"passed","steps":[],"attachments":[{"uid":"d67ef4c8b71bedac","name":"请求信息","source":"d67ef4c8b71bedac.txt","type":"text/plain","size":52},{"uid":"db7cf24399eb0708","name":"请求头","source":"db7cf24399eb0708.txt","type":"text/plain","size":45},{"uid":"1776fc9b5f564709","name":"请求参数","source":"1776fc9b5f564709.json","type":"application/json","size":44},{"uid":"6a3eaa243bf996cf","name":"响应信息","source":"6a3eaa243bf996cf.txt","type":"text/plain","size":14},{"uid":"f4a57d820ac73b99","name":"响应体","source":"f4a57d820ac73b99.json","type":"application/json","size":84}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/send-verify-code'"},{"name":"headers","value":"None"},{"name":"params","value":"{'email': 'test_sjethn@example.com'}"},{"name":"json","value":"None"},{"name":"files","value":"None"},{"name":"token","value":"None"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"从数据库获取验证码：'test_sjethn@example.com'","time":{"start":1753987846376,"stop":1753987846391,"duration":15},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"email","value":"'test_sjethn@example.com'"}],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"发送请求：'POST' '/auth/register'","time":{"start":1753987846392,"stop":1753987846642,"duration":250},"status":"passed","steps":[],"attachments":[{"uid":"b4651cb16c3c316f","name":"请求信息","source":"b4651cb16c3c316f.txt","type":"text/plain","size":44},{"uid":"f72546e652df0db","name":"请求头","source":"f72546e652df0db.txt","type":"text/plain","size":45},{"uid":"a74696a7c9aca501","name":"请求参数","source":"a74696a7c9aca501.json","type":"application/json","size":121},{"uid":"f89d42ac1d3a29b2","name":"响应信息","source":"f89d42ac1d3a29b2.txt","type":"text/plain","size":14},{"uid":"619981b7a48de6c6","name":"响应体","source":"619981b7a48de6c6.json","type":"application/json","size":53}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/register'"},{"name":"headers","value":"None"},{"name":"params","value":"None"},{"name":"json","value":"{'username': 'test_sjethn', 'password': 'Test123456', 'email': 'test_sjethn@example.com', 'verifyCode': '488716'}"},{"name":"files","value":"None"},{"name":"token","value":"None"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"发送请求：'POST' '/auth/login'","time":{"start":1753987846642,"stop":1753987846806,"duration":164},"status":"passed","steps":[],"attachments":[{"uid":"7358a64530d8ee04","name":"请求信息","source":"7358a64530d8ee04.txt","type":"text/plain","size":41},{"uid":"1cc841a859368590","name":"请求头","source":"1cc841a859368590.txt","type":"text/plain","size":45},{"uid":"5318f083e58a83eb","name":"请求参数","source":"5318f083e58a83eb.json","type":"application/json","size":61},{"uid":"6533d5851a8b25fb","name":"响应信息","source":"6533d5851a8b25fb.txt","type":"text/plain","size":14},{"uid":"a0ae15aa4f29d78a","name":"响应体","source":"a0ae15aa4f29d78a.json","type":"application/json","size":217}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/login'"},{"name":"headers","value":"None"},{"name":"params","value":"None"},{"name":"json","value":"{'username': 'test_sjethn', 'password': 'Test123456'}"},{"name":"files","value":"None"},{"name":"token","value":"None"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":15,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":4},{"name":"small_jpg_image","time":{"start":1753987846806,"stop":1753987847032,"duration":226},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_jpg_image","time":{"start":1753987847033,"stop":1753987847542,"duration":509},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"small_png_image","time":{"start":1753987847544,"stop":1753987847605,"duration":61},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_png_image","time":{"start":1753987847605,"stop":1753987848106,"duration":501},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"non_image_file","time":{"start":1753987848107,"stop":1753987848111,"duration":4},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"image_fixtures","time":{"start":1753987848113,"stop":1753987848113,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: 状态码不符：预期200，实际400，完整response：{\"success\":false,\"message\":\"验证码不能为空\",\"data\":null}\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"case = {'case_id': 'auth_001', 'expected_code': 200, 'expected_message': '注册成功', 'expected_success': True, ...}\ntest_user = {'email': 'test_sjethn@example.com', 'token': 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0ZXN0X3NqZXRobiIsImlhdCI6MTc1Mzk4Nzg0NiwiZXhwIjoxNzUzOTk1MDQ2fQ.dmUf07sakLPJQlBmQcu3OSkmTphPX7ANJamt0I0eoo4', 'username': 'test_sjethn'}\nimage_fixtures = {'large_jpg_image': 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmpml_h1r25.jpg', 'large_png_image': 'C:\\\\Users\\\\huawei\\...ata\\\\Local\\\\Temp\\\\tmpkw54sbi_.txt', 'small_jpg_image': 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmp8t8vuwig.jpg', ...}\n\n    @allure.feature(\"用户认证模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_user_auth(case, test_user, image_fixtures):  # 使用test_user而非auth_token\n        allure.story(case[\"name\"])\n        allure.title(f\"{case['case_id']}: {case['name']}\")\n        logger.info(f\"开始执行用例: {case['case_id']} - {case['name']}\")\n    \n        # 1. 文件映射（仅文件上传用例需要）\n        file_map = {\n            \"test_avatar.jpg\": image_fixtures[\"small_jpg_image\"],\n            \"large_avatar.jpg\": image_fixtures[\"large_jpg_image\"],\n            \"test_avatar.png\": image_fixtures[\"small_png_image\"],\n            \"large_avatar.png\": image_fixtures[\"large_png_image\"],\n            \"test_file.txt\": image_fixtures[\"non_image_file\"]\n        }\n    \n        # 2. 预处理请求\n        request_data = preprocess_request(case, test_user[\"token\"], file_map)  # 使用测试用户的token\n    \n        # 3. 处理所有需要验证码的场景（覆盖注册、更新密码等）\n        json_data = request_data.get(\"json\", {})\n        if \"verifyCode\" in json_data and json_data[\"verifyCode\"] == \"{verify_code}\":\n            email = json_data.get(\"email\", test_user[\"email\"])  # 优先用请求中的邮箱，否则用测试用户邮箱\n            verify_code = send_and_get_verify_code(email)\n            json_data[\"verifyCode\"] = verify_code\n            logger.info(f\"为邮箱 {email} 填充验证码: {verify_code}\")\n        if \"verificationCode\" in json_data and json_data[\"verificationCode\"] == \"{verify_code}\":\n            email = json_data.get(\"securityEmail\", test_user[\"email\"])\n            verify_code = send_and_get_verify_code(email)\n            json_data[\"verificationCode\"] = verify_code\n            logger.info(f\"为安全邮箱 {email} 填充验证码: {verify_code}\")\n    \n        # 4. 处理未登录场景（保持原逻辑）\n        use_token = case[\"case_id\"] != \"auth_029\"\n        logger.info(f\"是否使用Token: {use_token}\")\n        current_token = test_user[\"token\"] if use_token else None  # 使用测试用户token\n    \n        # 5. 发送请求\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            files=request_data.get(\"files\"),\n            token=current_token\n        )\n    \n        # 6. 断言增强\n        try:\n>           assert_response(\n                response,\n                expected_code=case[\"expected_code\"],\n                expected_success=case.get(\"expected_success\"),\n                expected_message=case.get(\"expected_message\")\n            )\n\ntests\\test_user_auth.py:90: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [400]>, expected_code = 200\nexpected_success = True, expected_message = '注册成功'\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response.text}\"\nE       AssertionError: 状态码不符：预期200，实际400，完整response：{\"success\":false,\"message\":\"验证码不能为空\",\"data\":null}\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\nutils\\test_utils.py:7: AssertionError","steps":[{"name":"从数据库获取验证码：'test_k7l5gi@example.com'","time":{"start":1753987848119,"stop":1753987848125,"duration":6},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"email","value":"'test_k7l5gi@example.com'"}],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"发送请求：'POST' '/auth/register'","time":{"start":1753987848126,"stop":1753987848163,"duration":37},"status":"passed","steps":[],"attachments":[{"uid":"7e17b342bfa84e65","name":"请求信息","source":"7e17b342bfa84e65.txt","type":"text/plain","size":44},{"uid":"2acfc1cb19f3885a","name":"请求头","source":"2acfc1cb19f3885a.txt","type":"text/plain","size":212},{"uid":"20ef04a2421b088b","name":"请求参数","source":"20ef04a2421b088b.json","type":"application/json","size":122},{"uid":"5ec04db33a3146d2","name":"响应信息","source":"5ec04db33a3146d2.txt","type":"text/plain","size":14},{"uid":"e03c773d3b2ecce5","name":"响应体","source":"e03c773d3b2ecce5.json","type":"application/json","size":63}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/register'"},{"name":"headers","value":"{}"},{"name":"params","value":"{}"},{"name":"json","value":"{'username': 'test_user_j3vfdj', 'password': 'Test123456', 'email': 'test_k7l5gi@example.com', 'verifyCode': None}"},{"name":"files","value":"None"},{"name":"token","value":"'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0ZXN0X3NqZXRobiIsImlhdCI6MTc1Mzk4Nzg0NiwiZXhwIjoxNzUzOTk1MDQ2fQ.dmUf07sakLPJQlBmQcu3OSkmTphPX7ANJamt0I0eoo4'"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"验证响应：状态码200，消息'注册成功'","time":{"start":1753987848164,"stop":1753987848164,"duration":0},"status":"failed","statusMessage":"AssertionError: 状态码不符：预期200，实际400，完整response：{\"success\":false,\"message\":\"验证码不能为空\",\"data\":null}\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"D:\\Anaconda3\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"D:\\工作记录\\项目说明\\api_test\\utils\\test_utils.py\", line 7, in assert_response\n    assert response.status_code == expected_code, \\\n","steps":[],"attachments":[],"parameters":[{"name":"response","value":"<Response [400]>"},{"name":"expected_code","value":"200"},{"name":"expected_success","value":"True"},{"name":"expected_message","value":"'注册成功'"}],"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[{"uid":"16a77798465aba3f","name":"失败详情","source":"16a77798465aba3f.txt","type":"text/plain","size":77},{"uid":"21bc82ee8b367eab","name":"请求数据","source":"21bc82ee8b367eab.json","type":"application/json","size":128},{"uid":"1e95243038b4c4e7","name":"log","source":"1e95243038b4c4e7.txt","type":"text/plain","size":2401},{"uid":"79063f1fb2e3ef3c","name":"stderr","source":"79063f1fb2e3ef3c.txt","type":"text/plain","size":1838}],"parameters":[],"attachmentsCount":9,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":3},"afterStages":[{"name":"non_image_file::0","time":{"start":1753987848245,"stop":1753987848247,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_png_image::0","time":{"start":1753987848250,"stop":1753987848253,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"small_png_image::0","time":{"start":1753987848256,"stop":1753987848257,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_jpg_image::0","time":{"start":1753987848261,"stop":1753987848267,"duration":6},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"small_jpg_image::0","time":{"start":1753987848268,"stop":1753987848270,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"test_user::0","time":{"start":1753987848272,"stop":1753987848282,"duration":10},"status":"passed","steps":[{"name":"清理测试数据：'test_sjethn@example.com'","time":{"start":1753987848273,"stop":1753987848282,"duration":9},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"email","value":"'test_sjethn@example.com'"}],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":1}],"labels":[{"name":"feature","value":"用户认证模块"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_user_auth"},{"name":"host","value":"CYJ"},{"name":"thread","value":"22580-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_user_auth"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"case","value":"{'case_id': 'auth_001', 'name': '用户注册成功', 'method': 'POST', 'url': '/auth/register', 'json': {'username': 'test_user_j3vfdj', 'password': 'Test123456', 'email': 'test_k7l5gi@example.com', 'verifyCode': '{verify_code}'}, 'expected_code': 200, 'expected_success': True, 'expected_message': '注册成功', 'setup': '需要先获取邮箱验证码', 'teardown': '删除测试用户'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"b627bcd978001472.json","parameterValues":["{'case_id': 'auth_001', 'name': '用户注册成功', 'method': 'POST', 'url': '/auth/register', 'json': {'username': 'test_user_j3vfdj', 'password': 'Test123456', 'email': 'test_k7l5gi@example.com', 'verifyCode': '{verify_code}'}, 'expected_code': 200, 'expected_success': True, 'expected_message': '注册成功', 'setup': '需要先获取邮箱验证码', 'teardown': '删除测试用户'}"]}