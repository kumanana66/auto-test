{"uid":"4c8a52351aa12ca6","name":"test_crawler_tasks[case8]","fullName":"tests.test_crawler_tasks#test_crawler_tasks","historyId":"21243e87d12b1197b33a4f451a663866","time":{"start":1753987840079,"stop":1753987840110,"duration":31},"status":"failed","statusMessage":"AssertionError: 消息不符：预期任务已恢复执行，实际操作成功，完整response：{\"success\":true,\"message\":\"操作成功\",\"data\":\"任务已恢复执行\"}\nassert '操作成功' == '任务已恢复执行'\n  - 任务已恢复执行\n  + 操作成功","statusTrace":"case = {'case_id': 'task_009', 'expected_code': 200, 'expected_message': '任务已恢复执行', 'expected_success': True, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODc4NDAsImV4cCI6MTc1Mzk5NTA0MH0.GdXFnWaHg6QhMcICIMgASts979xcL8kWyGKv4Weqx0o'\ntask_id = 263\n\n    @allure.feature(\"爬虫任务模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_crawler_tasks(case, auth_token, task_id):\n        allure.story(case[\"name\"])\n        allure.title(f\"{case['case_id']}: {case['name']}\")\n    \n        # 替换任务ID占位符\n        if \"{task_id}\" in case[\"url\"]:\n            case[\"url\"] = case[\"url\"].replace(\"{task_id}\", str(task_id))\n            allure.attach(f\"使用任务ID: {task_id}\", \"测试信息\", allure.attachment_type.TEXT)\n    \n        # --------------------------\n        # 关键修改：处理PPT下载的前置依赖\n        # --------------------------\n        # 1. 若当前是下载PPT的用例（task_017），先启动数据分析并等待完成\n        if case[\"case_id\"] == \"task_017\":\n            allure.attach(\"开始执行数据分析数据分析前置操作\", \"前置依赖\", allure.attachment_type.TEXT)\n    \n            # 1.1 启动数据分析\n            analyze_response = Request.send_request(\n                \"POST\", f\"/crawler/tasks/{task_id}/analyze\",  # 对应task_016的接口\n                token=auth_token\n            )\n            assert_response(\n                analyze_response,\n                200,\n                expected_success=True,\n                expected_message=\"数据分析已启动\"  # 匹配task_016的预期消息\n            )\n            allure.attach(\"数据分析已启动\", \"前置操作结果\", allure.attachment_type.TEXT)\n    \n            # 1.2 轮询等待分析完成（复用同test_download_analyzed_ppt的逻辑）\n            max_wait_seconds = 180\n            check_interval = 5\n            elapsed_seconds = 0\n            status = \"PROCESSING\"\n    \n            while elapsed_seconds < max_wait_seconds and status == \"PROCESSING\":\n                # 查询当前状态\n                status_response = Request.send_request(\n                    \"GET\", f\"/crawler/tasks/{task_id}/analyze/status\",\n                    token=auth_token\n                )\n                assert_response(status_response, 200)\n                status = status_response.json()[\"data\"]\n                allure.attach(f\"当前分析状态: {status} (等待{elapsed_seconds}秒)\", \"状态轮询\", allure.attachment_type.TEXT)\n    \n                if status == \"PROCESSING\":\n                    time.sleep(check_interval)\n                    elapsed_seconds += check_interval\n    \n            # 1.3 校验分析状态（必须完成才能继续下载）\n            assert status in [\"COMPLETED\", \"FAILED\"], f\"数据分析超时，最终状态：{status}\"\n            if status == \"FAILED\":\n                pytest.fail(\"数据分析失败，无法下载PPT\")  # 分析失败则标记用例失败\n            allure.attach(\"数据分析已完成\", \"前置操作结果\", allure.attachment_type.TEXT)\n    \n        # 预处理请求\n        request_data = preprocess_request(case, auth_token)\n        if \"headers\" in request_data and \"Authorization\" in request_data[\"headers\"]:\n            del request_data[\"headers\"][\"Authorization\"]\n    \n        # 发送请求（对task_017而言，此时已确保分析完成）\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            token=auth_token\n        )\n    \n        # 断言（增加PPT格式校验）\n        try:\n            assert_response(\n                response,\n                expected_code=case[\"expected_code\"],\n                expected_success=case.get(\"expected_success\"),\n                expected_message=case.get(\"expected_message\")\n            )\n            # 额外校验PPT文件类型（对应case中的expected_content_type）\n            if case.get(\"expected_content_type\"):\n                assert case[\"expected_content_type\"] in response.headers[\"Content-Type\"], \\\n                    f\"文件类型错误，预期: {case['expected_content_type']}, 实际: {response.headers['Content-Type']}\"\n        except AssertionError as e:\n            allure.attach(f\"响应内容: {response.text}\", \"断言失败详情\", allure.attachment_type.TEXT)\n>           raise e\n\ntests\\test_crawler_tasks.py:120: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\test_crawler_tasks.py:108: in test_crawler_tasks\n    assert_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [200]>, expected_code = 200\nexpected_success = True, expected_message = '任务已恢复执行'\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n        assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response.text}\"\n    \n        if response.status_code != 200:\n            return\n    \n        try:\n            json_data = response.json()\n        except:\n            assert False, f\"响应不是有效的JSON格式: {response.text}\"\n    \n        if expected_success is not None:\n            assert json_data.get(\"success\") == expected_success, \\\n                f\"success字段不符：预期{expected_success}，实际{json_data.get('success')}，完整response：{response.text}\"\n    \n        if expected_message:\n>           assert json_data.get(\"message\") == expected_message, \\\n                f\"消息不符：预期{expected_message}，实际{json_data.get('message')}，完整response：{response.text}\"\nE           AssertionError: 消息不符：预期任务已恢复执行，实际操作成功，完整response：{\"success\":true,\"message\":\"操作成功\",\"data\":\"任务已恢复执行\"}\nE           assert '操作成功' == '任务已恢复执行'\nE             - 任务已恢复执行\nE             + 操作成功\n\nutils\\test_utils.py:23: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"auth_token","time":{"start":1753987839861,"stop":1753987840049,"duration":188},"status":"passed","steps":[{"name":"发送请求：'POST' '/auth/login'","time":{"start":1753987839861,"stop":1753987840049,"duration":188},"status":"passed","steps":[],"attachments":[{"uid":"7b6abcb435393634","name":"请求信息","source":"7b6abcb435393634.txt","type":"text/plain","size":41},{"uid":"f2a04e03ed668f79","name":"请求头","source":"f2a04e03ed668f79.txt","type":"text/plain","size":45},{"uid":"354443afcf4bfa0","name":"请求参数","source":"354443afcf4bfa0.json","type":"application/json","size":58},{"uid":"c198f088dd06a96d","name":"响应信息","source":"c198f088dd06a96d.txt","type":"text/plain","size":14},{"uid":"4b2c023944709129","name":"响应体","source":"4b2c023944709129.json","type":"application/json","size":214}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/login'"},{"name":"headers","value":"None"},{"name":"params","value":"None"},{"name":"json","value":"{'username': 'admin1155', 'password': 'admin1155'}"},{"name":"files","value":"None"},{"name":"token","value":"None"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":1},{"name":"task_id","time":{"start":1753987840050,"stop":1753987840077,"duration":27},"status":"passed","steps":[{"name":"发送请求：'POST' '/crawler/tasks'","time":{"start":1753987840050,"stop":1753987840077,"duration":27},"status":"passed","steps":[],"attachments":[{"uid":"a5de57c06bda336b","name":"请求信息","source":"a5de57c06bda336b.txt","type":"text/plain","size":44},{"uid":"92f004adda529e5","name":"请求头","source":"92f004adda529e5.txt","type":"text/plain","size":209},{"uid":"bec74e5423e1e9f2","name":"请求参数","source":"bec74e5423e1e9f2.json","type":"application/json","size":141},{"uid":"a7210d06a68b916","name":"响应信息","source":"a7210d06a68b916.txt","type":"text/plain","size":14},{"uid":"42d9de3242128cbb","name":"响应体","source":"42d9de3242128cbb.json","type":"application/json","size":326}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/crawler/tasks'"},{"name":"headers","value":"None"},{"name":"params","value":"None"},{"name":"json","value":"{'processName': '测试任务_None', 'asinList': 'B08XJ8J7SZ', 'requiredInfo': ['price'], 'platform': 'Amazon', 'timeCycle': 'daily'}"},{"name":"files","value":"None"},{"name":"token","value":"'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODc4NDAsImV4cCI6MTc1Mzk5NTA0MH0.GdXFnWaHg6QhMcICIMgASts979xcL8kWyGKv4Weqx0o'"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"验证响应：状态码200，消息None","time":{"start":1753987840077,"stop":1753987840077,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"response","value":"<Response [200]>"},{"name":"expected_code","value":"200"},{"name":"expected_success","value":"True"},{"name":"expected_message","value":"None"}],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":2}],"testStage":{"status":"failed","statusMessage":"AssertionError: 消息不符：预期任务已恢复执行，实际操作成功，完整response：{\"success\":true,\"message\":\"操作成功\",\"data\":\"任务已恢复执行\"}\nassert '操作成功' == '任务已恢复执行'\n  - 任务已恢复执行\n  + 操作成功","statusTrace":"case = {'case_id': 'task_009', 'expected_code': 200, 'expected_message': '任务已恢复执行', 'expected_success': True, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODc4NDAsImV4cCI6MTc1Mzk5NTA0MH0.GdXFnWaHg6QhMcICIMgASts979xcL8kWyGKv4Weqx0o'\ntask_id = 263\n\n    @allure.feature(\"爬虫任务模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_crawler_tasks(case, auth_token, task_id):\n        allure.story(case[\"name\"])\n        allure.title(f\"{case['case_id']}: {case['name']}\")\n    \n        # 替换任务ID占位符\n        if \"{task_id}\" in case[\"url\"]:\n            case[\"url\"] = case[\"url\"].replace(\"{task_id}\", str(task_id))\n            allure.attach(f\"使用任务ID: {task_id}\", \"测试信息\", allure.attachment_type.TEXT)\n    \n        # --------------------------\n        # 关键修改：处理PPT下载的前置依赖\n        # --------------------------\n        # 1. 若当前是下载PPT的用例（task_017），先启动数据分析并等待完成\n        if case[\"case_id\"] == \"task_017\":\n            allure.attach(\"开始执行数据分析数据分析前置操作\", \"前置依赖\", allure.attachment_type.TEXT)\n    \n            # 1.1 启动数据分析\n            analyze_response = Request.send_request(\n                \"POST\", f\"/crawler/tasks/{task_id}/analyze\",  # 对应task_016的接口\n                token=auth_token\n            )\n            assert_response(\n                analyze_response,\n                200,\n                expected_success=True,\n                expected_message=\"数据分析已启动\"  # 匹配task_016的预期消息\n            )\n            allure.attach(\"数据分析已启动\", \"前置操作结果\", allure.attachment_type.TEXT)\n    \n            # 1.2 轮询等待分析完成（复用同test_download_analyzed_ppt的逻辑）\n            max_wait_seconds = 180\n            check_interval = 5\n            elapsed_seconds = 0\n            status = \"PROCESSING\"\n    \n            while elapsed_seconds < max_wait_seconds and status == \"PROCESSING\":\n                # 查询当前状态\n                status_response = Request.send_request(\n                    \"GET\", f\"/crawler/tasks/{task_id}/analyze/status\",\n                    token=auth_token\n                )\n                assert_response(status_response, 200)\n                status = status_response.json()[\"data\"]\n                allure.attach(f\"当前分析状态: {status} (等待{elapsed_seconds}秒)\", \"状态轮询\", allure.attachment_type.TEXT)\n    \n                if status == \"PROCESSING\":\n                    time.sleep(check_interval)\n                    elapsed_seconds += check_interval\n    \n            # 1.3 校验分析状态（必须完成才能继续下载）\n            assert status in [\"COMPLETED\", \"FAILED\"], f\"数据分析超时，最终状态：{status}\"\n            if status == \"FAILED\":\n                pytest.fail(\"数据分析失败，无法下载PPT\")  # 分析失败则标记用例失败\n            allure.attach(\"数据分析已完成\", \"前置操作结果\", allure.attachment_type.TEXT)\n    \n        # 预处理请求\n        request_data = preprocess_request(case, auth_token)\n        if \"headers\" in request_data and \"Authorization\" in request_data[\"headers\"]:\n            del request_data[\"headers\"][\"Authorization\"]\n    \n        # 发送请求（对task_017而言，此时已确保分析完成）\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            token=auth_token\n        )\n    \n        # 断言（增加PPT格式校验）\n        try:\n            assert_response(\n                response,\n                expected_code=case[\"expected_code\"],\n                expected_success=case.get(\"expected_success\"),\n                expected_message=case.get(\"expected_message\")\n            )\n            # 额外校验PPT文件类型（对应case中的expected_content_type）\n            if case.get(\"expected_content_type\"):\n                assert case[\"expected_content_type\"] in response.headers[\"Content-Type\"], \\\n                    f\"文件类型错误，预期: {case['expected_content_type']}, 实际: {response.headers['Content-Type']}\"\n        except AssertionError as e:\n            allure.attach(f\"响应内容: {response.text}\", \"断言失败详情\", allure.attachment_type.TEXT)\n>           raise e\n\ntests\\test_crawler_tasks.py:120: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\test_crawler_tasks.py:108: in test_crawler_tasks\n    assert_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [200]>, expected_code = 200\nexpected_success = True, expected_message = '任务已恢复执行'\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n        assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response.text}\"\n    \n        if response.status_code != 200:\n            return\n    \n        try:\n            json_data = response.json()\n        except:\n            assert False, f\"响应不是有效的JSON格式: {response.text}\"\n    \n        if expected_success is not None:\n            assert json_data.get(\"success\") == expected_success, \\\n                f\"success字段不符：预期{expected_success}，实际{json_data.get('success')}，完整response：{response.text}\"\n    \n        if expected_message:\n>           assert json_data.get(\"message\") == expected_message, \\\n                f\"消息不符：预期{expected_message}，实际{json_data.get('message')}，完整response：{response.text}\"\nE           AssertionError: 消息不符：预期任务已恢复执行，实际操作成功，完整response：{\"success\":true,\"message\":\"操作成功\",\"data\":\"任务已恢复执行\"}\nE           assert '操作成功' == '任务已恢复执行'\nE             - 任务已恢复执行\nE             + 操作成功\n\nutils\\test_utils.py:23: AssertionError","steps":[{"name":"发送请求：'POST' '/crawler/tasks/263/run'","time":{"start":1753987840081,"stop":1753987840107,"duration":26},"status":"passed","steps":[],"attachments":[{"uid":"70a2ce16e2311b23","name":"请求信息","source":"70a2ce16e2311b23.txt","type":"text/plain","size":52},{"uid":"91135044b9679554","name":"请求头","source":"91135044b9679554.txt","type":"text/plain","size":209},{"uid":"c815ce75da1e0f68","name":"请求参数","source":"c815ce75da1e0f68.json","type":"application/json","size":10},{"uid":"3542003a3c91d734","name":"响应信息","source":"3542003a3c91d734.txt","type":"text/plain","size":14},{"uid":"32d28854059617f","name":"响应体","source":"32d28854059617f.json","type":"application/json","size":72}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/crawler/tasks/263/run'"},{"name":"headers","value":"{}"},{"name":"params","value":"{}"},{"name":"json","value":"{}"},{"name":"files","value":"None"},{"name":"token","value":"'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODc4NDAsImV4cCI6MTc1Mzk5NTA0MH0.GdXFnWaHg6QhMcICIMgASts979xcL8kWyGKv4Weqx0o'"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"验证响应：状态码200，消息'任务已恢复执行'","time":{"start":1753987840107,"stop":1753987840107,"duration":0},"status":"failed","statusMessage":"AssertionError: 消息不符：预期任务已恢复执行，实际操作成功，完整response：{\"success\":true,\"message\":\"操作成功\",\"data\":\"任务已恢复执行\"}\nassert '操作成功' == '任务已恢复执行'\n  - 任务已恢复执行\n  + 操作成功\n","statusTrace":"  File \"D:\\Anaconda3\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"D:\\工作记录\\项目说明\\api_test\\utils\\test_utils.py\", line 23, in assert_response\n    assert json_data.get(\"message\") == expected_message, \\\n","steps":[],"attachments":[],"parameters":[{"name":"response","value":"<Response [200]>"},{"name":"expected_code","value":"200"},{"name":"expected_success","value":"True"},{"name":"expected_message","value":"'任务已恢复执行'"}],"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[{"uid":"ee50f8cec6ee008f","name":"测试信息","source":"ee50f8cec6ee008f.txt","type":"text/plain","size":19},{"uid":"7ba934f1221e7ef8","name":"断言失败详情","source":"7ba934f1221e7ef8.txt","type":"text/plain","size":86},{"uid":"819a64682bfcd7bb","name":"log","source":"819a64682bfcd7bb.txt","type":"text/plain","size":2676},{"uid":"83703fce20bfe73c","name":"stdout","source":"83703fce20bfe73c.txt","type":"text/plain","size":183},{"uid":"9c4688986736ece1","name":"stderr","source":"9c4688986736ece1.txt","type":"text/plain","size":2164}],"parameters":[],"attachmentsCount":10,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":2},"afterStages":[{"name":"task_id::0","time":{"start":1753987840131,"stop":1753987840155,"duration":24},"status":"passed","steps":[{"name":"发送请求：'DELETE' '/crawler/tasks/263'","time":{"start":1753987840131,"stop":1753987840154,"duration":23},"status":"passed","steps":[],"attachments":[{"uid":"21d0edc8bc243243","name":"请求信息","source":"21d0edc8bc243243.txt","type":"text/plain","size":48},{"uid":"c0a3fa9f00162110","name":"请求头","source":"c0a3fa9f00162110.txt","type":"text/plain","size":209},{"uid":"3e49bc9c1ff614bd","name":"请求参数","source":"3e49bc9c1ff614bd.json","type":"application/json","size":12},{"uid":"51e28916b0cc09b1","name":"响应信息","source":"51e28916b0cc09b1.txt","type":"text/plain","size":14},{"uid":"98c120e6da3d9615","name":"响应体","source":"98c120e6da3d9615.json","type":"application/json","size":69}],"parameters":[{"name":"method","value":"'DELETE'"},{"name":"endpoint","value":"'/crawler/tasks/263'"},{"name":"headers","value":"None"},{"name":"params","value":"None"},{"name":"json","value":"None"},{"name":"files","value":"None"},{"name":"token","value":"'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODc4NDAsImV4cCI6MTc1Mzk5NTA0MH0.GdXFnWaHg6QhMcICIMgASts979xcL8kWyGKv4Weqx0o'"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":1}],"labels":[{"name":"feature","value":"爬虫任务模块"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_crawler_tasks"},{"name":"host","value":"CYJ"},{"name":"thread","value":"22580-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_crawler_tasks"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"case","value":"{'case_id': 'task_009', 'name': '恢复暂停任务', 'method': 'POST', 'url': '/crawler/tasks/{task_id}/run', 'headers': {'Authorization': ''}, 'expected_code': 200, 'expected_success': True, 'expected_message': '任务已恢复执行'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"4c8a52351aa12ca6.json","parameterValues":["{'case_id': 'task_009', 'name': '恢复暂停任务', 'method': 'POST', 'url': '/crawler/tasks/{task_id}/run', 'headers': {'Authorization': ''}, 'expected_code': 200, 'expected_success': True, 'expected_message': '任务已恢复执行'}"]}