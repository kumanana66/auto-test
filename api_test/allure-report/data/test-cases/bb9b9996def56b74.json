{"uid":"bb9b9996def56b74","name":"test_crawler_tasks[case5]","fullName":"tests.test_crawler_tasks#test_crawler_tasks","historyId":"a916ab1511e663c1e8f244b4e3f555e5","time":{"start":1753974331739,"stop":1753974331795,"duration":56},"status":"failed","statusMessage":"AssertionError: 状态码不符：预期400，实际403，完整response：<Response [403]>\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code","statusTrace":"case = {'case_id': 'task_006', 'expected_code': 400, 'expected_message': '请选择时间周期', 'expected_success': False, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5NzQzMzEsImV4cCI6MTc1Mzk4MTUzMX0.Yw09K0jaEN6YMx417AveEIAIIkiF38EpQK1d9y87d1Q'\n\n    @allure.feature(\"爬虫任务模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_crawler_tasks(case, auth_token):\n        allure.story(case[\"name\"])\n        allure.title(case[\"case_id\"] + \": \" + case[\"name\"])\n    \n        # 替换任务ID占位符\n        if \"{task_id}\" in case[\"url\"]:\n            # 先创建一个测试任务获取ID\n            from utils.context import context\n            if not context.get(\"task_id\"):\n                create_response = Request.send_request(\n                    \"POST\", \"/crawler/tasks\",\n                    json={\n                        \"processName\": \"测试任务\",\n                        \"asinList\": \"B08XJ8J7SZ\",\n                        \"requiredInfo\": [\"price\"],\n                        \"platform\": \"Amazon\",\n                        \"timeCycle\": \"daily\"\n                    },\n                    token=auth_token\n                )\n                context.set(\"task_id\", create_response.json()[\"data\"][\"id\"])\n            task_id = context.get(\"task_id\")\n            case[\"url\"] = case[\"url\"].replace(\"{task_id}\", str(task_id))\n    \n        # 预处理请求\n        request_data = preprocess_request(case, auth_token)\n    \n        # 发送请求\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            token=auth_token\n        )\n    \n        # 断言\n>       assert_response(\n            response,\n            expected_code=case[\"expected_code\"],\n            expected_success=case.get(\"expected_success\"),\n            expected_message=case.get(\"expected_message\")\n        )\n\ntests\\test_crawler_tasks.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [403]>, expected_code = 400, expected_success = False\nexpected_message = '请选择时间周期'\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response}\"\nE       AssertionError: 状态码不符：预期400，实际403，完整response：<Response [403]>\nE       assert 403 == 400\nE        +  where 403 = <Response [403]>.status_code\n\nutils\\test_utils.py:7: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":15,"retriesStatusChange":true,"beforeStages":[{"name":"auth_token","time":{"start":1753974331478,"stop":1753974331736,"duration":258},"status":"passed","steps":[{"name":"发送请求：'POST' '/auth/login'","time":{"start":1753974331479,"stop":1753974331735,"duration":256},"status":"passed","steps":[],"attachments":[{"uid":"a0327d69ad6a42ea","name":"请求信息","source":"a0327d69ad6a42ea.json","type":"application/json","size":64},{"uid":"61ef3576f06fa11","name":"响应信息","source":"61ef3576f06fa11.txt","type":"text/plain","size":20},{"uid":"b19d203ca66e2048","name":"响应体","source":"b19d203ca66e2048.json","type":"application/json","size":214}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/login'"},{"name":"headers","value":"None"},{"name":"params","value":"None"},{"name":"json","value":"{'username': 'admin1155', 'password': 'admin1155'}"},{"name":"files","value":"None"},{"name":"token","value":"None"}],"attachmentsCount":3,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":3,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":1}],"testStage":{"status":"failed","statusMessage":"AssertionError: 状态码不符：预期400，实际403，完整response：<Response [403]>\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code","statusTrace":"case = {'case_id': 'task_006', 'expected_code': 400, 'expected_message': '请选择时间周期', 'expected_success': False, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5NzQzMzEsImV4cCI6MTc1Mzk4MTUzMX0.Yw09K0jaEN6YMx417AveEIAIIkiF38EpQK1d9y87d1Q'\n\n    @allure.feature(\"爬虫任务模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_crawler_tasks(case, auth_token):\n        allure.story(case[\"name\"])\n        allure.title(case[\"case_id\"] + \": \" + case[\"name\"])\n    \n        # 替换任务ID占位符\n        if \"{task_id}\" in case[\"url\"]:\n            # 先创建一个测试任务获取ID\n            from utils.context import context\n            if not context.get(\"task_id\"):\n                create_response = Request.send_request(\n                    \"POST\", \"/crawler/tasks\",\n                    json={\n                        \"processName\": \"测试任务\",\n                        \"asinList\": \"B08XJ8J7SZ\",\n                        \"requiredInfo\": [\"price\"],\n                        \"platform\": \"Amazon\",\n                        \"timeCycle\": \"daily\"\n                    },\n                    token=auth_token\n                )\n                context.set(\"task_id\", create_response.json()[\"data\"][\"id\"])\n            task_id = context.get(\"task_id\")\n            case[\"url\"] = case[\"url\"].replace(\"{task_id}\", str(task_id))\n    \n        # 预处理请求\n        request_data = preprocess_request(case, auth_token)\n    \n        # 发送请求\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            token=auth_token\n        )\n    \n        # 断言\n>       assert_response(\n            response,\n            expected_code=case[\"expected_code\"],\n            expected_success=case.get(\"expected_success\"),\n            expected_message=case.get(\"expected_message\")\n        )\n\ntests\\test_crawler_tasks.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [403]>, expected_code = 400, expected_success = False\nexpected_message = '请选择时间周期'\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response}\"\nE       AssertionError: 状态码不符：预期400，实际403，完整response：<Response [403]>\nE       assert 403 == 400\nE        +  where 403 = <Response [403]>.status_code\n\nutils\\test_utils.py:7: AssertionError","steps":[{"name":"发送请求：'POST' '/crawler/tasks'","time":{"start":1753974331740,"stop":1753974331790,"duration":50},"status":"passed","steps":[],"attachments":[{"uid":"610eecaa73493976","name":"请求信息","source":"610eecaa73493976.json","type":"application/json","size":144},{"uid":"d04d695f6eb87da3","name":"响应信息","source":"d04d695f6eb87da3.txt","type":"text/plain","size":20},{"uid":"2cd9af89fd717522","name":"响应体","source":"2cd9af89fd717522.json","type":"application/json","size":0}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/crawler/tasks'"},{"name":"headers","value":"{'Authorization': 'Bearer '}"},{"name":"params","value":"{}"},{"name":"json","value":"{'processName': '亚马逊监控', 'asinList': 'B08XJ8J7SZ,B08LGD78Q5', 'requiredInfo': ['price', 'review'], 'platform': 'Amazon'}"},{"name":"files","value":"None"},{"name":"token","value":"'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5NzQzMzEsImV4cCI6MTc1Mzk4MTUzMX0.Yw09K0jaEN6YMx417AveEIAIIkiF38EpQK1d9y87d1Q'"}],"attachmentsCount":3,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"验证响应：状态码400，消息'请选择时间周期'","time":{"start":1753974331791,"stop":1753974331791,"duration":0},"status":"failed","statusMessage":"AssertionError: 状态码不符：预期400，实际403，完整response：<Response [403]>\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code\n","statusTrace":"  File \"D:\\Anaconda3\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"D:\\工作记录\\项目说明\\api_test\\utils\\test_utils.py\", line 7, in assert_response\n    assert response.status_code == expected_code, \\\n","steps":[],"attachments":[],"parameters":[{"name":"response","value":"<Response [403]>"},{"name":"expected_code","value":"400"},{"name":"expected_success","value":"False"},{"name":"expected_message","value":"'请选择时间周期'"}],"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[{"uid":"7480f5b8030080ae","name":"stdout","source":"7480f5b8030080ae.txt","type":"text/plain","size":183}],"parameters":[],"attachmentsCount":4,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":2},"afterStages":[],"labels":[{"name":"feature","value":"爬虫任务模块"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_crawler_tasks"},{"name":"host","value":"CYJ"},{"name":"thread","value":"22344-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_crawler_tasks"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"case","value":"{'case_id': 'task_006', 'name': '周期未选择', 'method': 'POST', 'url': '/crawler/tasks', 'headers': {'Authorization': 'Bearer '}, 'json': {'processName': '亚马逊监控', 'asinList': 'B08XJ8J7SZ,B08LGD78Q5', 'requiredInfo': ['price', 'review'], 'platform': 'Amazon'}, 'expected_code': 400, 'expected_success': False, 'expected_message': '请选择时间周期'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"f7068868bbe0966e","status":"failed","statusDetails":"AssertionError: 状态码不符：预期400，实际403，完整response：<Response [403]>\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code","time":{"start":1753973753865,"stop":1753973753886,"duration":21}},{"uid":"ff280bcbc2284a66","status":"failed","statusDetails":"AssertionError: 状态码不符：预期400，实际403，完整response：<Response [403]>\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code","time":{"start":1753973619745,"stop":1753973619765,"duration":20}},{"uid":"fdbef6d048a54b98","status":"failed","statusDetails":"AssertionError: 状态码不符：预期400，实际403，完整response：<Response [403]>\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code","time":{"start":1753972558971,"stop":1753972559005,"duration":34}},{"uid":"7f0b43b15652ad54","status":"failed","statusDetails":"AssertionError: 状态码不符：预期400，实际403，完整response：<Response [403]>\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code","time":{"start":1753971206551,"stop":1753971206565,"duration":14}},{"uid":"b29970335b751149","status":"failed","statusDetails":"AssertionError: 状态码不符：预期400，实际403，完整response:<Response [403]>\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code","time":{"start":1753970476998,"stop":1753970477030,"duration":32}},{"uid":"45030dce0fa00ce1","status":"broken","statusDetails":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1753970252907,"stop":1753970252929,"duration":22}},{"uid":"c3d6fb48aa3397c8","status":"broken","statusDetails":"UnboundLocalError: cannot access local variable 'json_data' where it is not associated with a value","time":{"start":1753969915041,"stop":1753969915058,"duration":17}},{"uid":"30aaff1f9dcadc36","status":"failed","statusDetails":"AssertionError: 状态码不符：预期400，实际403\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code","time":{"start":1753969580159,"stop":1753969580199,"duration":40}},{"uid":"a8e8ae0bdc56df2d","status":"failed","statusDetails":"AssertionError: 状态码不符：预期400，实际403\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code","time":{"start":1753969356288,"stop":1753969356328,"duration":40}},{"uid":"da5d1acaf36dc2ee","status":"failed","statusDetails":"AssertionError: 状态码不符：预期400，实际403\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code","time":{"start":1753969087744,"stop":1753969087765,"duration":21}},{"uid":"812edae8be03967","status":"failed","statusDetails":"AssertionError: 状态码不符：预期400，实际403\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code","time":{"start":1753968138396,"stop":1753968138415,"duration":19}},{"uid":"93a286580b152a68","status":"failed","statusDetails":"AssertionError: 状态码不符：预期400，实际403\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code","time":{"start":1753967368346,"stop":1753967368365,"duration":19}},{"uid":"36b7dbd0e2b2ff1a","status":"broken","statusDetails":"KeyError: 'url'","time":{"start":1753967266529,"stop":1753967266529,"duration":0}},{"uid":"dac2efb1bc6fcfbf","status":"broken","statusDetails":"requests.exceptions.ConnectionError: HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /api/auth/login (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x000001657E09DE50>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。'))","time":{"start":1753967169292,"stop":1753967169292,"duration":0}},{"uid":"67da7b353d6a6601","status":"broken","statusDetails":"KeyError: 'url'","time":{"start":1753966888392,"stop":1753966888392,"duration":0}}],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"bb9b9996def56b74.json","parameterValues":["{'case_id': 'task_006', 'name': '周期未选择', 'method': 'POST', 'url': '/crawler/tasks', 'headers': {'Authorization': 'Bearer '}, 'json': {'processName': '亚马逊监控', 'asinList': 'B08XJ8J7SZ,B08LGD78Q5', 'requiredInfo': ['price', 'review'], 'platform': 'Amazon'}, 'expected_code': 400, 'expected_success': False, 'expected_message': '请选择时间周期'}"]}