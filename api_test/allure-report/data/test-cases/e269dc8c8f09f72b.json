{"uid":"e269dc8c8f09f72b","name":"test_user_auth[case5]","fullName":"tests.test_user_auth#test_user_auth","historyId":"200195f57f2b1a0da27d43510673ee1e","time":{"start":1753989670331,"stop":1753989671035,"duration":704},"status":"failed","statusMessage":"AssertionError: 状态码不符：预期200，实际500，完整response：{\"success\":false,\"message\":\"发送验证码失败，请稍后重试\",\"data\":null}\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code","statusTrace":"case = {'case_id': 'auth_006', 'expected_code': 400, 'expected_message': '用户名格式无效（仅支持中文、英文、数字、下划线）', 'expected_success': False, ...}\ntest_user = {'email': 'test_llnmsz@example.com', 'token': 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0ZXN0X2xsbm1zeiIsImlhdCI6MTc1Mzk4OTY2OSwiZXhwIjoxNzUzOTk2ODY5fQ.t1Csievh4_I0C5gSZPzqJUq1yIU9j5IBwL9g-sGBJ1M', 'username': 'test_llnmsz'}\nimage_fixtures = {'large_jpg_image': 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmpxsslvxpj.jpg', 'large_png_image': 'C:\\\\Users\\\\huawei\\...ata\\\\Local\\\\Temp\\\\tmphcw6tdgw.txt', 'small_jpg_image': 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmph5yzpin9.jpg', ...}\n\n    @allure.feature(\"用户认证模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_user_auth(case, test_user, image_fixtures):  # 使用test_user而非auth_token\n        allure.story(case[\"name\"])\n        allure.title(f\"{case['case_id']}: {case['name']}\")\n        logger.info(f\"开始执行用例: {case['case_id']} - {case['name']}\")\n    \n        # 1. 文件映射（仅文件上传用例需要）\n        file_map = {\n            \"test_avatar.jpg\": image_fixtures[\"small_jpg_image\"],\n            \"large_avatar.jpg\": image_fixtures[\"large_jpg_image\"],\n            \"test_avatar.png\": image_fixtures[\"small_png_image\"],\n            \"large_avatar.png\": image_fixtures[\"large_png_image\"],\n            \"test_file.txt\": image_fixtures[\"non_image_file\"]\n        }\n    \n        # 2. 预处理请求\n        request_data = preprocess_request(case, test_user[\"token\"], file_map)  # 使用测试用户的token\n    \n        # 3. 处理所有需要验证码的场景（覆盖注册、更新密码等）\n        json_data = request_data.get(\"json\", {})\n        # 确保json_data是字典类型\n        if not isinstance(json_data, dict):\n            json_data = {}\n            logger.warning(\"json_data不是字典类型，已初始化为空字典\")\n    \n        # 处理verifyCode占位符\n        verify_code_value = json_data.get(\"verifyCode\", \"\")\n        # 确保verify_code_value是字符串\n        if not isinstance(verify_code_value, str):\n            verify_code_value = str(verify_code_value) if verify_code_value is not None else \"\"\n    \n        if verify_code_value == \"{verify_code}\":\n            # 优先从请求json中取email，若不存在则报错（避免使用错误邮箱）\n            email = json_data.get(\"email\")\n            assert email is not None, \"注册请求中未包含email字段，无法获取验证码\"\n>           verify_code = send_and_get_verify_code(email)\n\ntests\\test_user_auth.py:82: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\test_user_auth.py:22: in send_and_get_verify_code\n    assert_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [500]>, expected_code = 200\nexpected_success = True, expected_message = '操作成功', is_file = False\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None, is_file=False):\n        \"\"\"\n        新增is_file参数：标记是否为文件下载接口（无需JSON解析）\n        \"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response.text}\"\nE       AssertionError: 状态码不符：预期200，实际500，完整response：{\"success\":false,\"message\":\"发送验证码失败，请稍后重试\",\"data\":null}\nE       assert 500 == 200\nE        +  where 500 = <Response [500]>.status_code\n\nutils\\test_utils.py:9: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"test_user","time":{"start":1753989668632,"stop":1753989669740,"duration":1108},"status":"passed","steps":[{"name":"发送请求：'POST' '/auth/send-verify-code'","time":{"start":1753989668632,"stop":1753989669499,"duration":867},"status":"passed","steps":[],"attachments":[{"uid":"aecdd669175552","name":"请求信息","source":"aecdd669175552.txt","type":"text/plain","size":52},{"uid":"f5312fbdc78faca2","name":"请求头","source":"f5312fbdc78faca2.txt","type":"text/plain","size":45},{"uid":"1fc9f0ee33de3c6b","name":"请求参数","source":"1fc9f0ee33de3c6b.json","type":"application/json","size":44},{"uid":"9308d6b268b4d32","name":"响应信息","source":"9308d6b268b4d32.txt","type":"text/plain","size":14},{"uid":"e5177a900771308b","name":"响应体","source":"e5177a900771308b.json","type":"application/json","size":84}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/send-verify-code'"},{"name":"headers","value":"None"},{"name":"params","value":"{'email': 'test_llnmsz@example.com'}"},{"name":"json","value":"None"},{"name":"files","value":"None"},{"name":"token","value":"None"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"从数据库获取验证码：'test_llnmsz@example.com'","time":{"start":1753989669499,"stop":1753989669504,"duration":5},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"email","value":"'test_llnmsz@example.com'"}],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"发送请求：'POST' '/auth/register'","time":{"start":1753989669505,"stop":1753989669623,"duration":118},"status":"passed","steps":[],"attachments":[{"uid":"b4e1d4323d2220ec","name":"请求信息","source":"b4e1d4323d2220ec.txt","type":"text/plain","size":44},{"uid":"5e79b5fa827ad6a1","name":"请求头","source":"5e79b5fa827ad6a1.txt","type":"text/plain","size":45},{"uid":"1f23be2105d55589","name":"请求参数","source":"1f23be2105d55589.json","type":"application/json","size":121},{"uid":"77c3b6622b408ba1","name":"响应信息","source":"77c3b6622b408ba1.txt","type":"text/plain","size":14},{"uid":"86c8412f43878900","name":"响应体","source":"86c8412f43878900.json","type":"application/json","size":53}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/register'"},{"name":"headers","value":"None"},{"name":"params","value":"None"},{"name":"json","value":"{'username': 'test_llnmsz', 'password': 'Test123456', 'email': 'test_llnmsz@example.com', 'verifyCode': '085795'}"},{"name":"files","value":"None"},{"name":"token","value":"None"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"发送请求：'POST' '/auth/login'","time":{"start":1753989669623,"stop":1753989669740,"duration":117},"status":"passed","steps":[],"attachments":[{"uid":"3ace69ad3e8b47a6","name":"请求信息","source":"3ace69ad3e8b47a6.txt","type":"text/plain","size":41},{"uid":"82bac520ab3e7d2f","name":"请求头","source":"82bac520ab3e7d2f.txt","type":"text/plain","size":45},{"uid":"cd3b43387b0de6f7","name":"请求参数","source":"cd3b43387b0de6f7.json","type":"application/json","size":61},{"uid":"1f9b29b2bba039e7","name":"响应信息","source":"1f9b29b2bba039e7.txt","type":"text/plain","size":14},{"uid":"5e609ab605854f2b","name":"响应体","source":"5e609ab605854f2b.json","type":"application/json","size":217}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/login'"},{"name":"headers","value":"None"},{"name":"params","value":"None"},{"name":"json","value":"{'username': 'test_llnmsz', 'password': 'Test123456'}"},{"name":"files","value":"None"},{"name":"token","value":"None"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":15,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":4},{"name":"small_jpg_image","time":{"start":1753989669740,"stop":1753989669803,"duration":63},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_jpg_image","time":{"start":1753989669804,"stop":1753989670053,"duration":249},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"small_png_image","time":{"start":1753989670053,"stop":1753989670080,"duration":27},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_png_image","time":{"start":1753989670080,"stop":1753989670330,"duration":250},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"non_image_file","time":{"start":1753989670330,"stop":1753989670331,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"image_fixtures","time":{"start":1753989670331,"stop":1753989670331,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: 状态码不符：预期200，实际500，完整response：{\"success\":false,\"message\":\"发送验证码失败，请稍后重试\",\"data\":null}\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code","statusTrace":"case = {'case_id': 'auth_006', 'expected_code': 400, 'expected_message': '用户名格式无效（仅支持中文、英文、数字、下划线）', 'expected_success': False, ...}\ntest_user = {'email': 'test_llnmsz@example.com', 'token': 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0ZXN0X2xsbm1zeiIsImlhdCI6MTc1Mzk4OTY2OSwiZXhwIjoxNzUzOTk2ODY5fQ.t1Csievh4_I0C5gSZPzqJUq1yIU9j5IBwL9g-sGBJ1M', 'username': 'test_llnmsz'}\nimage_fixtures = {'large_jpg_image': 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmpxsslvxpj.jpg', 'large_png_image': 'C:\\\\Users\\\\huawei\\...ata\\\\Local\\\\Temp\\\\tmphcw6tdgw.txt', 'small_jpg_image': 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmph5yzpin9.jpg', ...}\n\n    @allure.feature(\"用户认证模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_user_auth(case, test_user, image_fixtures):  # 使用test_user而非auth_token\n        allure.story(case[\"name\"])\n        allure.title(f\"{case['case_id']}: {case['name']}\")\n        logger.info(f\"开始执行用例: {case['case_id']} - {case['name']}\")\n    \n        # 1. 文件映射（仅文件上传用例需要）\n        file_map = {\n            \"test_avatar.jpg\": image_fixtures[\"small_jpg_image\"],\n            \"large_avatar.jpg\": image_fixtures[\"large_jpg_image\"],\n            \"test_avatar.png\": image_fixtures[\"small_png_image\"],\n            \"large_avatar.png\": image_fixtures[\"large_png_image\"],\n            \"test_file.txt\": image_fixtures[\"non_image_file\"]\n        }\n    \n        # 2. 预处理请求\n        request_data = preprocess_request(case, test_user[\"token\"], file_map)  # 使用测试用户的token\n    \n        # 3. 处理所有需要验证码的场景（覆盖注册、更新密码等）\n        json_data = request_data.get(\"json\", {})\n        # 确保json_data是字典类型\n        if not isinstance(json_data, dict):\n            json_data = {}\n            logger.warning(\"json_data不是字典类型，已初始化为空字典\")\n    \n        # 处理verifyCode占位符\n        verify_code_value = json_data.get(\"verifyCode\", \"\")\n        # 确保verify_code_value是字符串\n        if not isinstance(verify_code_value, str):\n            verify_code_value = str(verify_code_value) if verify_code_value is not None else \"\"\n    \n        if verify_code_value == \"{verify_code}\":\n            # 优先从请求json中取email，若不存在则报错（避免使用错误邮箱）\n            email = json_data.get(\"email\")\n            assert email is not None, \"注册请求中未包含email字段，无法获取验证码\"\n>           verify_code = send_and_get_verify_code(email)\n\ntests\\test_user_auth.py:82: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\test_user_auth.py:22: in send_and_get_verify_code\n    assert_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [500]>, expected_code = 200\nexpected_success = True, expected_message = '操作成功', is_file = False\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None, is_file=False):\n        \"\"\"\n        新增is_file参数：标记是否为文件下载接口（无需JSON解析）\n        \"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response.text}\"\nE       AssertionError: 状态码不符：预期200，实际500，完整response：{\"success\":false,\"message\":\"发送验证码失败，请稍后重试\",\"data\":null}\nE       assert 500 == 200\nE        +  where 500 = <Response [500]>.status_code\n\nutils\\test_utils.py:9: AssertionError","steps":[{"name":"发送请求：'POST' '/auth/send-verify-code'","time":{"start":1753989670332,"stop":1753989671034,"duration":702},"status":"passed","steps":[],"attachments":[{"uid":"c1c88cc6af0bcd20","name":"请求信息","source":"c1c88cc6af0bcd20.txt","type":"text/plain","size":52},{"uid":"20c6afe158334bca","name":"请求头","source":"20c6afe158334bca.txt","type":"text/plain","size":45},{"uid":"15e174fc4d23870f","name":"请求参数","source":"15e174fc4d23870f.json","type":"application/json","size":44},{"uid":"1cad7d47c20ad528","name":"响应信息","source":"1cad7d47c20ad528.txt","type":"text/plain","size":14},{"uid":"a3baa28dd853bdc3","name":"响应体","source":"a3baa28dd853bdc3.json","type":"application/json","size":81}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/send-verify-code'"},{"name":"headers","value":"None"},{"name":"params","value":"{'email': 'test_yfkxta@example.com'}"},{"name":"json","value":"None"},{"name":"files","value":"None"},{"name":"token","value":"None"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"验证响应：状态码200，消息'操作成功'","time":{"start":1753989671034,"stop":1753989671034,"duration":0},"status":"failed","statusMessage":"AssertionError: 状态码不符：预期200，实际500，完整response：{\"success\":false,\"message\":\"发送验证码失败，请稍后重试\",\"data\":null}\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code\n","statusTrace":"  File \"D:\\Anaconda3\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"D:\\工作记录\\项目说明\\api_test\\utils\\test_utils.py\", line 9, in assert_response\n    assert response.status_code == expected_code, \\\n","steps":[],"attachments":[],"parameters":[{"name":"response","value":"<Response [500]>"},{"name":"expected_code","value":"200"},{"name":"expected_success","value":"True"},{"name":"expected_message","value":"'操作成功'"},{"name":"is_file","value":"False"}],"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[{"uid":"c1cb323c8fdf353b","name":"log","source":"c1cb323c8fdf353b.txt","type":"text/plain","size":1842},{"uid":"4a5951412c1ee2d7","name":"stderr","source":"4a5951412c1ee2d7.txt","type":"text/plain","size":1377}],"parameters":[],"attachmentsCount":7,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":2},"afterStages":[{"name":"non_image_file::0","time":{"start":1753989671049,"stop":1753989671051,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_png_image::0","time":{"start":1753989671052,"stop":1753989671054,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"small_png_image::0","time":{"start":1753989671055,"stop":1753989671056,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_jpg_image::0","time":{"start":1753989671057,"stop":1753989671061,"duration":4},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"small_jpg_image::0","time":{"start":1753989671062,"stop":1753989671064,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"test_user::0","time":{"start":1753989671064,"stop":1753989671074,"duration":10},"status":"passed","steps":[{"name":"清理测试数据：'test_llnmsz@example.com'","time":{"start":1753989671064,"stop":1753989671073,"duration":9},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"email","value":"'test_llnmsz@example.com'"}],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":1}],"labels":[{"name":"feature","value":"用户认证模块"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_user_auth"},{"name":"host","value":"CYJ"},{"name":"thread","value":"14532-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_user_auth"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"case","value":"{'case_id': 'auth_006', 'name': '用户名包含特殊符号', 'method': 'POST', 'url': '/auth/register', 'json': {'username': 'test@1', 'password': 'Test123456', 'email': 'test_yfkxta@example.com', 'verifyCode': '{verify_code}'}, 'expected_code': 400, 'expected_success': False, 'expected_message': '用户名格式无效（仅支持中文、英文、数字、下划线）'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"e269dc8c8f09f72b.json","parameterValues":["{'case_id': 'auth_006', 'name': '用户名包含特殊符号', 'method': 'POST', 'url': '/auth/register', 'json': {'username': 'test@1', 'password': 'Test123456', 'email': 'test_yfkxta@example.com', 'verifyCode': '{verify_code}'}, 'expected_code': 400, 'expected_success': False, 'expected_message': '用户名格式无效（仅支持中文、英文、数字、下划线）'}"]}