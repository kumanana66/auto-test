{"uid":"ba4156e66375b1a5","name":"test_user_auth[case25]","fullName":"tests.test_user_auth#test_user_auth","historyId":"e36a813ee64f39be5e678bd480dc6721","time":{"start":1753986243928,"stop":1753986243962,"duration":34},"status":"failed","statusMessage":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","statusTrace":"case = {'case_id': 'auth_026', 'expected_code': 200, 'expected_content_type': 'application/json', 'expected_success': True, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODYyNDEsImV4cCI6MTc1Mzk5MzQ0MX0.cpih02lFEpOE0dLMReL85LS5U0DKhun7GOGyyKo8838'\nsmall_jpg_image = 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmpla354zof.jpg'\nlarge_jpg_image = 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmpp11klnwg.jpg'\nsmall_png_image = 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmpsmad0rju.png'\nlarge_png_image = 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmpanqr3cnb.png'\nnon_image_file = 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmph2uohqns.txt'\n\n    @allure.feature(\"用户认证模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_user_auth(case, auth_token, small_jpg_image, large_jpg_image, small_png_image, large_png_image, non_image_file):\n        allure.story(case[\"name\"])\n        allure.title(f\"{case['case_id']}: {case['name']}\")\n        logger.info(f\"开始执行用例: {case['case_id']} - {case['name']}\")\n    \n        # 文件映射\n        file_map = {\n            \"test_avatar.jpg\": small_jpg_image,\n            \"large_avatar.jpg\": large_jpg_image,\n            \"test_avatar.png\": small_png_image,\n            \"large_avatar.png\": large_png_image,\n            \"test_file.txt\": non_image_file\n        }\n    \n        # 预处理请求\n        request_data = preprocess_request(case, auth_token, file_map)\n    \n        # 注册用例处理验证码\n        if (case[\"case_id\"].startswith(\"auth_00\")\n            and case[\"method\"] == \"POST\"\n            and case[\"url\"] == \"/auth/register\"):\n    \n            email = request_data[\"json\"][\"email\"]\n            verify_code = send_and_get_verify_code(email)\n            request_data[\"json\"][\"verifyCode\"] = verify_code\n            logger.info(f\"为注册邮箱 {email} 填充验证码: {verify_code}\")\n    \n        # 4. auth_029：未登录状态上传头像\n        use_token = case[\"case_id\"] != \"auth_029\"\n        logger.info(f\"是否使用Token: {use_token}\")\n        current_token = auth_token if use_token else None\n    \n        # 发送请求\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            files=request_data.get(\"files\"),\n            token=current_token\n        )\n    \n        # 5. 增强断言信息（便于定位问题）\n        try:\n>           assert_response(\n                response,\n                expected_code=case[\"expected_code\"],\n                expected_success=case.get(\"expected_success\"),\n                expected_message=case.get(\"expected_message\")\n            )\n\ntests\\test_user_auth.py:75: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [403]>, expected_code = 200\nexpected_success = True, expected_message = None\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response}\"\nE       AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nE       assert 403 == 200\nE        +  where 403 = <Response [403]>.status_code\n\nutils\\test_utils.py:7: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":20,"retriesStatusChange":true,"beforeStages":[{"name":"auth_token","time":{"start":1753986241509,"stop":1753986242002,"duration":493},"status":"passed","steps":[{"name":"发送请求：'POST' '/auth/login'","time":{"start":1753986241509,"stop":1753986242002,"duration":493},"status":"passed","steps":[],"attachments":[{"uid":"9e298cc06afc19aa","name":"请求信息","source":"9e298cc06afc19aa.txt","type":"text/plain","size":41},{"uid":"b7116412120e1002","name":"请求头","source":"b7116412120e1002.txt","type":"text/plain","size":45},{"uid":"c1290e8a5c17cadd","name":"请求参数","source":"c1290e8a5c17cadd.json","type":"application/json","size":58},{"uid":"b313fd80db03e075","name":"响应信息","source":"b313fd80db03e075.txt","type":"text/plain","size":14},{"uid":"369f96bb896159df","name":"响应体","source":"369f96bb896159df.json","type":"application/json","size":214}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/login'"},{"name":"headers","value":"None"},{"name":"params","value":"None"},{"name":"json","value":"{'username': 'admin1155', 'password': 'admin1155'}"},{"name":"files","value":"None"},{"name":"token","value":"None"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":1},{"name":"small_jpg_image","time":{"start":1753986242003,"stop":1753986242254,"duration":251},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_jpg_image","time":{"start":1753986242254,"stop":1753986243180,"duration":926},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"small_png_image","time":{"start":1753986243180,"stop":1753986243250,"duration":70},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_png_image","time":{"start":1753986243250,"stop":1753986243923,"duration":673},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"non_image_file","time":{"start":1753986243923,"stop":1753986243925,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","statusTrace":"case = {'case_id': 'auth_026', 'expected_code': 200, 'expected_content_type': 'application/json', 'expected_success': True, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODYyNDEsImV4cCI6MTc1Mzk5MzQ0MX0.cpih02lFEpOE0dLMReL85LS5U0DKhun7GOGyyKo8838'\nsmall_jpg_image = 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmpla354zof.jpg'\nlarge_jpg_image = 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmpp11klnwg.jpg'\nsmall_png_image = 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmpsmad0rju.png'\nlarge_png_image = 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmpanqr3cnb.png'\nnon_image_file = 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmph2uohqns.txt'\n\n    @allure.feature(\"用户认证模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_user_auth(case, auth_token, small_jpg_image, large_jpg_image, small_png_image, large_png_image, non_image_file):\n        allure.story(case[\"name\"])\n        allure.title(f\"{case['case_id']}: {case['name']}\")\n        logger.info(f\"开始执行用例: {case['case_id']} - {case['name']}\")\n    \n        # 文件映射\n        file_map = {\n            \"test_avatar.jpg\": small_jpg_image,\n            \"large_avatar.jpg\": large_jpg_image,\n            \"test_avatar.png\": small_png_image,\n            \"large_avatar.png\": large_png_image,\n            \"test_file.txt\": non_image_file\n        }\n    \n        # 预处理请求\n        request_data = preprocess_request(case, auth_token, file_map)\n    \n        # 注册用例处理验证码\n        if (case[\"case_id\"].startswith(\"auth_00\")\n            and case[\"method\"] == \"POST\"\n            and case[\"url\"] == \"/auth/register\"):\n    \n            email = request_data[\"json\"][\"email\"]\n            verify_code = send_and_get_verify_code(email)\n            request_data[\"json\"][\"verifyCode\"] = verify_code\n            logger.info(f\"为注册邮箱 {email} 填充验证码: {verify_code}\")\n    \n        # 4. auth_029：未登录状态上传头像\n        use_token = case[\"case_id\"] != \"auth_029\"\n        logger.info(f\"是否使用Token: {use_token}\")\n        current_token = auth_token if use_token else None\n    \n        # 发送请求\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            files=request_data.get(\"files\"),\n            token=current_token\n        )\n    \n        # 5. 增强断言信息（便于定位问题）\n        try:\n>           assert_response(\n                response,\n                expected_code=case[\"expected_code\"],\n                expected_success=case.get(\"expected_success\"),\n                expected_message=case.get(\"expected_message\")\n            )\n\ntests\\test_user_auth.py:75: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [403]>, expected_code = 200\nexpected_success = True, expected_message = None\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response}\"\nE       AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nE       assert 403 == 200\nE        +  where 403 = <Response [403]>.status_code\n\nutils\\test_utils.py:7: AssertionError","steps":[{"name":"发送请求：'POST' '/auth/upload/avatar'","time":{"start":1753986243930,"stop":1753986243953,"duration":23},"status":"passed","steps":[],"attachments":[{"uid":"2ed46b44a78dea29","name":"请求信息","source":"2ed46b44a78dea29.txt","type":"text/plain","size":49},{"uid":"4e7973eaaffd31dc","name":"请求头","source":"4e7973eaaffd31dc.txt","type":"text/plain","size":37},{"uid":"9675cb78a6d2f738","name":"请求参数","source":"9675cb78a6d2f738.json","type":"application/json","size":10},{"uid":"fbefdc5eb6cf7411","name":"响应信息","source":"fbefdc5eb6cf7411.txt","type":"text/plain","size":14},{"uid":"b20d50d5e0a81e02","name":"响应体","source":"b20d50d5e0a81e02.json","type":"application/json","size":0}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/upload/avatar'"},{"name":"headers","value":"{'Authorization': 'Bearer ', 'Content-Type': 'multipart/form-data'}"},{"name":"params","value":"{}"},{"name":"json","value":"{}"},{"name":"files","value":"{'file': <_io.BufferedReader name='C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmpsmad0rju.png'>}"},{"name":"token","value":"'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODYyNDEsImV4cCI6MTc1Mzk5MzQ0MX0.cpih02lFEpOE0dLMReL85LS5U0DKhun7GOGyyKo8838'"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"验证响应：状态码200，消息None","time":{"start":1753986243953,"stop":1753986243954,"duration":1},"status":"failed","statusMessage":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code\n","statusTrace":"  File \"D:\\Anaconda3\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"D:\\工作记录\\项目说明\\api_test\\utils\\test_utils.py\", line 7, in assert_response\n    assert response.status_code == expected_code, \\\n","steps":[],"attachments":[],"parameters":[{"name":"response","value":"<Response [403]>"},{"name":"expected_code","value":"200"},{"name":"expected_success","value":"True"},{"name":"expected_message","value":"None"}],"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[{"uid":"7b13a298801b2150","name":"失败信息","source":"7b13a298801b2150.txt","type":"text/plain","size":18},{"uid":"a502d4375cba73e0","name":"调试信息","source":"a502d4375cba73e0.txt","type":"text/plain","size":17},{"uid":"d05bc0bc908327f9","name":"log","source":"d05bc0bc908327f9.txt","type":"text/plain","size":1344},{"uid":"c6367464144ce692","name":"stdout","source":"c6367464144ce692.txt","type":"text/plain","size":235},{"uid":"d64917474a28af3c","name":"stderr","source":"d64917474a28af3c.txt","type":"text/plain","size":1078}],"parameters":[],"attachmentsCount":10,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":2},"afterStages":[{"name":"non_image_file::0","time":{"start":1753986243981,"stop":1753986243982,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_png_image::0","time":{"start":1753986243984,"stop":1753986243989,"duration":5},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"small_png_image::0","time":{"start":1753986243992,"stop":1753986244035,"duration":43},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_jpg_image::0","time":{"start":1753986244039,"stop":1753986244046,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"small_jpg_image::0","time":{"start":1753986244048,"stop":1753986244051,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"labels":[{"name":"feature","value":"用户认证模块"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_user_auth"},{"name":"host","value":"CYJ"},{"name":"thread","value":"3924-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_user_auth"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"case","value":"{'case_id': 'auth_026', 'name': '上传2MB以内的PNG图片', 'method': 'POST', 'url': '/auth/upload/avatar', 'headers': {'Authorization': 'Bearer ', 'Content-Type': 'multipart/form-data'}, 'files': {'file': 'test_avatar.png'}, 'expected_code': 200, 'expected_success': True, 'expected_content_type': 'application/json'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"b290f2cfbf473ab3","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753985542429,"stop":1753985542438,"duration":9}},{"uid":"5e2d5d6de4f1dd44","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753976492600,"stop":1753976492644,"duration":44}},{"uid":"215725e55459105d","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753976344767,"stop":1753976344801,"duration":34}},{"uid":"4958b4916fc5137b","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753975911491,"stop":1753975911503,"duration":12}},{"uid":"8374135a3661324","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753974406668,"stop":1753974406699,"duration":31}},{"uid":"858dc4e40257849a","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753973828545,"stop":1753973828573,"duration":28}},{"uid":"819570a1e2463b21","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753973675745,"stop":1753973675763,"duration":18}},{"uid":"6ee0d5273c2df387","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753972612739,"stop":1753972612751,"duration":12}},{"uid":"cf50686e65c97a43","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753971281927,"stop":1753971281980,"duration":53}},{"uid":"23557fd4c3a4f1ee","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403，完整response:<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753970531733,"stop":1753970531762,"duration":29}},{"uid":"b189de0c42f9fff5","status":"broken","statusDetails":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1753970307367,"stop":1753970307383,"duration":16}},{"uid":"ab0f99e2dce09e62","status":"broken","statusDetails":"UnboundLocalError: cannot access local variable 'json_data' where it is not associated with a value","time":{"start":1753969971880,"stop":1753969971944,"duration":64}},{"uid":"b54c6bba32644576","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753969638903,"stop":1753969638941,"duration":38}},{"uid":"37ca56af37598036","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753969405172,"stop":1753969405205,"duration":33}},{"uid":"f8a53d12c38aa13","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753969143550,"stop":1753969143589,"duration":39}},{"uid":"eaef44c622a1716e","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753968185755,"stop":1753968185803,"duration":48}},{"uid":"7c56fe8c32237cad","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753967371873,"stop":1753967371892,"duration":19}},{"uid":"4861ad9afec87778","status":"broken","statusDetails":"KeyError: 'url'","time":{"start":1753967267776,"stop":1753967267776,"duration":0}},{"uid":"39f568746892e4e9","status":"broken","statusDetails":"requests.exceptions.ConnectionError: HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /api/auth/login (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x000001657E09DE50>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。'))","time":{"start":1753967195128,"stop":1753967195128,"duration":0}},{"uid":"337c1651d40caa3b","status":"broken","statusDetails":"KeyError: 'url'","time":{"start":1753966889961,"stop":1753966889961,"duration":0}}],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"ba4156e66375b1a5.json","parameterValues":["{'case_id': 'auth_026', 'name': '上传2MB以内的PNG图片', 'method': 'POST', 'url': '/auth/upload/avatar', 'headers': {'Authorization': 'Bearer ', 'Content-Type': 'multipart/form-data'}, 'files': {'file': 'test_avatar.png'}, 'expected_code': 200, 'expected_success': True, 'expected_content_type': 'application/json'}"]}