{"uid":"dfb578812ba46a35","name":"test_crawler_tasks[case2]","fullName":"tests.test_crawler_tasks#test_crawler_tasks","historyId":"f5382af846885b916b592cf595d3b2b7","time":{"start":1753974330632,"stop":1753974330643,"duration":11},"status":"failed","statusMessage":"AssertionError: 状态码不符：预期400，实际403，完整response：<Response [403]>\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code","statusTrace":"case = {'case_id': 'task_003', 'expected_code': 400, 'expected_message': '请输入ASIN列表', 'expected_success': False, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5NzQzMzAsImV4cCI6MTc1Mzk4MTUzMH0.7BxrZiGPcaHHlikXu2w3sRdGJpamIEZNAdhLj76XS-I'\n\n    @allure.feature(\"爬虫任务模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_crawler_tasks(case, auth_token):\n        allure.story(case[\"name\"])\n        allure.title(case[\"case_id\"] + \": \" + case[\"name\"])\n    \n        # 替换任务ID占位符\n        if \"{task_id}\" in case[\"url\"]:\n            # 先创建一个测试任务获取ID\n            from utils.context import context\n            if not context.get(\"task_id\"):\n                create_response = Request.send_request(\n                    \"POST\", \"/crawler/tasks\",\n                    json={\n                        \"processName\": \"测试任务\",\n                        \"asinList\": \"B08XJ8J7SZ\",\n                        \"requiredInfo\": [\"price\"],\n                        \"platform\": \"Amazon\",\n                        \"timeCycle\": \"daily\"\n                    },\n                    token=auth_token\n                )\n                context.set(\"task_id\", create_response.json()[\"data\"][\"id\"])\n            task_id = context.get(\"task_id\")\n            case[\"url\"] = case[\"url\"].replace(\"{task_id}\", str(task_id))\n    \n        # 预处理请求\n        request_data = preprocess_request(case, auth_token)\n    \n        # 发送请求\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            token=auth_token\n        )\n    \n        # 断言\n>       assert_response(\n            response,\n            expected_code=case[\"expected_code\"],\n            expected_success=case.get(\"expected_success\"),\n            expected_message=case.get(\"expected_message\")\n        )\n\ntests\\test_crawler_tasks.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [403]>, expected_code = 400, expected_success = False\nexpected_message = '请输入ASIN列表'\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response}\"\nE       AssertionError: 状态码不符：预期400，实际403，完整response：<Response [403]>\nE       assert 403 == 400\nE        +  where 403 = <Response [403]>.status_code\n\nutils\\test_utils.py:7: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":15,"retriesStatusChange":true,"beforeStages":[{"name":"auth_token","time":{"start":1753974330202,"stop":1753974330630,"duration":428},"status":"passed","steps":[{"name":"发送请求：'POST' '/auth/login'","time":{"start":1753974330203,"stop":1753974330630,"duration":427},"status":"passed","steps":[],"attachments":[{"uid":"1fe5296a094b1b28","name":"请求信息","source":"1fe5296a094b1b28.json","type":"application/json","size":64},{"uid":"b9c87d2c8d7d149f","name":"响应信息","source":"b9c87d2c8d7d149f.txt","type":"text/plain","size":20},{"uid":"be2614ebcd4d5a1a","name":"响应体","source":"be2614ebcd4d5a1a.json","type":"application/json","size":214}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/login'"},{"name":"headers","value":"None"},{"name":"params","value":"None"},{"name":"json","value":"{'username': 'admin1155', 'password': 'admin1155'}"},{"name":"files","value":"None"},{"name":"token","value":"None"}],"attachmentsCount":3,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":3,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":1}],"testStage":{"status":"failed","statusMessage":"AssertionError: 状态码不符：预期400，实际403，完整response：<Response [403]>\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code","statusTrace":"case = {'case_id': 'task_003', 'expected_code': 400, 'expected_message': '请输入ASIN列表', 'expected_success': False, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5NzQzMzAsImV4cCI6MTc1Mzk4MTUzMH0.7BxrZiGPcaHHlikXu2w3sRdGJpamIEZNAdhLj76XS-I'\n\n    @allure.feature(\"爬虫任务模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_crawler_tasks(case, auth_token):\n        allure.story(case[\"name\"])\n        allure.title(case[\"case_id\"] + \": \" + case[\"name\"])\n    \n        # 替换任务ID占位符\n        if \"{task_id}\" in case[\"url\"]:\n            # 先创建一个测试任务获取ID\n            from utils.context import context\n            if not context.get(\"task_id\"):\n                create_response = Request.send_request(\n                    \"POST\", \"/crawler/tasks\",\n                    json={\n                        \"processName\": \"测试任务\",\n                        \"asinList\": \"B08XJ8J7SZ\",\n                        \"requiredInfo\": [\"price\"],\n                        \"platform\": \"Amazon\",\n                        \"timeCycle\": \"daily\"\n                    },\n                    token=auth_token\n                )\n                context.set(\"task_id\", create_response.json()[\"data\"][\"id\"])\n            task_id = context.get(\"task_id\")\n            case[\"url\"] = case[\"url\"].replace(\"{task_id}\", str(task_id))\n    \n        # 预处理请求\n        request_data = preprocess_request(case, auth_token)\n    \n        # 发送请求\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            token=auth_token\n        )\n    \n        # 断言\n>       assert_response(\n            response,\n            expected_code=case[\"expected_code\"],\n            expected_success=case.get(\"expected_success\"),\n            expected_message=case.get(\"expected_message\")\n        )\n\ntests\\test_crawler_tasks.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [403]>, expected_code = 400, expected_success = False\nexpected_message = '请输入ASIN列表'\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response}\"\nE       AssertionError: 状态码不符：预期400，实际403，完整response：<Response [403]>\nE       assert 403 == 400\nE        +  where 403 = <Response [403]>.status_code\n\nutils\\test_utils.py:7: AssertionError","steps":[{"name":"发送请求：'POST' '/crawler/tasks'","time":{"start":1753974330633,"stop":1753974330642,"duration":9},"status":"passed","steps":[],"attachments":[{"uid":"f2170c93a823401e","name":"请求信息","source":"f2170c93a823401e.json","type":"application/json","size":135},{"uid":"9448b9650292f159","name":"响应信息","source":"9448b9650292f159.txt","type":"text/plain","size":20},{"uid":"8090baccb60931d4","name":"响应体","source":"8090baccb60931d4.json","type":"application/json","size":0}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/crawler/tasks'"},{"name":"headers","value":"{'Authorization': 'Bearer '}"},{"name":"params","value":"{}"},{"name":"json","value":"{'processName': '亚马逊监控', 'asinList': '', 'requiredInfo': ['price'], 'platform': 'Amazon', 'timeCycle': 'daily'}"},{"name":"files","value":"None"},{"name":"token","value":"'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5NzQzMzAsImV4cCI6MTc1Mzk4MTUzMH0.7BxrZiGPcaHHlikXu2w3sRdGJpamIEZNAdhLj76XS-I'"}],"attachmentsCount":3,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"验证响应：状态码400，消息'请输入ASIN列表'","time":{"start":1753974330642,"stop":1753974330642,"duration":0},"status":"failed","statusMessage":"AssertionError: 状态码不符：预期400，实际403，完整response：<Response [403]>\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code\n","statusTrace":"  File \"D:\\Anaconda3\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"D:\\工作记录\\项目说明\\api_test\\utils\\test_utils.py\", line 7, in assert_response\n    assert response.status_code == expected_code, \\\n","steps":[],"attachments":[],"parameters":[{"name":"response","value":"<Response [403]>"},{"name":"expected_code","value":"400"},{"name":"expected_success","value":"False"},{"name":"expected_message","value":"'请输入ASIN列表'"}],"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[{"uid":"13cfbed362c7161e","name":"stdout","source":"13cfbed362c7161e.txt","type":"text/plain","size":183}],"parameters":[],"attachmentsCount":4,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":2},"afterStages":[],"labels":[{"name":"feature","value":"爬虫任务模块"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_crawler_tasks"},{"name":"host","value":"CYJ"},{"name":"thread","value":"22344-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_crawler_tasks"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"case","value":"{'case_id': 'task_003', 'name': 'ASIN列表为空', 'method': 'POST', 'url': '/crawler/tasks', 'headers': {'Authorization': 'Bearer '}, 'json': {'processName': '亚马逊监控', 'asinList': '', 'requiredInfo': ['price'], 'platform': 'Amazon', 'timeCycle': 'daily'}, 'expected_code': 400, 'expected_success': False, 'expected_message': '请输入ASIN列表'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"250abbdcb035042f","status":"failed","statusDetails":"AssertionError: 状态码不符：预期400，实际403，完整response：<Response [403]>\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code","time":{"start":1753973752475,"stop":1753973752501,"duration":26}},{"uid":"d1f56fdd74c81ccd","status":"failed","statusDetails":"AssertionError: 状态码不符：预期400，实际403，完整response：<Response [403]>\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code","time":{"start":1753973619596,"stop":1753973619608,"duration":12}},{"uid":"2ee3bba9a02c45a7","status":"failed","statusDetails":"AssertionError: 状态码不符：预期400，实际403，完整response：<Response [403]>\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code","time":{"start":1753972558689,"stop":1753972558721,"duration":32}},{"uid":"fdf2284602273329","status":"failed","statusDetails":"AssertionError: 状态码不符：预期400，实际403，完整response：<Response [403]>\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code","time":{"start":1753971206273,"stop":1753971206315,"duration":42}},{"uid":"58106ef1f47d0d9","status":"failed","statusDetails":"AssertionError: 状态码不符：预期400，实际403，完整response:<Response [403]>\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code","time":{"start":1753970476685,"stop":1753970476724,"duration":39}},{"uid":"84ed9552ac309d69","status":"broken","statusDetails":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1753970251982,"stop":1753970252025,"duration":43}},{"uid":"1e1b0bbf282df5f0","status":"broken","statusDetails":"UnboundLocalError: cannot access local variable 'json_data' where it is not associated with a value","time":{"start":1753969914793,"stop":1753969914805,"duration":12}},{"uid":"86cd4e0713985956","status":"failed","statusDetails":"AssertionError: 状态码不符：预期400，实际403\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code","time":{"start":1753969579916,"stop":1753969579958,"duration":42}},{"uid":"56231d5f32ff9d8c","status":"failed","statusDetails":"AssertionError: 状态码不符：预期400，实际403\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code","time":{"start":1753969355952,"stop":1753969355994,"duration":42}},{"uid":"3f1b38b152128a2d","status":"failed","statusDetails":"AssertionError: 状态码不符：预期400，实际403\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code","time":{"start":1753969087567,"stop":1753969087587,"duration":20}},{"uid":"326d150a0969b299","status":"failed","statusDetails":"AssertionError: 状态码不符：预期400，实际403\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code","time":{"start":1753968138252,"stop":1753968138267,"duration":15}},{"uid":"b25edee8bfb65f34","status":"failed","statusDetails":"AssertionError: 状态码不符：预期400，实际403\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code","time":{"start":1753967368178,"stop":1753967368197,"duration":19}},{"uid":"d7d7551052d962d9","status":"broken","statusDetails":"KeyError: 'url'","time":{"start":1753967266354,"stop":1753967266354,"duration":0}},{"uid":"28e0a06fa4cdd155","status":"broken","statusDetails":"requests.exceptions.ConnectionError: HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /api/auth/login (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x000001657E09DE50>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。'))","time":{"start":1753967166859,"stop":1753967166859,"duration":0}},{"uid":"8b3151ab019bcc3d","status":"broken","statusDetails":"KeyError: 'url'","time":{"start":1753966888170,"stop":1753966888170,"duration":0}}],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"dfb578812ba46a35.json","parameterValues":["{'case_id': 'task_003', 'name': 'ASIN列表为空', 'method': 'POST', 'url': '/crawler/tasks', 'headers': {'Authorization': 'Bearer '}, 'json': {'processName': '亚马逊监控', 'asinList': '', 'requiredInfo': ['price'], 'platform': 'Amazon', 'timeCycle': 'daily'}, 'expected_code': 400, 'expected_success': False, 'expected_message': '请输入ASIN列表'}"]}