{"uid":"b0298e9ae0a306c4","name":"test_user_auth[case1]","fullName":"tests.test_user_auth#test_user_auth","historyId":"4765677b8c831f3290f59be47e7a4de6","time":{"start":1753989656265,"stop":1753989657970,"duration":1705},"status":"failed","statusMessage":"AssertionError: 状态码不符：预期200，实际400，完整response：{\"success\":false,\"message\":\"用户名已被注册\",\"data\":null}\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"case = {'case_id': 'auth_002', 'expected_code': 200, 'expected_message': '注册成功', 'expected_success': True, ...}\ntest_user = {'email': 'test_lpgmub@example.com', 'token': 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0ZXN0X2xwZ211YiIsImlhdCI6MTc1Mzk4OTY1NSwiZXhwIjoxNzUzOTk2ODU1fQ.P57xtbKjsXf_zDm2Lqii4vHDIvHB2zKbVafZ4TH6dKU', 'username': 'test_lpgmub'}\nimage_fixtures = {'large_jpg_image': 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmpyvylbzy8.jpg', 'large_png_image': 'C:\\\\Users\\\\huawei\\...ata\\\\Local\\\\Temp\\\\tmpwaef2m_z.txt', 'small_jpg_image': 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmp6s8c34ko.jpg', ...}\n\n    @allure.feature(\"用户认证模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_user_auth(case, test_user, image_fixtures):  # 使用test_user而非auth_token\n        allure.story(case[\"name\"])\n        allure.title(f\"{case['case_id']}: {case['name']}\")\n        logger.info(f\"开始执行用例: {case['case_id']} - {case['name']}\")\n    \n        # 1. 文件映射（仅文件上传用例需要）\n        file_map = {\n            \"test_avatar.jpg\": image_fixtures[\"small_jpg_image\"],\n            \"large_avatar.jpg\": image_fixtures[\"large_jpg_image\"],\n            \"test_avatar.png\": image_fixtures[\"small_png_image\"],\n            \"large_avatar.png\": image_fixtures[\"large_png_image\"],\n            \"test_file.txt\": image_fixtures[\"non_image_file\"]\n        }\n    \n        # 2. 预处理请求\n        request_data = preprocess_request(case, test_user[\"token\"], file_map)  # 使用测试用户的token\n    \n        # 3. 处理所有需要验证码的场景（覆盖注册、更新密码等）\n        json_data = request_data.get(\"json\", {})\n        # 确保json_data是字典类型\n        if not isinstance(json_data, dict):\n            json_data = {}\n            logger.warning(\"json_data不是字典类型，已初始化为空字典\")\n    \n        # 处理verifyCode占位符\n        verify_code_value = json_data.get(\"verifyCode\", \"\")\n        # 确保verify_code_value是字符串\n        if not isinstance(verify_code_value, str):\n            verify_code_value = str(verify_code_value) if verify_code_value is not None else \"\"\n    \n        if verify_code_value == \"{verify_code}\":\n            # 优先从请求json中取email，若不存在则报错（避免使用错误邮箱）\n            email = json_data.get(\"email\")\n            assert email is not None, \"注册请求中未包含email字段，无法获取验证码\"\n            verify_code = send_and_get_verify_code(email)\n            json_data[\"verifyCode\"] = verify_code\n            logger.info(f\"为注册邮箱 {email} 填充验证码: {verify_code}\")\n    \n        # 处理verificationCode占位符\n        verification_code_value = json_data.get(\"verificationCode\", \"\")\n        if not isinstance(verification_code_value, str):\n            verification_code_value = str(verification_code_value) if verification_code_value is not None else \"\"\n    \n        if verification_code_value == \"{verify_code}\":\n            email = json_data.get(\"securityEmail\", test_user[\"email\"])\n            verify_code = send_and_get_verify_code(email)\n            json_data[\"verificationCode\"] = verify_code\n            logger.info(f\"为安全邮箱 {email} 填充验证码: {verify_code}\")\n    \n        # 4. 处理未登录场景（保持原逻辑）\n        use_token = case[\"case_id\"] != \"auth_029\"\n        logger.info(f\"是否使用Token: {use_token}\")\n        current_token = test_user[\"token\"] if use_token else None  # 使用测试用户token\n    \n        # 5. 发送请求\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            files=request_data.get(\"files\"),\n            token=current_token\n        )\n    \n        # 6. 断言增强\n        try:\n>           assert_response(\n                response,\n                expected_code=case[\"expected_code\"],\n                expected_success=case.get(\"expected_success\"),\n                expected_message=case.get(\"expected_message\")\n            )\n\ntests\\test_user_auth.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [400]>, expected_code = 200\nexpected_success = True, expected_message = '注册成功', is_file = False\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None, is_file=False):\n        \"\"\"\n        新增is_file参数：标记是否为文件下载接口（无需JSON解析）\n        \"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response.text}\"\nE       AssertionError: 状态码不符：预期200，实际400，完整response：{\"success\":false,\"message\":\"用户名已被注册\",\"data\":null}\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\nutils\\test_utils.py:9: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"test_user","time":{"start":1753989654551,"stop":1753989655523,"duration":972},"status":"passed","steps":[{"name":"发送请求：'POST' '/auth/send-verify-code'","time":{"start":1753989654551,"stop":1753989655202,"duration":651},"status":"passed","steps":[],"attachments":[{"uid":"c702f180a9d3b68b","name":"请求信息","source":"c702f180a9d3b68b.txt","type":"text/plain","size":52},{"uid":"b8686669f785de76","name":"请求头","source":"b8686669f785de76.txt","type":"text/plain","size":45},{"uid":"445cad94c55ed390","name":"请求参数","source":"445cad94c55ed390.json","type":"application/json","size":44},{"uid":"e51ac96802b99753","name":"响应信息","source":"e51ac96802b99753.txt","type":"text/plain","size":14},{"uid":"5d755478957fb05b","name":"响应体","source":"5d755478957fb05b.json","type":"application/json","size":84}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/send-verify-code'"},{"name":"headers","value":"None"},{"name":"params","value":"{'email': 'test_lpgmub@example.com'}"},{"name":"json","value":"None"},{"name":"files","value":"None"},{"name":"token","value":"None"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"从数据库获取验证码：'test_lpgmub@example.com'","time":{"start":1753989655202,"stop":1753989655207,"duration":5},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"email","value":"'test_lpgmub@example.com'"}],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"发送请求：'POST' '/auth/register'","time":{"start":1753989655207,"stop":1753989655366,"duration":159},"status":"passed","steps":[],"attachments":[{"uid":"8e996371a99d8db5","name":"请求信息","source":"8e996371a99d8db5.txt","type":"text/plain","size":44},{"uid":"a8320cb598d1f8b1","name":"请求头","source":"a8320cb598d1f8b1.txt","type":"text/plain","size":45},{"uid":"2319661ac0adc81e","name":"请求参数","source":"2319661ac0adc81e.json","type":"application/json","size":121},{"uid":"14808ff74bdc35da","name":"响应信息","source":"14808ff74bdc35da.txt","type":"text/plain","size":14},{"uid":"2d926580381fa9b2","name":"响应体","source":"2d926580381fa9b2.json","type":"application/json","size":53}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/register'"},{"name":"headers","value":"None"},{"name":"params","value":"None"},{"name":"json","value":"{'username': 'test_lpgmub', 'password': 'Test123456', 'email': 'test_lpgmub@example.com', 'verifyCode': '687433'}"},{"name":"files","value":"None"},{"name":"token","value":"None"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"发送请求：'POST' '/auth/login'","time":{"start":1753989655366,"stop":1753989655523,"duration":157},"status":"passed","steps":[],"attachments":[{"uid":"e3c78705ecad6590","name":"请求信息","source":"e3c78705ecad6590.txt","type":"text/plain","size":41},{"uid":"53bb45aa7a549072","name":"请求头","source":"53bb45aa7a549072.txt","type":"text/plain","size":45},{"uid":"9d57157f4c445e27","name":"请求参数","source":"9d57157f4c445e27.json","type":"application/json","size":61},{"uid":"39d0831ae43957b2","name":"响应信息","source":"39d0831ae43957b2.txt","type":"text/plain","size":14},{"uid":"e79e2b6da121c646","name":"响应体","source":"e79e2b6da121c646.json","type":"application/json","size":217}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/login'"},{"name":"headers","value":"None"},{"name":"params","value":"None"},{"name":"json","value":"{'username': 'test_lpgmub', 'password': 'Test123456'}"},{"name":"files","value":"None"},{"name":"token","value":"None"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":15,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":4},{"name":"small_jpg_image","time":{"start":1753989655525,"stop":1753989655613,"duration":88},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_jpg_image","time":{"start":1753989655613,"stop":1753989655958,"duration":345},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"small_png_image","time":{"start":1753989655958,"stop":1753989655992,"duration":34},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_png_image","time":{"start":1753989655992,"stop":1753989656263,"duration":271},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"non_image_file","time":{"start":1753989656263,"stop":1753989656265,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"image_fixtures","time":{"start":1753989656265,"stop":1753989656265,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: 状态码不符：预期200，实际400，完整response：{\"success\":false,\"message\":\"用户名已被注册\",\"data\":null}\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"case = {'case_id': 'auth_002', 'expected_code': 200, 'expected_message': '注册成功', 'expected_success': True, ...}\ntest_user = {'email': 'test_lpgmub@example.com', 'token': 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0ZXN0X2xwZ211YiIsImlhdCI6MTc1Mzk4OTY1NSwiZXhwIjoxNzUzOTk2ODU1fQ.P57xtbKjsXf_zDm2Lqii4vHDIvHB2zKbVafZ4TH6dKU', 'username': 'test_lpgmub'}\nimage_fixtures = {'large_jpg_image': 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmpyvylbzy8.jpg', 'large_png_image': 'C:\\\\Users\\\\huawei\\...ata\\\\Local\\\\Temp\\\\tmpwaef2m_z.txt', 'small_jpg_image': 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmp6s8c34ko.jpg', ...}\n\n    @allure.feature(\"用户认证模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_user_auth(case, test_user, image_fixtures):  # 使用test_user而非auth_token\n        allure.story(case[\"name\"])\n        allure.title(f\"{case['case_id']}: {case['name']}\")\n        logger.info(f\"开始执行用例: {case['case_id']} - {case['name']}\")\n    \n        # 1. 文件映射（仅文件上传用例需要）\n        file_map = {\n            \"test_avatar.jpg\": image_fixtures[\"small_jpg_image\"],\n            \"large_avatar.jpg\": image_fixtures[\"large_jpg_image\"],\n            \"test_avatar.png\": image_fixtures[\"small_png_image\"],\n            \"large_avatar.png\": image_fixtures[\"large_png_image\"],\n            \"test_file.txt\": image_fixtures[\"non_image_file\"]\n        }\n    \n        # 2. 预处理请求\n        request_data = preprocess_request(case, test_user[\"token\"], file_map)  # 使用测试用户的token\n    \n        # 3. 处理所有需要验证码的场景（覆盖注册、更新密码等）\n        json_data = request_data.get(\"json\", {})\n        # 确保json_data是字典类型\n        if not isinstance(json_data, dict):\n            json_data = {}\n            logger.warning(\"json_data不是字典类型，已初始化为空字典\")\n    \n        # 处理verifyCode占位符\n        verify_code_value = json_data.get(\"verifyCode\", \"\")\n        # 确保verify_code_value是字符串\n        if not isinstance(verify_code_value, str):\n            verify_code_value = str(verify_code_value) if verify_code_value is not None else \"\"\n    \n        if verify_code_value == \"{verify_code}\":\n            # 优先从请求json中取email，若不存在则报错（避免使用错误邮箱）\n            email = json_data.get(\"email\")\n            assert email is not None, \"注册请求中未包含email字段，无法获取验证码\"\n            verify_code = send_and_get_verify_code(email)\n            json_data[\"verifyCode\"] = verify_code\n            logger.info(f\"为注册邮箱 {email} 填充验证码: {verify_code}\")\n    \n        # 处理verificationCode占位符\n        verification_code_value = json_data.get(\"verificationCode\", \"\")\n        if not isinstance(verification_code_value, str):\n            verification_code_value = str(verification_code_value) if verification_code_value is not None else \"\"\n    \n        if verification_code_value == \"{verify_code}\":\n            email = json_data.get(\"securityEmail\", test_user[\"email\"])\n            verify_code = send_and_get_verify_code(email)\n            json_data[\"verificationCode\"] = verify_code\n            logger.info(f\"为安全邮箱 {email} 填充验证码: {verify_code}\")\n    \n        # 4. 处理未登录场景（保持原逻辑）\n        use_token = case[\"case_id\"] != \"auth_029\"\n        logger.info(f\"是否使用Token: {use_token}\")\n        current_token = test_user[\"token\"] if use_token else None  # 使用测试用户token\n    \n        # 5. 发送请求\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            files=request_data.get(\"files\"),\n            token=current_token\n        )\n    \n        # 6. 断言增强\n        try:\n>           assert_response(\n                response,\n                expected_code=case[\"expected_code\"],\n                expected_success=case.get(\"expected_success\"),\n                expected_message=case.get(\"expected_message\")\n            )\n\ntests\\test_user_auth.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [400]>, expected_code = 200\nexpected_success = True, expected_message = '注册成功', is_file = False\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None, is_file=False):\n        \"\"\"\n        新增is_file参数：标记是否为文件下载接口（无需JSON解析）\n        \"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response.text}\"\nE       AssertionError: 状态码不符：预期200，实际400，完整response：{\"success\":false,\"message\":\"用户名已被注册\",\"data\":null}\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\nutils\\test_utils.py:9: AssertionError","steps":[{"name":"发送请求：'POST' '/auth/send-verify-code'","time":{"start":1753989656266,"stop":1753989656947,"duration":681},"status":"passed","steps":[],"attachments":[{"uid":"300ab22be450dbbe","name":"请求信息","source":"300ab22be450dbbe.txt","type":"text/plain","size":52},{"uid":"d4e2c1faf1a71e3","name":"请求头","source":"d4e2c1faf1a71e3.txt","type":"text/plain","size":45},{"uid":"3c6f634863f08a12","name":"请求参数","source":"3c6f634863f08a12.json","type":"application/json","size":44},{"uid":"24201257bddc21c2","name":"响应信息","source":"24201257bddc21c2.txt","type":"text/plain","size":14},{"uid":"32d084be6bff3c51","name":"响应体","source":"32d084be6bff3c51.json","type":"application/json","size":84}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/send-verify-code'"},{"name":"headers","value":"None"},{"name":"params","value":"{'email': 'test_c67ve6@example.com'}"},{"name":"json","value":"None"},{"name":"files","value":"None"},{"name":"token","value":"None"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"验证响应：状态码200，消息'操作成功'","time":{"start":1753989656947,"stop":1753989656947,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"response","value":"<Response [200]>"},{"name":"expected_code","value":"200"},{"name":"expected_success","value":"True"},{"name":"expected_message","value":"'操作成功'"},{"name":"is_file","value":"False"}],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"从数据库获取验证码：'test_c67ve6@example.com'","time":{"start":1753989657949,"stop":1753989657951,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"email","value":"'test_c67ve6@example.com'"}],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"发送请求：'POST' '/auth/register'","time":{"start":1753989657951,"stop":1753989657967,"duration":16},"status":"passed","steps":[],"attachments":[{"uid":"bd2429f7a30726d3","name":"请求信息","source":"bd2429f7a30726d3.txt","type":"text/plain","size":44},{"uid":"28113f53efdbc027","name":"请求头","source":"28113f53efdbc027.txt","type":"text/plain","size":212},{"uid":"ceef2e170fcd01d1","name":"请求参数","source":"ceef2e170fcd01d1.json","type":"application/json","size":116},{"uid":"61ead94ea10eb0f3","name":"响应信息","source":"61ead94ea10eb0f3.txt","type":"text/plain","size":14},{"uid":"1a66f8f5b70fc2e2","name":"响应体","source":"1a66f8f5b70fc2e2.json","type":"application/json","size":63}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/register'"},{"name":"headers","value":"{}"},{"name":"params","value":"{}"},{"name":"json","value":"{'username': 'test01', 'password': 'Test123456', 'email': 'test_c67ve6@example.com', 'verifyCode': '981124'}"},{"name":"files","value":"None"},{"name":"token","value":"'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0ZXN0X2xwZ211YiIsImlhdCI6MTc1Mzk4OTY1NSwiZXhwIjoxNzUzOTk2ODU1fQ.P57xtbKjsXf_zDm2Lqii4vHDIvHB2zKbVafZ4TH6dKU'"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"验证响应：状态码200，消息'注册成功'","time":{"start":1753989657967,"stop":1753989657967,"duration":0},"status":"failed","statusMessage":"AssertionError: 状态码不符：预期200，实际400，完整response：{\"success\":false,\"message\":\"用户名已被注册\",\"data\":null}\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"D:\\Anaconda3\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"D:\\工作记录\\项目说明\\api_test\\utils\\test_utils.py\", line 9, in assert_response\n    assert response.status_code == expected_code, \\\n","steps":[],"attachments":[],"parameters":[{"name":"response","value":"<Response [400]>"},{"name":"expected_code","value":"200"},{"name":"expected_success","value":"True"},{"name":"expected_message","value":"'注册成功'"},{"name":"is_file","value":"False"}],"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[{"uid":"d69a8405bb165b78","name":"失败详情","source":"d69a8405bb165b78.txt","type":"text/plain","size":77},{"uid":"5aaf576c0a2a2d1c","name":"请求数据","source":"5aaf576c0a2a2d1c.json","type":"application/json","size":122},{"uid":"8066f6467a08be0b","name":"log","source":"8066f6467a08be0b.txt","type":"text/plain","size":2956},{"uid":"463ecf6be86c2d15","name":"stderr","source":"463ecf6be86c2d15.txt","type":"text/plain","size":2250}],"parameters":[],"attachmentsCount":14,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":5},"afterStages":[{"name":"non_image_file::0","time":{"start":1753989657981,"stop":1753989657982,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_png_image::0","time":{"start":1753989657983,"stop":1753989657986,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"small_png_image::0","time":{"start":1753989657987,"stop":1753989657989,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_jpg_image::0","time":{"start":1753989657990,"stop":1753989657997,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"small_jpg_image::0","time":{"start":1753989657998,"stop":1753989658000,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"test_user::0","time":{"start":1753989658001,"stop":1753989658008,"duration":7},"status":"passed","steps":[{"name":"清理测试数据：'test_lpgmub@example.com'","time":{"start":1753989658003,"stop":1753989658008,"duration":5},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"email","value":"'test_lpgmub@example.com'"}],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":1}],"labels":[{"name":"feature","value":"用户认证模块"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_user_auth"},{"name":"host","value":"CYJ"},{"name":"thread","value":"14532-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_user_auth"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"case","value":"{'case_id': 'auth_002', 'name': '用户名长度为6位（最小值）', 'method': 'POST', 'url': '/auth/register', 'json': {'username': 'test01', 'password': 'Test123456', 'email': 'test_c67ve6@example.com', 'verifyCode': '{verify_code}'}, 'expected_code': 200, 'expected_success': True, 'expected_message': '注册成功'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"b0298e9ae0a306c4.json","parameterValues":["{'case_id': 'auth_002', 'name': '用户名长度为6位（最小值）', 'method': 'POST', 'url': '/auth/register', 'json': {'username': 'test01', 'password': 'Test123456', 'email': 'test_c67ve6@example.com', 'verifyCode': '{verify_code}'}, 'expected_code': 200, 'expected_success': True, 'expected_message': '注册成功'}"]}