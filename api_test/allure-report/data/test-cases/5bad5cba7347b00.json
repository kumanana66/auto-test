{"uid":"5bad5cba7347b00","name":"test_user_auth[case2]","fullName":"tests.test_user_auth#test_user_auth","historyId":"4e106197a7d6ee03d4c3198365cc6e86","time":{"start":1753989659600,"stop":1753989661437,"duration":1837},"status":"failed","statusMessage":"AssertionError: 状态码不符：预期200，实际400，完整response：{\"success\":false,\"message\":\"用户名已被注册\",\"data\":null}\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"case = {'case_id': 'auth_003', 'expected_code': 200, 'expected_message': '注册成功', 'expected_success': True, ...}\ntest_user = {'email': 'test_mssntx@example.com', 'token': 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0ZXN0X21zc250eCIsImlhdCI6MTc1Mzk4OTY1OCwiZXhwIjoxNzUzOTk2ODU4fQ.GpV6sFJzrW5D-j3TuA0C1W2lJzi3ONlmrbipCl2Hgdg', 'username': 'test_mssntx'}\nimage_fixtures = {'large_jpg_image': 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmpjy82a0yg.jpg', 'large_png_image': 'C:\\\\Users\\\\huawei\\...ata\\\\Local\\\\Temp\\\\tmpr8a8knm8.txt', 'small_jpg_image': 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmpz90rsk3b.jpg', ...}\n\n    @allure.feature(\"用户认证模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_user_auth(case, test_user, image_fixtures):  # 使用test_user而非auth_token\n        allure.story(case[\"name\"])\n        allure.title(f\"{case['case_id']}: {case['name']}\")\n        logger.info(f\"开始执行用例: {case['case_id']} - {case['name']}\")\n    \n        # 1. 文件映射（仅文件上传用例需要）\n        file_map = {\n            \"test_avatar.jpg\": image_fixtures[\"small_jpg_image\"],\n            \"large_avatar.jpg\": image_fixtures[\"large_jpg_image\"],\n            \"test_avatar.png\": image_fixtures[\"small_png_image\"],\n            \"large_avatar.png\": image_fixtures[\"large_png_image\"],\n            \"test_file.txt\": image_fixtures[\"non_image_file\"]\n        }\n    \n        # 2. 预处理请求\n        request_data = preprocess_request(case, test_user[\"token\"], file_map)  # 使用测试用户的token\n    \n        # 3. 处理所有需要验证码的场景（覆盖注册、更新密码等）\n        json_data = request_data.get(\"json\", {})\n        # 确保json_data是字典类型\n        if not isinstance(json_data, dict):\n            json_data = {}\n            logger.warning(\"json_data不是字典类型，已初始化为空字典\")\n    \n        # 处理verifyCode占位符\n        verify_code_value = json_data.get(\"verifyCode\", \"\")\n        # 确保verify_code_value是字符串\n        if not isinstance(verify_code_value, str):\n            verify_code_value = str(verify_code_value) if verify_code_value is not None else \"\"\n    \n        if verify_code_value == \"{verify_code}\":\n            # 优先从请求json中取email，若不存在则报错（避免使用错误邮箱）\n            email = json_data.get(\"email\")\n            assert email is not None, \"注册请求中未包含email字段，无法获取验证码\"\n            verify_code = send_and_get_verify_code(email)\n            json_data[\"verifyCode\"] = verify_code\n            logger.info(f\"为注册邮箱 {email} 填充验证码: {verify_code}\")\n    \n        # 处理verificationCode占位符\n        verification_code_value = json_data.get(\"verificationCode\", \"\")\n        if not isinstance(verification_code_value, str):\n            verification_code_value = str(verification_code_value) if verification_code_value is not None else \"\"\n    \n        if verification_code_value == \"{verify_code}\":\n            email = json_data.get(\"securityEmail\", test_user[\"email\"])\n            verify_code = send_and_get_verify_code(email)\n            json_data[\"verificationCode\"] = verify_code\n            logger.info(f\"为安全邮箱 {email} 填充验证码: {verify_code}\")\n    \n        # 4. 处理未登录场景（保持原逻辑）\n        use_token = case[\"case_id\"] != \"auth_029\"\n        logger.info(f\"是否使用Token: {use_token}\")\n        current_token = test_user[\"token\"] if use_token else None  # 使用测试用户token\n    \n        # 5. 发送请求\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            files=request_data.get(\"files\"),\n            token=current_token\n        )\n    \n        # 6. 断言增强\n        try:\n>           assert_response(\n                response,\n                expected_code=case[\"expected_code\"],\n                expected_success=case.get(\"expected_success\"),\n                expected_message=case.get(\"expected_message\")\n            )\n\ntests\\test_user_auth.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [400]>, expected_code = 200\nexpected_success = True, expected_message = '注册成功', is_file = False\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None, is_file=False):\n        \"\"\"\n        新增is_file参数：标记是否为文件下载接口（无需JSON解析）\n        \"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response.text}\"\nE       AssertionError: 状态码不符：预期200，实际400，完整response：{\"success\":false,\"message\":\"用户名已被注册\",\"data\":null}\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\nutils\\test_utils.py:9: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"test_user","time":{"start":1753989658022,"stop":1753989658988,"duration":966},"status":"passed","steps":[{"name":"发送请求：'POST' '/auth/send-verify-code'","time":{"start":1753989658022,"stop":1753989658734,"duration":712},"status":"passed","steps":[],"attachments":[{"uid":"b2d6d11fb04069d7","name":"请求信息","source":"b2d6d11fb04069d7.txt","type":"text/plain","size":52},{"uid":"41f6df9922730b27","name":"请求头","source":"41f6df9922730b27.txt","type":"text/plain","size":45},{"uid":"2e979364d02d0471","name":"请求参数","source":"2e979364d02d0471.json","type":"application/json","size":44},{"uid":"fd37565b51e355b2","name":"响应信息","source":"fd37565b51e355b2.txt","type":"text/plain","size":14},{"uid":"73b8e61e57e53c78","name":"响应体","source":"73b8e61e57e53c78.json","type":"application/json","size":84}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/send-verify-code'"},{"name":"headers","value":"None"},{"name":"params","value":"{'email': 'test_mssntx@example.com'}"},{"name":"json","value":"None"},{"name":"files","value":"None"},{"name":"token","value":"None"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"从数据库获取验证码：'test_mssntx@example.com'","time":{"start":1753989658734,"stop":1753989658737,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"email","value":"'test_mssntx@example.com'"}],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"发送请求：'POST' '/auth/register'","time":{"start":1753989658738,"stop":1753989658861,"duration":123},"status":"passed","steps":[],"attachments":[{"uid":"22769093bb3744d9","name":"请求信息","source":"22769093bb3744d9.txt","type":"text/plain","size":44},{"uid":"7807ad6e1ad56f13","name":"请求头","source":"7807ad6e1ad56f13.txt","type":"text/plain","size":45},{"uid":"3017b03129070f28","name":"请求参数","source":"3017b03129070f28.json","type":"application/json","size":121},{"uid":"53de964be1dafa28","name":"响应信息","source":"53de964be1dafa28.txt","type":"text/plain","size":14},{"uid":"f0434a7e54c63ef3","name":"响应体","source":"f0434a7e54c63ef3.json","type":"application/json","size":53}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/register'"},{"name":"headers","value":"None"},{"name":"params","value":"None"},{"name":"json","value":"{'username': 'test_mssntx', 'password': 'Test123456', 'email': 'test_mssntx@example.com', 'verifyCode': '841409'}"},{"name":"files","value":"None"},{"name":"token","value":"None"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"发送请求：'POST' '/auth/login'","time":{"start":1753989658862,"stop":1753989658988,"duration":126},"status":"passed","steps":[],"attachments":[{"uid":"635721cfb086b8e","name":"请求信息","source":"635721cfb086b8e.txt","type":"text/plain","size":41},{"uid":"72ed7bce0fa6a47b","name":"请求头","source":"72ed7bce0fa6a47b.txt","type":"text/plain","size":45},{"uid":"7695a8c5be81be43","name":"请求参数","source":"7695a8c5be81be43.json","type":"application/json","size":61},{"uid":"4e5c216fc22a8f50","name":"响应信息","source":"4e5c216fc22a8f50.txt","type":"text/plain","size":14},{"uid":"9f93c23fd92ace11","name":"响应体","source":"9f93c23fd92ace11.json","type":"application/json","size":217}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/login'"},{"name":"headers","value":"None"},{"name":"params","value":"None"},{"name":"json","value":"{'username': 'test_mssntx', 'password': 'Test123456'}"},{"name":"files","value":"None"},{"name":"token","value":"None"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":15,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":4},{"name":"small_jpg_image","time":{"start":1753989658988,"stop":1753989659052,"duration":64},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_jpg_image","time":{"start":1753989659052,"stop":1753989659324,"duration":272},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"small_png_image","time":{"start":1753989659324,"stop":1753989659353,"duration":29},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_png_image","time":{"start":1753989659353,"stop":1753989659598,"duration":245},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"non_image_file","time":{"start":1753989659598,"stop":1753989659599,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"image_fixtures","time":{"start":1753989659599,"stop":1753989659599,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: 状态码不符：预期200，实际400，完整response：{\"success\":false,\"message\":\"用户名已被注册\",\"data\":null}\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"case = {'case_id': 'auth_003', 'expected_code': 200, 'expected_message': '注册成功', 'expected_success': True, ...}\ntest_user = {'email': 'test_mssntx@example.com', 'token': 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0ZXN0X21zc250eCIsImlhdCI6MTc1Mzk4OTY1OCwiZXhwIjoxNzUzOTk2ODU4fQ.GpV6sFJzrW5D-j3TuA0C1W2lJzi3ONlmrbipCl2Hgdg', 'username': 'test_mssntx'}\nimage_fixtures = {'large_jpg_image': 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmpjy82a0yg.jpg', 'large_png_image': 'C:\\\\Users\\\\huawei\\...ata\\\\Local\\\\Temp\\\\tmpr8a8knm8.txt', 'small_jpg_image': 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmpz90rsk3b.jpg', ...}\n\n    @allure.feature(\"用户认证模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_user_auth(case, test_user, image_fixtures):  # 使用test_user而非auth_token\n        allure.story(case[\"name\"])\n        allure.title(f\"{case['case_id']}: {case['name']}\")\n        logger.info(f\"开始执行用例: {case['case_id']} - {case['name']}\")\n    \n        # 1. 文件映射（仅文件上传用例需要）\n        file_map = {\n            \"test_avatar.jpg\": image_fixtures[\"small_jpg_image\"],\n            \"large_avatar.jpg\": image_fixtures[\"large_jpg_image\"],\n            \"test_avatar.png\": image_fixtures[\"small_png_image\"],\n            \"large_avatar.png\": image_fixtures[\"large_png_image\"],\n            \"test_file.txt\": image_fixtures[\"non_image_file\"]\n        }\n    \n        # 2. 预处理请求\n        request_data = preprocess_request(case, test_user[\"token\"], file_map)  # 使用测试用户的token\n    \n        # 3. 处理所有需要验证码的场景（覆盖注册、更新密码等）\n        json_data = request_data.get(\"json\", {})\n        # 确保json_data是字典类型\n        if not isinstance(json_data, dict):\n            json_data = {}\n            logger.warning(\"json_data不是字典类型，已初始化为空字典\")\n    \n        # 处理verifyCode占位符\n        verify_code_value = json_data.get(\"verifyCode\", \"\")\n        # 确保verify_code_value是字符串\n        if not isinstance(verify_code_value, str):\n            verify_code_value = str(verify_code_value) if verify_code_value is not None else \"\"\n    \n        if verify_code_value == \"{verify_code}\":\n            # 优先从请求json中取email，若不存在则报错（避免使用错误邮箱）\n            email = json_data.get(\"email\")\n            assert email is not None, \"注册请求中未包含email字段，无法获取验证码\"\n            verify_code = send_and_get_verify_code(email)\n            json_data[\"verifyCode\"] = verify_code\n            logger.info(f\"为注册邮箱 {email} 填充验证码: {verify_code}\")\n    \n        # 处理verificationCode占位符\n        verification_code_value = json_data.get(\"verificationCode\", \"\")\n        if not isinstance(verification_code_value, str):\n            verification_code_value = str(verification_code_value) if verification_code_value is not None else \"\"\n    \n        if verification_code_value == \"{verify_code}\":\n            email = json_data.get(\"securityEmail\", test_user[\"email\"])\n            verify_code = send_and_get_verify_code(email)\n            json_data[\"verificationCode\"] = verify_code\n            logger.info(f\"为安全邮箱 {email} 填充验证码: {verify_code}\")\n    \n        # 4. 处理未登录场景（保持原逻辑）\n        use_token = case[\"case_id\"] != \"auth_029\"\n        logger.info(f\"是否使用Token: {use_token}\")\n        current_token = test_user[\"token\"] if use_token else None  # 使用测试用户token\n    \n        # 5. 发送请求\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            files=request_data.get(\"files\"),\n            token=current_token\n        )\n    \n        # 6. 断言增强\n        try:\n>           assert_response(\n                response,\n                expected_code=case[\"expected_code\"],\n                expected_success=case.get(\"expected_success\"),\n                expected_message=case.get(\"expected_message\")\n            )\n\ntests\\test_user_auth.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [400]>, expected_code = 200\nexpected_success = True, expected_message = '注册成功', is_file = False\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None, is_file=False):\n        \"\"\"\n        新增is_file参数：标记是否为文件下载接口（无需JSON解析）\n        \"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response.text}\"\nE       AssertionError: 状态码不符：预期200，实际400，完整response：{\"success\":false,\"message\":\"用户名已被注册\",\"data\":null}\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\nutils\\test_utils.py:9: AssertionError","steps":[{"name":"发送请求：'POST' '/auth/send-verify-code'","time":{"start":1753989659600,"stop":1753989660333,"duration":733},"status":"passed","steps":[],"attachments":[{"uid":"81c65ae15e4d9cf8","name":"请求信息","source":"81c65ae15e4d9cf8.txt","type":"text/plain","size":52},{"uid":"c1dc4510a212d95","name":"请求头","source":"c1dc4510a212d95.txt","type":"text/plain","size":45},{"uid":"aa519f7b462a6df4","name":"请求参数","source":"aa519f7b462a6df4.json","type":"application/json","size":44},{"uid":"8bcb2a82de603d9b","name":"响应信息","source":"8bcb2a82de603d9b.txt","type":"text/plain","size":14},{"uid":"271b3d73f2958252","name":"响应体","source":"271b3d73f2958252.json","type":"application/json","size":84}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/send-verify-code'"},{"name":"headers","value":"None"},{"name":"params","value":"{'email': 'test_oynggh@example.com'}"},{"name":"json","value":"None"},{"name":"files","value":"None"},{"name":"token","value":"None"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"验证响应：状态码200，消息'操作成功'","time":{"start":1753989660334,"stop":1753989660334,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"response","value":"<Response [200]>"},{"name":"expected_code","value":"200"},{"name":"expected_success","value":"True"},{"name":"expected_message","value":"'操作成功'"},{"name":"is_file","value":"False"}],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"从数据库获取验证码：'test_oynggh@example.com'","time":{"start":1753989661334,"stop":1753989661361,"duration":27},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"email","value":"'test_oynggh@example.com'"}],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"发送请求：'POST' '/auth/register'","time":{"start":1753989661363,"stop":1753989661424,"duration":61},"status":"passed","steps":[],"attachments":[{"uid":"878afc8c0a151618","name":"请求信息","source":"878afc8c0a151618.txt","type":"text/plain","size":44},{"uid":"ae1884e802a81ef1","name":"请求头","source":"ae1884e802a81ef1.txt","type":"text/plain","size":212},{"uid":"7b0ca73af9daa5c2","name":"请求参数","source":"7b0ca73af9daa5c2.json","type":"application/json","size":130},{"uid":"e6bda02aaf143730","name":"响应信息","source":"e6bda02aaf143730.txt","type":"text/plain","size":14},{"uid":"502556cf8047ba0c","name":"响应体","source":"502556cf8047ba0c.json","type":"application/json","size":63}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/register'"},{"name":"headers","value":"{}"},{"name":"params","value":"{}"},{"name":"json","value":"{'username': 'test0000000000000001', 'password': 'Test123456', 'email': 'test_oynggh@example.com', 'verifyCode': '825665'}"},{"name":"files","value":"None"},{"name":"token","value":"'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0ZXN0X21zc250eCIsImlhdCI6MTc1Mzk4OTY1OCwiZXhwIjoxNzUzOTk2ODU4fQ.GpV6sFJzrW5D-j3TuA0C1W2lJzi3ONlmrbipCl2Hgdg'"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"验证响应：状态码200，消息'注册成功'","time":{"start":1753989661424,"stop":1753989661426,"duration":2},"status":"failed","statusMessage":"AssertionError: 状态码不符：预期200，实际400，完整response：{\"success\":false,\"message\":\"用户名已被注册\",\"data\":null}\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"D:\\Anaconda3\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"D:\\工作记录\\项目说明\\api_test\\utils\\test_utils.py\", line 9, in assert_response\n    assert response.status_code == expected_code, \\\n","steps":[],"attachments":[],"parameters":[{"name":"response","value":"<Response [400]>"},{"name":"expected_code","value":"200"},{"name":"expected_success","value":"True"},{"name":"expected_message","value":"'注册成功'"},{"name":"is_file","value":"False"}],"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[{"uid":"5e853f02114997d","name":"失败详情","source":"5e853f02114997d.txt","type":"text/plain","size":77},{"uid":"8f85a9ab629c307a","name":"请求数据","source":"8f85a9ab629c307a.json","type":"application/json","size":136},{"uid":"18e43777c0a200c2","name":"log","source":"18e43777c0a200c2.txt","type":"text/plain","size":2957},{"uid":"c08513326751b663","name":"stderr","source":"c08513326751b663.txt","type":"text/plain","size":2251}],"parameters":[],"attachmentsCount":14,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":5},"afterStages":[{"name":"non_image_file::0","time":{"start":1753989661492,"stop":1753989661495,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_png_image::0","time":{"start":1753989661501,"stop":1753989661512,"duration":11},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"small_png_image::0","time":{"start":1753989661518,"stop":1753989661521,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_jpg_image::0","time":{"start":1753989661525,"stop":1753989661542,"duration":17},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"small_jpg_image::0","time":{"start":1753989661578,"stop":1753989661580,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"test_user::0","time":{"start":1753989661603,"stop":1753989661611,"duration":8},"status":"passed","steps":[{"name":"清理测试数据：'test_mssntx@example.com'","time":{"start":1753989661603,"stop":1753989661611,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"email","value":"'test_mssntx@example.com'"}],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":1}],"labels":[{"name":"feature","value":"用户认证模块"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_user_auth"},{"name":"host","value":"CYJ"},{"name":"thread","value":"14532-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_user_auth"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"case","value":"{'case_id': 'auth_003', 'name': '用户名长度为20位（最大值）', 'method': 'POST', 'url': '/auth/register', 'json': {'username': 'test0000000000000001', 'password': 'Test123456', 'email': 'test_oynggh@example.com', 'verifyCode': '{verify_code}'}, 'expected_code': 200, 'expected_success': True, 'expected_message': '注册成功'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"5bad5cba7347b00.json","parameterValues":["{'case_id': 'auth_003', 'name': '用户名长度为20位（最大值）', 'method': 'POST', 'url': '/auth/register', 'json': {'username': 'test0000000000000001', 'password': 'Test123456', 'email': 'test_oynggh@example.com', 'verifyCode': '{verify_code}'}, 'expected_code': 200, 'expected_success': True, 'expected_message': '注册成功'}"]}