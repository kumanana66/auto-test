{"uid":"37d056c09d2781a6","name":"test_user_auth[case26]","fullName":"tests.test_user_auth#test_user_auth","historyId":"48cda2fab706b8c656c5aad4f5a4691b","time":{"start":1753973830642,"stop":1753973830672,"duration":30},"status":"failed","statusMessage":"AssertionError: 状态码不符：预期400，实际403，完整response：<Response [403]>\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code","statusTrace":"case = {'case_id': 'auth_027', 'expected_code': 400, 'expected_message': '文件大小不能超过2MB', 'expected_success': False, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5NzM4MjgsImV4cCI6MTc1Mzk4MTAyOH0.zS4qj1dKR5Frga1YfWSwr01vAABqUPqfzAwi3xm2SVs'\nsmall_jpg_image = 'small_9675.jpg', large_jpg_image = 'large_5816.jpg'\nsmall_png_image = 'small_2382.png', large_png_image = 'large_2561.png'\nnon_image_file = 'test_4967.txt'\n\n    @allure.feature(\"用户认证模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_user_auth(case, auth_token, small_jpg_image, large_jpg_image, small_png_image, large_png_image, non_image_file):\n        allure.story(case[\"name\"])\n        allure.title(f\"{case['case_id']}: {case['name']}\")\n    \n        # 文件映射：用例文件名 -> 实际测试文件\n        file_map = {\n            \"test_avatar.jpg\": small_jpg_image,\n            \"large_avatar.jpg\": large_jpg_image,\n            \"test_avatar.png\": small_png_image,\n            \"large_avatar.png\": large_png_image,\n            \"test_file.txt\": non_image_file\n        }\n    \n        # 预处理请求\n        request_data = preprocess_request(case, auth_token, file_map)\n    \n        # 注册用例单独处理验证码\n        if (case[\"case_id\"].startswith(\"auth_00\")\n            and case[\"method\"] == \"POST\"\n            and case[\"url\"] == \"/auth/register\"):\n    \n            # 获取注册邮箱\n            email = request_data[\"json\"][\"email\"]\n            # 发送并获取验证码\n            verify_code = send_and_get_verify_code(email)\n            # 填充验证码到请求参数\n            request_data[\"json\"][\"verifyCode\"] = verify_code\n    \n        # 发送请求\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            files=request_data.get(\"files\"),\n            token=auth_token if case[\"case_id\"] != \"auth_029\" else None  # 未登录用例移除token\n        )\n    \n        # 断言\n>       assert_response(\n            response,\n            expected_code=case[\"expected_code\"],\n            expected_success=case.get(\"expected_success\"),\n            expected_message=case.get(\"expected_message\")\n        )\n\ntests\\test_user_auth.py:71: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [403]>, expected_code = 400, expected_success = False\nexpected_message = '文件大小不能超过2MB'\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response}\"\nE       AssertionError: 状态码不符：预期400，实际403，完整response：<Response [403]>\nE       assert 403 == 400\nE        +  where 403 = <Response [403]>.status_code\n\nutils\\test_utils.py:7: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":14,"retriesStatusChange":true,"beforeStages":[{"name":"auth_token","time":{"start":1753973828814,"stop":1753973828991,"duration":177},"status":"passed","steps":[{"name":"发送请求：'POST' '/auth/login'","time":{"start":1753973828814,"stop":1753973828990,"duration":176},"status":"passed","steps":[],"attachments":[{"uid":"d4c44c3037066761","name":"请求信息","source":"d4c44c3037066761.json","type":"application/json","size":64},{"uid":"7dadd973d58cb0d8","name":"响应信息","source":"7dadd973d58cb0d8.txt","type":"text/plain","size":20},{"uid":"8b50ae1f8a25d263","name":"响应体","source":"8b50ae1f8a25d263.json","type":"application/json","size":214}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/login'"},{"name":"headers","value":"None"},{"name":"params","value":"None"},{"name":"json","value":"{'username': 'admin1155', 'password': 'admin1155'}"},{"name":"files","value":"None"},{"name":"token","value":"None"}],"attachmentsCount":3,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":3,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":1},{"name":"small_jpg_image","time":{"start":1753973828991,"stop":1753973829130,"duration":139},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_jpg_image","time":{"start":1753973829130,"stop":1753973830141,"duration":1011},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"small_png_image","time":{"start":1753973830142,"stop":1753973830247,"duration":105},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_png_image","time":{"start":1753973830247,"stop":1753973830635,"duration":388},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"non_image_file","time":{"start":1753973830636,"stop":1753973830640,"duration":4},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: 状态码不符：预期400，实际403，完整response：<Response [403]>\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code","statusTrace":"case = {'case_id': 'auth_027', 'expected_code': 400, 'expected_message': '文件大小不能超过2MB', 'expected_success': False, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5NzM4MjgsImV4cCI6MTc1Mzk4MTAyOH0.zS4qj1dKR5Frga1YfWSwr01vAABqUPqfzAwi3xm2SVs'\nsmall_jpg_image = 'small_9675.jpg', large_jpg_image = 'large_5816.jpg'\nsmall_png_image = 'small_2382.png', large_png_image = 'large_2561.png'\nnon_image_file = 'test_4967.txt'\n\n    @allure.feature(\"用户认证模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_user_auth(case, auth_token, small_jpg_image, large_jpg_image, small_png_image, large_png_image, non_image_file):\n        allure.story(case[\"name\"])\n        allure.title(f\"{case['case_id']}: {case['name']}\")\n    \n        # 文件映射：用例文件名 -> 实际测试文件\n        file_map = {\n            \"test_avatar.jpg\": small_jpg_image,\n            \"large_avatar.jpg\": large_jpg_image,\n            \"test_avatar.png\": small_png_image,\n            \"large_avatar.png\": large_png_image,\n            \"test_file.txt\": non_image_file\n        }\n    \n        # 预处理请求\n        request_data = preprocess_request(case, auth_token, file_map)\n    \n        # 注册用例单独处理验证码\n        if (case[\"case_id\"].startswith(\"auth_00\")\n            and case[\"method\"] == \"POST\"\n            and case[\"url\"] == \"/auth/register\"):\n    \n            # 获取注册邮箱\n            email = request_data[\"json\"][\"email\"]\n            # 发送并获取验证码\n            verify_code = send_and_get_verify_code(email)\n            # 填充验证码到请求参数\n            request_data[\"json\"][\"verifyCode\"] = verify_code\n    \n        # 发送请求\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            files=request_data.get(\"files\"),\n            token=auth_token if case[\"case_id\"] != \"auth_029\" else None  # 未登录用例移除token\n        )\n    \n        # 断言\n>       assert_response(\n            response,\n            expected_code=case[\"expected_code\"],\n            expected_success=case.get(\"expected_success\"),\n            expected_message=case.get(\"expected_message\")\n        )\n\ntests\\test_user_auth.py:71: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [403]>, expected_code = 400, expected_success = False\nexpected_message = '文件大小不能超过2MB'\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response}\"\nE       AssertionError: 状态码不符：预期400，实际403，完整response：<Response [403]>\nE       assert 403 == 400\nE        +  where 403 = <Response [403]>.status_code\n\nutils\\test_utils.py:7: AssertionError","steps":[{"name":"发送请求：'POST' '/auth/upload/avatar'","time":{"start":1753973830644,"stop":1753973830666,"duration":22},"status":"passed","steps":[],"attachments":[{"uid":"dad293aade493afa","name":"请求信息","source":"dad293aade493afa.json","type":"application/json","size":16},{"uid":"5ec599c27a863ba2","name":"响应信息","source":"5ec599c27a863ba2.txt","type":"text/plain","size":20},{"uid":"489c8014cec5e31e","name":"响应体","source":"489c8014cec5e31e.json","type":"application/json","size":0}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/upload/avatar'"},{"name":"headers","value":"{'Authorization': 'Bearer ', 'Content-Type': 'multipart/form-data'}"},{"name":"params","value":"{}"},{"name":"json","value":"{}"},{"name":"files","value":"{'file': <_io.BufferedReader name='large_2561.png'>}"},{"name":"token","value":"'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5NzM4MjgsImV4cCI6MTc1Mzk4MTAyOH0.zS4qj1dKR5Frga1YfWSwr01vAABqUPqfzAwi3xm2SVs'"}],"attachmentsCount":3,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"验证响应：状态码400，消息'文件大小不能超过2MB'","time":{"start":1753973830667,"stop":1753973830667,"duration":0},"status":"failed","statusMessage":"AssertionError: 状态码不符：预期400，实际403，完整response：<Response [403]>\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code\n","statusTrace":"  File \"D:\\Anaconda3\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"D:\\工作记录\\项目说明\\api_test\\utils\\test_utils.py\", line 7, in assert_response\n    assert response.status_code == expected_code, \\\n","steps":[],"attachments":[],"parameters":[{"name":"response","value":"<Response [403]>"},{"name":"expected_code","value":"400"},{"name":"expected_success","value":"False"},{"name":"expected_message","value":"'文件大小不能超过2MB'"}],"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[{"uid":"ab0f2d771a941ee4","name":"stdout","source":"ab0f2d771a941ee4.txt","type":"text/plain","size":183}],"parameters":[],"attachmentsCount":4,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":2},"afterStages":[{"name":"non_image_file::0","time":{"start":1753973830711,"stop":1753973830714,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_png_image::0","time":{"start":1753973830719,"stop":1753973830724,"duration":5},"status":"broken","statusMessage":"PermissionError: [WinError 32] 另一个程序正在使用此文件，进程无法访问。: 'large_2561.png'\n","statusTrace":"  File \"D:\\Anaconda3\\Lib\\site-packages\\allure_commons\\_allure.py\", line 231, in __call__\n    return self._fixture_function(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"D:\\Anaconda3\\Lib\\site-packages\\_pytest\\fixtures.py\", line 911, in _teardown_yield_fixture\n    next(it)\n  File \"D:\\工作记录\\项目说明\\api_test\\tests\\conftest.py\", line 54, in large_png_image\n    os.remove(img_path)\n","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"small_png_image::0","time":{"start":1753973830728,"stop":1753973830732,"duration":4},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_jpg_image::0","time":{"start":1753973830738,"stop":1753973830763,"duration":25},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"small_jpg_image::0","time":{"start":1753973830786,"stop":1753973830793,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"labels":[{"name":"feature","value":"用户认证模块"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_user_auth"},{"name":"host","value":"CYJ"},{"name":"thread","value":"1232-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_user_auth"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"case","value":"{'case_id': 'auth_027', 'name': '上传超过2MB的PNG图片', 'method': 'POST', 'url': '/auth/upload/avatar', 'headers': {'Authorization': 'Bearer ', 'Content-Type': 'multipart/form-data'}, 'files': {'file': 'large_avatar.png'}, 'expected_code': 400, 'expected_success': False, 'expected_message': '文件大小不能超过2MB'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"61a0dc1d844ee43f","status":"failed","statusDetails":"AssertionError: 状态码不符：预期400，实际403，完整response：<Response [403]>\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code","time":{"start":1753973676735,"stop":1753973676766,"duration":31}},{"uid":"4ab789ac45da9e52","status":"failed","statusDetails":"AssertionError: 状态码不符：预期400，实际403，完整response：<Response [403]>\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code","time":{"start":1753972613613,"stop":1753972613635,"duration":22}},{"uid":"b6a7d1ea5d5e416f","status":"failed","statusDetails":"AssertionError: 状态码不符：预期400，实际403，完整response：<Response [403]>\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code","time":{"start":1753971283506,"stop":1753971283522,"duration":16}},{"uid":"5fb63e0751658a5c","status":"failed","statusDetails":"AssertionError: 状态码不符：预期400，实际403，完整response:<Response [403]>\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code","time":{"start":1753970533733,"stop":1753970533766,"duration":33}},{"uid":"6b973d8b08135e8b","status":"broken","statusDetails":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1753970309019,"stop":1753970309058,"duration":39}},{"uid":"5a0f0c4bce264468","status":"broken","statusDetails":"UnboundLocalError: cannot access local variable 'json_data' where it is not associated with a value","time":{"start":1753969974587,"stop":1753969974621,"duration":34}},{"uid":"317a8413b2ee4cd8","status":"failed","statusDetails":"AssertionError: 状态码不符：预期400，实际403\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code","time":{"start":1753969640772,"stop":1753969640787,"duration":15}},{"uid":"745e91c4cbbda590","status":"failed","statusDetails":"AssertionError: 状态码不符：预期400，实际403\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code","time":{"start":1753969407208,"stop":1753969407256,"duration":48}},{"uid":"5d6e3e2783f8284b","status":"failed","statusDetails":"AssertionError: 状态码不符：预期400，实际403\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code","time":{"start":1753969146248,"stop":1753969146282,"duration":34}},{"uid":"79739a9001bca4c8","status":"failed","statusDetails":"AssertionError: 状态码不符：预期400，实际403\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code","time":{"start":1753968188638,"stop":1753968188677,"duration":39}},{"uid":"4bec227dd23dccf3","status":"broken","statusDetails":"KeyError: 'large_avatar.png'","time":{"start":1753967371945,"stop":1753967371947,"duration":2}},{"uid":"3266af0d0540bd16","status":"broken","statusDetails":"KeyError: 'url'","time":{"start":1753967267822,"stop":1753967267822,"duration":0}},{"uid":"3d0042f964807229","status":"broken","statusDetails":"requests.exceptions.ConnectionError: HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /api/auth/login (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x000001657E09DE50>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。'))","time":{"start":1753967195558,"stop":1753967195558,"duration":0}},{"uid":"6d65779274eaf4a","status":"broken","statusDetails":"KeyError: 'url'","time":{"start":1753966889982,"stop":1753966889982,"duration":0}}],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"37d056c09d2781a6.json","parameterValues":["{'case_id': 'auth_027', 'name': '上传超过2MB的PNG图片', 'method': 'POST', 'url': '/auth/upload/avatar', 'headers': {'Authorization': 'Bearer ', 'Content-Type': 'multipart/form-data'}, 'files': {'file': 'large_avatar.png'}, 'expected_code': 400, 'expected_success': False, 'expected_message': '文件大小不能超过2MB'}"]}