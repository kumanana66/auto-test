{"uid":"d3e006a9f70d76ad","name":"test_crawler_tasks[case3]","fullName":"tests.test_crawler_tasks#test_crawler_tasks","historyId":"545cc0deaa26c5eebe66b802f8bd69e3","time":{"start":1753987837548,"stop":1753987837585,"duration":37},"status":"failed","statusMessage":"AssertionError: 状态码不符：预期403，实际200，完整response：{\"success\":true,\"message\":\"任务创建成功\",\"data\":{\"id\":257,\"processName\":\"亚马逊监控\",\"asinList\":\"B08XJ8J7SZ,B08LGD78Q5\",\"requiredInfo\":null,\"platform\":\"Amazon\",\"timeCycle\":\"daily\",\"createTime\":\"2025-08-01T02:50:37.5610671\",\"updateTime\":\"2025-08-01T02:50:37.5610671\",\"status\":\"ACTIVE\",\"userId\":4,\"username\":\"admin1155\"}}\nassert 200 == 403\n +  where 200 = <Response [200]>.status_code","statusTrace":"case = {'case_id': 'task_004', 'expected_code': 403, 'expected_message': '请至少选择一项所需信息', 'expected_success': False, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODc4MzcsImV4cCI6MTc1Mzk5NTAzN30.9t3zap-5pqZTDfZ4bIDIBHfGZPcPRwqeFwSEWriT7Gs'\ntask_id = 256\n\n    @allure.feature(\"爬虫任务模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_crawler_tasks(case, auth_token, task_id):\n        allure.story(case[\"name\"])\n        allure.title(f\"{case['case_id']}: {case['name']}\")\n    \n        # 替换任务ID占位符\n        if \"{task_id}\" in case[\"url\"]:\n            case[\"url\"] = case[\"url\"].replace(\"{task_id}\", str(task_id))\n            allure.attach(f\"使用任务ID: {task_id}\", \"测试信息\", allure.attachment_type.TEXT)\n    \n        # --------------------------\n        # 关键修改：处理PPT下载的前置依赖\n        # --------------------------\n        # 1. 若当前是下载PPT的用例（task_017），先启动数据分析并等待完成\n        if case[\"case_id\"] == \"task_017\":\n            allure.attach(\"开始执行数据分析数据分析前置操作\", \"前置依赖\", allure.attachment_type.TEXT)\n    \n            # 1.1 启动数据分析\n            analyze_response = Request.send_request(\n                \"POST\", f\"/crawler/tasks/{task_id}/analyze\",  # 对应task_016的接口\n                token=auth_token\n            )\n            assert_response(\n                analyze_response,\n                200,\n                expected_success=True,\n                expected_message=\"数据分析已启动\"  # 匹配task_016的预期消息\n            )\n            allure.attach(\"数据分析已启动\", \"前置操作结果\", allure.attachment_type.TEXT)\n    \n            # 1.2 轮询等待分析完成（复用同test_download_analyzed_ppt的逻辑）\n            max_wait_seconds = 180\n            check_interval = 5\n            elapsed_seconds = 0\n            status = \"PROCESSING\"\n    \n            while elapsed_seconds < max_wait_seconds and status == \"PROCESSING\":\n                # 查询当前状态\n                status_response = Request.send_request(\n                    \"GET\", f\"/crawler/tasks/{task_id}/analyze/status\",\n                    token=auth_token\n                )\n                assert_response(status_response, 200)\n                status = status_response.json()[\"data\"]\n                allure.attach(f\"当前分析状态: {status} (等待{elapsed_seconds}秒)\", \"状态轮询\", allure.attachment_type.TEXT)\n    \n                if status == \"PROCESSING\":\n                    time.sleep(check_interval)\n                    elapsed_seconds += check_interval\n    \n            # 1.3 校验分析状态（必须完成才能继续下载）\n            assert status in [\"COMPLETED\", \"FAILED\"], f\"数据分析超时，最终状态：{status}\"\n            if status == \"FAILED\":\n                pytest.fail(\"数据分析失败，无法下载PPT\")  # 分析失败则标记用例失败\n            allure.attach(\"数据分析已完成\", \"前置操作结果\", allure.attachment_type.TEXT)\n    \n        # 预处理请求\n        request_data = preprocess_request(case, auth_token)\n        if \"headers\" in request_data and \"Authorization\" in request_data[\"headers\"]:\n            del request_data[\"headers\"][\"Authorization\"]\n    \n        # 发送请求（对task_017而言，此时已确保分析完成）\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            token=auth_token\n        )\n    \n        # 断言（增加PPT格式校验）\n        try:\n            assert_response(\n                response,\n                expected_code=case[\"expected_code\"],\n                expected_success=case.get(\"expected_success\"),\n                expected_message=case.get(\"expected_message\")\n            )\n            # 额外校验PPT文件类型（对应case中的expected_content_type）\n            if case.get(\"expected_content_type\"):\n                assert case[\"expected_content_type\"] in response.headers[\"Content-Type\"], \\\n                    f\"文件类型错误，预期: {case['expected_content_type']}, 实际: {response.headers['Content-Type']}\"\n        except AssertionError as e:\n            allure.attach(f\"响应内容: {response.text}\", \"断言失败详情\", allure.attachment_type.TEXT)\n>           raise e\n\ntests\\test_crawler_tasks.py:120: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\test_crawler_tasks.py:108: in test_crawler_tasks\n    assert_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [200]>, expected_code = 403\nexpected_success = False, expected_message = '请至少选择一项所需信息'\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response.text}\"\nE       AssertionError: 状态码不符：预期403，实际200，完整response：{\"success\":true,\"message\":\"任务创建成功\",\"data\":{\"id\":257,\"processName\":\"亚马逊监控\",\"asinList\":\"B08XJ8J7SZ,B08LGD78Q5\",\"requiredInfo\":null,\"platform\":\"Amazon\",\"timeCycle\":\"daily\",\"createTime\":\"2025-08-01T02:50:37.5610671\",\"updateTime\":\"2025-08-01T02:50:37.5610671\",\"status\":\"ACTIVE\",\"userId\":4,\"username\":\"admin1155\"}}\nE       assert 200 == 403\nE        +  where 200 = <Response [200]>.status_code\n\nutils\\test_utils.py:7: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"auth_token","time":{"start":1753987837270,"stop":1753987837513,"duration":243},"status":"passed","steps":[{"name":"发送请求：'POST' '/auth/login'","time":{"start":1753987837270,"stop":1753987837513,"duration":243},"status":"passed","steps":[],"attachments":[{"uid":"8b4bf5d75359c1b5","name":"请求信息","source":"8b4bf5d75359c1b5.txt","type":"text/plain","size":41},{"uid":"4c5b9d6b2025ea57","name":"请求头","source":"4c5b9d6b2025ea57.txt","type":"text/plain","size":45},{"uid":"bc74f5d249fe86bd","name":"请求参数","source":"bc74f5d249fe86bd.json","type":"application/json","size":58},{"uid":"47dcc1c2ae9a743a","name":"响应信息","source":"47dcc1c2ae9a743a.txt","type":"text/plain","size":14},{"uid":"7f14f73caf5690f2","name":"响应体","source":"7f14f73caf5690f2.json","type":"application/json","size":214}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/login'"},{"name":"headers","value":"None"},{"name":"params","value":"None"},{"name":"json","value":"{'username': 'admin1155', 'password': 'admin1155'}"},{"name":"files","value":"None"},{"name":"token","value":"None"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":1},{"name":"task_id","time":{"start":1753987837514,"stop":1753987837546,"duration":32},"status":"passed","steps":[{"name":"发送请求：'POST' '/crawler/tasks'","time":{"start":1753987837514,"stop":1753987837546,"duration":32},"status":"passed","steps":[],"attachments":[{"uid":"e1ebef2dc315e844","name":"请求信息","source":"e1ebef2dc315e844.txt","type":"text/plain","size":44},{"uid":"21a02dd3b99932fa","name":"请求头","source":"21a02dd3b99932fa.txt","type":"text/plain","size":209},{"uid":"2d171c0fb9f7cb11","name":"请求参数","source":"2d171c0fb9f7cb11.json","type":"application/json","size":141},{"uid":"5f80a26bdc2e2199","name":"响应信息","source":"5f80a26bdc2e2199.txt","type":"text/plain","size":14},{"uid":"1bae135abaa652fa","name":"响应体","source":"1bae135abaa652fa.json","type":"application/json","size":326}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/crawler/tasks'"},{"name":"headers","value":"None"},{"name":"params","value":"None"},{"name":"json","value":"{'processName': '测试任务_None', 'asinList': 'B08XJ8J7SZ', 'requiredInfo': ['price'], 'platform': 'Amazon', 'timeCycle': 'daily'}"},{"name":"files","value":"None"},{"name":"token","value":"'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODc4MzcsImV4cCI6MTc1Mzk5NTAzN30.9t3zap-5pqZTDfZ4bIDIBHfGZPcPRwqeFwSEWriT7Gs'"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"验证响应：状态码200，消息None","time":{"start":1753987837546,"stop":1753987837546,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"response","value":"<Response [200]>"},{"name":"expected_code","value":"200"},{"name":"expected_success","value":"True"},{"name":"expected_message","value":"None"}],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":2}],"testStage":{"status":"failed","statusMessage":"AssertionError: 状态码不符：预期403，实际200，完整response：{\"success\":true,\"message\":\"任务创建成功\",\"data\":{\"id\":257,\"processName\":\"亚马逊监控\",\"asinList\":\"B08XJ8J7SZ,B08LGD78Q5\",\"requiredInfo\":null,\"platform\":\"Amazon\",\"timeCycle\":\"daily\",\"createTime\":\"2025-08-01T02:50:37.5610671\",\"updateTime\":\"2025-08-01T02:50:37.5610671\",\"status\":\"ACTIVE\",\"userId\":4,\"username\":\"admin1155\"}}\nassert 200 == 403\n +  where 200 = <Response [200]>.status_code","statusTrace":"case = {'case_id': 'task_004', 'expected_code': 403, 'expected_message': '请至少选择一项所需信息', 'expected_success': False, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODc4MzcsImV4cCI6MTc1Mzk5NTAzN30.9t3zap-5pqZTDfZ4bIDIBHfGZPcPRwqeFwSEWriT7Gs'\ntask_id = 256\n\n    @allure.feature(\"爬虫任务模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_crawler_tasks(case, auth_token, task_id):\n        allure.story(case[\"name\"])\n        allure.title(f\"{case['case_id']}: {case['name']}\")\n    \n        # 替换任务ID占位符\n        if \"{task_id}\" in case[\"url\"]:\n            case[\"url\"] = case[\"url\"].replace(\"{task_id}\", str(task_id))\n            allure.attach(f\"使用任务ID: {task_id}\", \"测试信息\", allure.attachment_type.TEXT)\n    \n        # --------------------------\n        # 关键修改：处理PPT下载的前置依赖\n        # --------------------------\n        # 1. 若当前是下载PPT的用例（task_017），先启动数据分析并等待完成\n        if case[\"case_id\"] == \"task_017\":\n            allure.attach(\"开始执行数据分析数据分析前置操作\", \"前置依赖\", allure.attachment_type.TEXT)\n    \n            # 1.1 启动数据分析\n            analyze_response = Request.send_request(\n                \"POST\", f\"/crawler/tasks/{task_id}/analyze\",  # 对应task_016的接口\n                token=auth_token\n            )\n            assert_response(\n                analyze_response,\n                200,\n                expected_success=True,\n                expected_message=\"数据分析已启动\"  # 匹配task_016的预期消息\n            )\n            allure.attach(\"数据分析已启动\", \"前置操作结果\", allure.attachment_type.TEXT)\n    \n            # 1.2 轮询等待分析完成（复用同test_download_analyzed_ppt的逻辑）\n            max_wait_seconds = 180\n            check_interval = 5\n            elapsed_seconds = 0\n            status = \"PROCESSING\"\n    \n            while elapsed_seconds < max_wait_seconds and status == \"PROCESSING\":\n                # 查询当前状态\n                status_response = Request.send_request(\n                    \"GET\", f\"/crawler/tasks/{task_id}/analyze/status\",\n                    token=auth_token\n                )\n                assert_response(status_response, 200)\n                status = status_response.json()[\"data\"]\n                allure.attach(f\"当前分析状态: {status} (等待{elapsed_seconds}秒)\", \"状态轮询\", allure.attachment_type.TEXT)\n    \n                if status == \"PROCESSING\":\n                    time.sleep(check_interval)\n                    elapsed_seconds += check_interval\n    \n            # 1.3 校验分析状态（必须完成才能继续下载）\n            assert status in [\"COMPLETED\", \"FAILED\"], f\"数据分析超时，最终状态：{status}\"\n            if status == \"FAILED\":\n                pytest.fail(\"数据分析失败，无法下载PPT\")  # 分析失败则标记用例失败\n            allure.attach(\"数据分析已完成\", \"前置操作结果\", allure.attachment_type.TEXT)\n    \n        # 预处理请求\n        request_data = preprocess_request(case, auth_token)\n        if \"headers\" in request_data and \"Authorization\" in request_data[\"headers\"]:\n            del request_data[\"headers\"][\"Authorization\"]\n    \n        # 发送请求（对task_017而言，此时已确保分析完成）\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            token=auth_token\n        )\n    \n        # 断言（增加PPT格式校验）\n        try:\n            assert_response(\n                response,\n                expected_code=case[\"expected_code\"],\n                expected_success=case.get(\"expected_success\"),\n                expected_message=case.get(\"expected_message\")\n            )\n            # 额外校验PPT文件类型（对应case中的expected_content_type）\n            if case.get(\"expected_content_type\"):\n                assert case[\"expected_content_type\"] in response.headers[\"Content-Type\"], \\\n                    f\"文件类型错误，预期: {case['expected_content_type']}, 实际: {response.headers['Content-Type']}\"\n        except AssertionError as e:\n            allure.attach(f\"响应内容: {response.text}\", \"断言失败详情\", allure.attachment_type.TEXT)\n>           raise e\n\ntests\\test_crawler_tasks.py:120: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\test_crawler_tasks.py:108: in test_crawler_tasks\n    assert_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [200]>, expected_code = 403\nexpected_success = False, expected_message = '请至少选择一项所需信息'\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response.text}\"\nE       AssertionError: 状态码不符：预期403，实际200，完整response：{\"success\":true,\"message\":\"任务创建成功\",\"data\":{\"id\":257,\"processName\":\"亚马逊监控\",\"asinList\":\"B08XJ8J7SZ,B08LGD78Q5\",\"requiredInfo\":null,\"platform\":\"Amazon\",\"timeCycle\":\"daily\",\"createTime\":\"2025-08-01T02:50:37.5610671\",\"updateTime\":\"2025-08-01T02:50:37.5610671\",\"status\":\"ACTIVE\",\"userId\":4,\"username\":\"admin1155\"}}\nE       assert 200 == 403\nE        +  where 200 = <Response [200]>.status_code\n\nutils\\test_utils.py:7: AssertionError","steps":[{"name":"发送请求：'POST' '/crawler/tasks'","time":{"start":1753987837548,"stop":1753987837581,"duration":33},"status":"passed","steps":[],"attachments":[{"uid":"e19c47b3c5e8490a","name":"请求信息","source":"e19c47b3c5e8490a.txt","type":"text/plain","size":44},{"uid":"640b16667b168bc2","name":"请求头","source":"640b16667b168bc2.txt","type":"text/plain","size":209},{"uid":"fef039c74b36d887","name":"请求参数","source":"fef039c74b36d887.json","type":"application/json","size":123},{"uid":"fcea97ec0a04bce0","name":"响应信息","source":"fcea97ec0a04bce0.txt","type":"text/plain","size":14},{"uid":"93cdc83b6d6d01af","name":"响应体","source":"93cdc83b6d6d01af.json","type":"application/json","size":330}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/crawler/tasks'"},{"name":"headers","value":"{}"},{"name":"params","value":"{}"},{"name":"json","value":"{'processName': '亚马逊监控', 'asinList': 'B08XJ8J7SZ,B08LGD78Q5', 'platform': 'Amazon', 'timeCycle': 'daily'}"},{"name":"files","value":"None"},{"name":"token","value":"'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODc4MzcsImV4cCI6MTc1Mzk5NTAzN30.9t3zap-5pqZTDfZ4bIDIBHfGZPcPRwqeFwSEWriT7Gs'"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"验证响应：状态码403，消息'请至少选择一项所需信息'","time":{"start":1753987837581,"stop":1753987837581,"duration":0},"status":"failed","statusMessage":"AssertionError: 状态码不符：预期403，实际200，完整response：{\"success\":true,\"message\":\"任务创建成功\",\"data\":{\"id\":257,\"processName\":\"亚马逊监控\",\"asinList\":\"B08XJ8J7SZ,B08LGD78Q5\",\"requiredInfo\":null,\"platform\":\"Amazon\",\"timeCycle\":\"daily\",\"createTime\":\"2025-08-01T02:50:37.5610671\",\"updateTime\":\"2025-08-01T02:50:37.5610671\",\"status\":\"ACTIVE\",\"userId\":4,\"username\":\"admin1155\"}}\nassert 200 == 403\n +  where 200 = <Response [200]>.status_code\n","statusTrace":"  File \"D:\\Anaconda3\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"D:\\工作记录\\项目说明\\api_test\\utils\\test_utils.py\", line 7, in assert_response\n    assert response.status_code == expected_code, \\\n","steps":[],"attachments":[],"parameters":[{"name":"response","value":"<Response [200]>"},{"name":"expected_code","value":"403"},{"name":"expected_success","value":"False"},{"name":"expected_message","value":"'请至少选择一项所需信息'"}],"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[{"uid":"5b2a276df7cad011","name":"断言失败详情","source":"5b2a276df7cad011.txt","type":"text/plain","size":344},{"uid":"a9aacc8d85901469","name":"log","source":"a9aacc8d85901469.txt","type":"text/plain","size":2926},{"uid":"391622ed109669a","name":"stdout","source":"391622ed109669a.txt","type":"text/plain","size":183},{"uid":"ce8e403e69320b54","name":"stderr","source":"ce8e403e69320b54.txt","type":"text/plain","size":2414}],"parameters":[],"attachmentsCount":9,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":2},"afterStages":[{"name":"task_id::0","time":{"start":1753987837612,"stop":1753987837708,"duration":96},"status":"passed","steps":[{"name":"发送请求：'DELETE' '/crawler/tasks/256'","time":{"start":1753987837612,"stop":1753987837706,"duration":94},"status":"passed","steps":[],"attachments":[{"uid":"89e510c2f93b5d1f","name":"请求信息","source":"89e510c2f93b5d1f.txt","type":"text/plain","size":48},{"uid":"a004cd4322629df2","name":"请求头","source":"a004cd4322629df2.txt","type":"text/plain","size":209},{"uid":"647df013f2367861","name":"请求参数","source":"647df013f2367861.json","type":"application/json","size":12},{"uid":"9799e3abdf1fabc7","name":"响应信息","source":"9799e3abdf1fabc7.txt","type":"text/plain","size":14},{"uid":"43b89667a17bc765","name":"响应体","source":"43b89667a17bc765.json","type":"application/json","size":69}],"parameters":[{"name":"method","value":"'DELETE'"},{"name":"endpoint","value":"'/crawler/tasks/256'"},{"name":"headers","value":"None"},{"name":"params","value":"None"},{"name":"json","value":"None"},{"name":"files","value":"None"},{"name":"token","value":"'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODc4MzcsImV4cCI6MTc1Mzk5NTAzN30.9t3zap-5pqZTDfZ4bIDIBHfGZPcPRwqeFwSEWriT7Gs'"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":1}],"labels":[{"name":"feature","value":"爬虫任务模块"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_crawler_tasks"},{"name":"host","value":"CYJ"},{"name":"thread","value":"22580-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_crawler_tasks"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"case","value":"{'case_id': 'task_004', 'name': '所需信息未选择', 'method': 'POST', 'url': '/crawler/tasks', 'headers': {'Authorization': ''}, 'json': {'processName': '亚马逊监控', 'asinList': 'B08XJ8J7SZ,B08LGD78Q5', 'platform': 'Amazon', 'timeCycle': 'daily'}, 'expected_code': 403, 'expected_success': False, 'expected_message': '请至少选择一项所需信息'}"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"d3e006a9f70d76ad.json","parameterValues":["{'case_id': 'task_004', 'name': '所需信息未选择', 'method': 'POST', 'url': '/crawler/tasks', 'headers': {'Authorization': ''}, 'json': {'processName': '亚马逊监控', 'asinList': 'B08XJ8J7SZ,B08LGD78Q5', 'platform': 'Amazon', 'timeCycle': 'daily'}, 'expected_code': 403, 'expected_success': False, 'expected_message': '请至少选择一项所需信息'}"]}