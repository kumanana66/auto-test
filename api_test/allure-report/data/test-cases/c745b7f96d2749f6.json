{"uid":"c745b7f96d2749f6","name":"test_user_auth[case18]","fullName":"tests.test_user_auth#test_user_auth","historyId":"73a21e24c30644f4ccf646df1483681d","time":{"start":1753969391750,"stop":1753969392011,"duration":261},"status":"failed","statusMessage":"AssertionError: 状态码不符：预期401，实际403\nassert 403 == 401\n +  where 403 = <Response [403]>.status_code","statusTrace":"case = {'case_id': 'auth_019', 'expected_code': 401, 'expected_message': '密码错误，还可重试4次', 'expected_success': False, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5NjkzNTQsImV4cCI6MTc1Mzk3NjU1NH0.1yv-TUzNd30bkzsV1yMO0_bbkMOmAgbTeZHWKJ0l2Lo'\nsmall_jpg_image = 'small_6173.jpg'\nlarge_jpg_image = 'large_2806.jpg'\nsmall_png_image = 'small_7083.png'\nlarge_png_image = 'large_6274.png', non_image_file = 'test_5061.txt'\n\n    @allure.feature(\"用户认证模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_user_auth(case, auth_token, small_jpg_image, large_jpg_image, small_png_image, large_png_image, non_image_file):\n        allure.story(case[\"name\"])\n        allure.title(case[\"case_id\"] + \": \" + case[\"name\"])\n    \n        # 文件映射\n        file_map = {\n            \"test_avatar.jpg\": small_jpg_image,\n            \"large_avatar.jpg\": large_jpg_image,\n            \"test_avatar.png\": small_png_image,\n            \"large_avatar.png\": large_png_image,\n            \"test_file.txt\": non_image_file\n        }\n        # 预处理请求\n        request_data = preprocess_request(case, auth_token, file_map)\n    \n        # 测试用例：未登录状态上传头像\n        if case[\"case_id\"] == \"auth_029\":\n            # 移除token，模拟未登录\n            response = Request.send_request(\n                method=case[\"method\"],\n                endpoint=case[\"url\"],\n                files=request_data.get(\"files\"),\n                token=None  # 显式传None，不携带token\n            )\n        else:\n            # 发送请求\n            response = Request.send_request(\n                method=case[\"method\"],\n                endpoint=case[\"url\"],\n                json=request_data.get(\"json\"),\n                params=request_data.get(\"params\"),\n                headers=request_data.get(\"headers\"),\n                files=request_data.get(\"files\"),\n                token=auth_token\n            )\n    \n        # 断言\n>       assert_response(\n            response,\n            expected_code=case[\"expected_code\"],\n            expected_success=case.get(\"expected_success\"),\n            expected_message=case.get(\"expected_message\")\n        )\n\ntests\\test_user_auth.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [403]>, expected_code = 401\nexpected_success = False, expected_message = '密码错误，还可重试4次'\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}\"\nE       AssertionError: 状态码不符：预期401，实际403\nE       assert 403 == 401\nE        +  where 403 = <Response [403]>.status_code\n\nutils\\test_utils.py:7: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"auth_token","time":{"start":1753969354439,"stop":1753969354804,"duration":365},"status":"passed","steps":[{"name":"发送请求：'POST' '/auth/login'","time":{"start":1753969354440,"stop":1753969354803,"duration":363},"status":"passed","steps":[],"attachments":[{"uid":"d5a3b3b63bbd1e12","name":"请求信息","source":"d5a3b3b63bbd1e12.json","type":"application/json","size":64},{"uid":"b8c4d54702bc7a6e","name":"响应信息","source":"b8c4d54702bc7a6e.txt","type":"text/plain","size":20},{"uid":"59f3061ccac14253","name":"响应体","source":"59f3061ccac14253.json","type":"application/json","size":214}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/login'"},{"name":"headers","value":"None"},{"name":"params","value":"None"},{"name":"json","value":"{'username': 'admin1155', 'password': 'admin1155'}"},{"name":"files","value":"None"},{"name":"token","value":"None"}],"attachmentsCount":3,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":3,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":1},{"name":"small_jpg_image","time":{"start":1753969390356,"stop":1753969390507,"duration":151},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_jpg_image","time":{"start":1753969390507,"stop":1753969390997,"duration":490},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"small_png_image","time":{"start":1753969390997,"stop":1753969391076,"duration":79},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_png_image","time":{"start":1753969391076,"stop":1753969391747,"duration":671},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"non_image_file","time":{"start":1753969391748,"stop":1753969391749,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: 状态码不符：预期401，实际403\nassert 403 == 401\n +  where 403 = <Response [403]>.status_code","statusTrace":"case = {'case_id': 'auth_019', 'expected_code': 401, 'expected_message': '密码错误，还可重试4次', 'expected_success': False, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5NjkzNTQsImV4cCI6MTc1Mzk3NjU1NH0.1yv-TUzNd30bkzsV1yMO0_bbkMOmAgbTeZHWKJ0l2Lo'\nsmall_jpg_image = 'small_6173.jpg'\nlarge_jpg_image = 'large_2806.jpg'\nsmall_png_image = 'small_7083.png'\nlarge_png_image = 'large_6274.png', non_image_file = 'test_5061.txt'\n\n    @allure.feature(\"用户认证模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_user_auth(case, auth_token, small_jpg_image, large_jpg_image, small_png_image, large_png_image, non_image_file):\n        allure.story(case[\"name\"])\n        allure.title(case[\"case_id\"] + \": \" + case[\"name\"])\n    \n        # 文件映射\n        file_map = {\n            \"test_avatar.jpg\": small_jpg_image,\n            \"large_avatar.jpg\": large_jpg_image,\n            \"test_avatar.png\": small_png_image,\n            \"large_avatar.png\": large_png_image,\n            \"test_file.txt\": non_image_file\n        }\n        # 预处理请求\n        request_data = preprocess_request(case, auth_token, file_map)\n    \n        # 测试用例：未登录状态上传头像\n        if case[\"case_id\"] == \"auth_029\":\n            # 移除token，模拟未登录\n            response = Request.send_request(\n                method=case[\"method\"],\n                endpoint=case[\"url\"],\n                files=request_data.get(\"files\"),\n                token=None  # 显式传None，不携带token\n            )\n        else:\n            # 发送请求\n            response = Request.send_request(\n                method=case[\"method\"],\n                endpoint=case[\"url\"],\n                json=request_data.get(\"json\"),\n                params=request_data.get(\"params\"),\n                headers=request_data.get(\"headers\"),\n                files=request_data.get(\"files\"),\n                token=auth_token\n            )\n    \n        # 断言\n>       assert_response(\n            response,\n            expected_code=case[\"expected_code\"],\n            expected_success=case.get(\"expected_success\"),\n            expected_message=case.get(\"expected_message\")\n        )\n\ntests\\test_user_auth.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [403]>, expected_code = 401\nexpected_success = False, expected_message = '密码错误，还可重试4次'\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}\"\nE       AssertionError: 状态码不符：预期401，实际403\nE       assert 403 == 401\nE        +  where 403 = <Response [403]>.status_code\n\nutils\\test_utils.py:7: AssertionError","steps":[{"name":"发送请求：'POST' '/auth/login'","time":{"start":1753969391750,"stop":1753969392008,"duration":258},"status":"passed","steps":[],"attachments":[{"uid":"5d2b0da543af04b5","name":"请求信息","source":"5d2b0da543af04b5.json","type":"application/json","size":63},{"uid":"b6b4194e637a5f12","name":"响应信息","source":"b6b4194e637a5f12.txt","type":"text/plain","size":20},{"uid":"eb22c00e45beecfc","name":"响应体","source":"eb22c00e45beecfc.json","type":"application/json","size":0}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/login'"},{"name":"headers","value":"{}"},{"name":"params","value":"{}"},{"name":"json","value":"{'username': 'admin1155', 'password': 'Wrong123'}"},{"name":"files","value":"None"},{"name":"token","value":"'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5NjkzNTQsImV4cCI6MTc1Mzk3NjU1NH0.1yv-TUzNd30bkzsV1yMO0_bbkMOmAgbTeZHWKJ0l2Lo'"}],"attachmentsCount":3,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"验证响应：状态码401，消息'密码错误，还可重试4次'","time":{"start":1753969392009,"stop":1753969392009,"duration":0},"status":"failed","statusMessage":"AssertionError: 状态码不符：预期401，实际403\nassert 403 == 401\n +  where 403 = <Response [403]>.status_code\n","statusTrace":"  File \"D:\\Anaconda3\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"D:\\工作记录\\项目说明\\api_test\\utils\\test_utils.py\", line 7, in assert_response\n    assert response.status_code == expected_code, \\\n","steps":[],"attachments":[],"parameters":[{"name":"response","value":"<Response [403]>"},{"name":"expected_code","value":"401"},{"name":"expected_success","value":"False"},{"name":"expected_message","value":"'密码错误，还可重试4次'"}],"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":3,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":2},"afterStages":[{"name":"non_image_file::0","time":{"start":1753969392036,"stop":1753969392038,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_png_image::0","time":{"start":1753969392041,"stop":1753969392043,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"small_png_image::0","time":{"start":1753969392047,"stop":1753969392048,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"large_jpg_image::0","time":{"start":1753969392052,"stop":1753969392064,"duration":12},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"small_jpg_image::0","time":{"start":1753969392068,"stop":1753969392071,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"labels":[{"name":"feature","value":"用户认证模块"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_user_auth"},{"name":"host","value":"CYJ"},{"name":"thread","value":"18532-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_user_auth"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"case","value":"{'case_id': 'auth_019', 'name': '密码错误登录', 'method': 'POST', 'url': '/auth/login', 'json': {'username': 'admin1155', 'password': 'Wrong123'}, 'expected_code': 401, 'expected_success': False, 'expected_message': '密码错误，还可重试4次'}"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"c745b7f96d2749f6.json","parameterValues":["{'case_id': 'auth_019', 'name': '密码错误登录', 'method': 'POST', 'url': '/auth/login', 'json': {'username': 'admin1155', 'password': 'Wrong123'}, 'expected_code': 401, 'expected_success': False, 'expected_message': '密码错误，还可重试4次'}"]}