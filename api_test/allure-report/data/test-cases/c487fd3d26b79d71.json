{"uid":"c487fd3d26b79d71","name":"test_crawler_tasks[case2]","fullName":"tests.test_crawler_tasks#test_crawler_tasks","historyId":"5a759891c3a1c4bb5fc37b2d1107595f","time":{"start":1753987109665,"stop":1753987109704,"duration":39},"status":"failed","statusMessage":"AssertionError: 状态码不符：预期403，实际200，完整response：{\"success\":true,\"message\":\"任务创建成功\",\"data\":{\"id\":246,\"processName\":\"亚马逊监控\",\"asinList\":\"\",\"requiredInfo\":[\"price\"],\"platform\":\"Amazon\",\"timeCycle\":\"daily\",\"createTime\":\"2025-08-01T02:38:29.6784422\",\"updateTime\":\"2025-08-01T02:38:29.6784422\",\"status\":\"ACTIVE\",\"userId\":4,\"username\":\"admin1155\"}}\nassert 200 == 403\n +  where 200 = <Response [200]>.status_code","statusTrace":"case = {'case_id': 'task_003', 'expected_code': 403, 'expected_message': '请输入ASIN列表', 'expected_success': False, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODcxMDksImV4cCI6MTc1Mzk5NDMwOX0.WBpXPY-sV68fBbDv17bI2aFclOLK4o6ICWaMhCZ9JQA'\n\n    @allure.feature(\"爬虫任务模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_crawler_tasks(case, auth_token):\n        allure.story(case[\"name\"])\n        allure.title(case[\"case_id\"] + \": \" + case[\"name\"])\n    \n        # 替换任务ID占位符\n        if \"{task_id}\" in case[\"url\"]:\n            # 先创建一个测试任务获取ID\n            from utils.context import context\n            if not context.get(\"task_id\"):\n                create_response = Request.send_request(\n                    \"POST\", \"/crawler/tasks\",\n                    json={\n                        \"processName\": \"测试任务\",\n                        \"asinList\": \"B08XJ8J7SZ\",\n                        \"requiredInfo\": [\"price\"],\n                        \"platform\": \"Amazon\",\n                        \"timeCycle\": \"daily\"\n                    },\n                    token=auth_token\n                )\n                context.set(\"task_id\", create_response.json()[\"data\"][\"id\"])\n            task_id = context.get(\"task_id\")\n            case[\"url\"] = case[\"url\"].replace(\"{task_id}\", str(task_id))\n    \n        # 预处理请求\n        request_data = preprocess_request(case, auth_token)\n    \n        # 发送请求\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            token=auth_token\n        )\n    \n        # 断言\n>       assert_response(\n            response,\n            expected_code=case[\"expected_code\"],\n            expected_success=case.get(\"expected_success\"),\n            expected_message=case.get(\"expected_message\")\n        )\n\ntests\\test_crawler_tasks.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [200]>, expected_code = 403\nexpected_success = False\nexpected_message = '请输入ASIN列表'\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response.text}\"\nE       AssertionError: 状态码不符：预期403，实际200，完整response：{\"success\":true,\"message\":\"任务创建成功\",\"data\":{\"id\":246,\"processName\":\"亚马逊监控\",\"asinList\":\"\",\"requiredInfo\":[\"price\"],\"platform\":\"Amazon\",\"timeCycle\":\"daily\",\"createTime\":\"2025-08-01T02:38:29.6784422\",\"updateTime\":\"2025-08-01T02:38:29.6784422\",\"status\":\"ACTIVE\",\"userId\":4,\"username\":\"admin1155\"}}\nE       assert 200 == 403\nE        +  where 200 = <Response [200]>.status_code\n\nutils\\test_utils.py:7: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"auth_token","time":{"start":1753987109431,"stop":1753987109664,"duration":233},"status":"passed","steps":[{"name":"发送请求：'POST' '/auth/login'","time":{"start":1753987109433,"stop":1753987109663,"duration":230},"status":"passed","steps":[],"attachments":[{"uid":"a8259a1fafb9df75","name":"请求信息","source":"a8259a1fafb9df75.txt","type":"text/plain","size":41},{"uid":"2565ce07b02026bf","name":"请求头","source":"2565ce07b02026bf.txt","type":"text/plain","size":45},{"uid":"6fbe5f3b79175998","name":"请求参数","source":"6fbe5f3b79175998.json","type":"application/json","size":58},{"uid":"193915ecb8b75aa9","name":"响应信息","source":"193915ecb8b75aa9.txt","type":"text/plain","size":14},{"uid":"9ab8e7aa98779676","name":"响应体","source":"9ab8e7aa98779676.json","type":"application/json","size":214}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/login'"},{"name":"headers","value":"None"},{"name":"params","value":"None"},{"name":"json","value":"{'username': 'admin1155', 'password': 'admin1155'}"},{"name":"files","value":"None"},{"name":"token","value":"None"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":1}],"testStage":{"status":"failed","statusMessage":"AssertionError: 状态码不符：预期403，实际200，完整response：{\"success\":true,\"message\":\"任务创建成功\",\"data\":{\"id\":246,\"processName\":\"亚马逊监控\",\"asinList\":\"\",\"requiredInfo\":[\"price\"],\"platform\":\"Amazon\",\"timeCycle\":\"daily\",\"createTime\":\"2025-08-01T02:38:29.6784422\",\"updateTime\":\"2025-08-01T02:38:29.6784422\",\"status\":\"ACTIVE\",\"userId\":4,\"username\":\"admin1155\"}}\nassert 200 == 403\n +  where 200 = <Response [200]>.status_code","statusTrace":"case = {'case_id': 'task_003', 'expected_code': 403, 'expected_message': '请输入ASIN列表', 'expected_success': False, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODcxMDksImV4cCI6MTc1Mzk5NDMwOX0.WBpXPY-sV68fBbDv17bI2aFclOLK4o6ICWaMhCZ9JQA'\n\n    @allure.feature(\"爬虫任务模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_crawler_tasks(case, auth_token):\n        allure.story(case[\"name\"])\n        allure.title(case[\"case_id\"] + \": \" + case[\"name\"])\n    \n        # 替换任务ID占位符\n        if \"{task_id}\" in case[\"url\"]:\n            # 先创建一个测试任务获取ID\n            from utils.context import context\n            if not context.get(\"task_id\"):\n                create_response = Request.send_request(\n                    \"POST\", \"/crawler/tasks\",\n                    json={\n                        \"processName\": \"测试任务\",\n                        \"asinList\": \"B08XJ8J7SZ\",\n                        \"requiredInfo\": [\"price\"],\n                        \"platform\": \"Amazon\",\n                        \"timeCycle\": \"daily\"\n                    },\n                    token=auth_token\n                )\n                context.set(\"task_id\", create_response.json()[\"data\"][\"id\"])\n            task_id = context.get(\"task_id\")\n            case[\"url\"] = case[\"url\"].replace(\"{task_id}\", str(task_id))\n    \n        # 预处理请求\n        request_data = preprocess_request(case, auth_token)\n    \n        # 发送请求\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            token=auth_token\n        )\n    \n        # 断言\n>       assert_response(\n            response,\n            expected_code=case[\"expected_code\"],\n            expected_success=case.get(\"expected_success\"),\n            expected_message=case.get(\"expected_message\")\n        )\n\ntests\\test_crawler_tasks.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [200]>, expected_code = 403\nexpected_success = False\nexpected_message = '请输入ASIN列表'\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response.text}\"\nE       AssertionError: 状态码不符：预期403，实际200，完整response：{\"success\":true,\"message\":\"任务创建成功\",\"data\":{\"id\":246,\"processName\":\"亚马逊监控\",\"asinList\":\"\",\"requiredInfo\":[\"price\"],\"platform\":\"Amazon\",\"timeCycle\":\"daily\",\"createTime\":\"2025-08-01T02:38:29.6784422\",\"updateTime\":\"2025-08-01T02:38:29.6784422\",\"status\":\"ACTIVE\",\"userId\":4,\"username\":\"admin1155\"}}\nE       assert 200 == 403\nE        +  where 200 = <Response [200]>.status_code\n\nutils\\test_utils.py:7: AssertionError","steps":[{"name":"发送请求：'POST' '/crawler/tasks'","time":{"start":1753987109665,"stop":1753987109701,"duration":36},"status":"passed","steps":[],"attachments":[{"uid":"de90f79eb0fa9812","name":"请求信息","source":"de90f79eb0fa9812.txt","type":"text/plain","size":44},{"uid":"f0e0abf33c5edf91","name":"请求头","source":"f0e0abf33c5edf91.txt","type":"text/plain","size":209},{"uid":"ce397615a9500b","name":"请求参数","source":"ce397615a9500b.json","type":"application/json","size":129},{"uid":"dc34e31abe842fd8","name":"响应信息","source":"dc34e31abe842fd8.txt","type":"text/plain","size":14},{"uid":"af18ee4b6c057f44","name":"响应体","source":"af18ee4b6c057f44.json","type":"application/json","size":314}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/crawler/tasks'"},{"name":"headers","value":"{}"},{"name":"params","value":"{}"},{"name":"json","value":"{'processName': '亚马逊监控', 'asinList': '', 'requiredInfo': ['price'], 'platform': 'Amazon', 'timeCycle': 'daily'}"},{"name":"files","value":"None"},{"name":"token","value":"'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODcxMDksImV4cCI6MTc1Mzk5NDMwOX0.WBpXPY-sV68fBbDv17bI2aFclOLK4o6ICWaMhCZ9JQA'"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"验证响应：状态码403，消息'请输入ASIN列表'","time":{"start":1753987109701,"stop":1753987109702,"duration":1},"status":"failed","statusMessage":"AssertionError: 状态码不符：预期403，实际200，完整response：{\"success\":true,\"message\":\"任务创建成功\",\"data\":{\"id\":246,\"processName\":\"亚马逊监控\",\"asinList\":\"\",\"requiredInfo\":[\"price\"],\"platform\":\"Amazon\",\"timeCycle\":\"daily\",\"createTime\":\"2025-08-01T02:38:29.6784422\",\"updateTime\":\"2025-08-01T02:38:29.6784422\",\"status\":\"ACTIVE\",\"userId\":4,\"username\":\"admin1155\"}}\nassert 200 == 403\n +  where 200 = <Response [200]>.status_code\n","statusTrace":"  File \"D:\\Anaconda3\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"D:\\工作记录\\项目说明\\api_test\\utils\\test_utils.py\", line 7, in assert_response\n    assert response.status_code == expected_code, \\\n","steps":[],"attachments":[],"parameters":[{"name":"response","value":"<Response [200]>"},{"name":"expected_code","value":"403"},{"name":"expected_success","value":"False"},{"name":"expected_message","value":"'请输入ASIN列表'"}],"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[{"uid":"550b6c7991f52dd1","name":"log","source":"550b6c7991f52dd1.txt","type":"text/plain","size":1399},{"uid":"e6a60d632bdfeffc","name":"stdout","source":"e6a60d632bdfeffc.txt","type":"text/plain","size":183},{"uid":"7654209a3044b1b4","name":"stderr","source":"7654209a3044b1b4.txt","type":"text/plain","size":1157}],"parameters":[],"attachmentsCount":8,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":2},"afterStages":[],"labels":[{"name":"feature","value":"爬虫任务模块"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_crawler_tasks"},{"name":"host","value":"CYJ"},{"name":"thread","value":"24408-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_crawler_tasks"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"case","value":"{'case_id': 'task_003', 'name': 'ASIN列表为空', 'method': 'POST', 'url': '/crawler/tasks', 'headers': {'Authorization': ''}, 'json': {'processName': '亚马逊监控', 'asinList': '', 'requiredInfo': ['price'], 'platform': 'Amazon', 'timeCycle': 'daily'}, 'expected_code': 403, 'expected_success': False, 'expected_message': '请输入ASIN列表'}"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"c487fd3d26b79d71.json","parameterValues":["{'case_id': 'task_003', 'name': 'ASIN列表为空', 'method': 'POST', 'url': '/crawler/tasks', 'headers': {'Authorization': ''}, 'json': {'processName': '亚马逊监控', 'asinList': '', 'requiredInfo': ['price'], 'platform': 'Amazon', 'timeCycle': 'daily'}, 'expected_code': 403, 'expected_success': False, 'expected_message': '请输入ASIN列表'}"]}