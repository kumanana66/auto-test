{"uid":"9f6a54745276ce98","name":"test_crawler_tasks[case10]","fullName":"tests.test_crawler_tasks#test_crawler_tasks","historyId":"c50d2dda8ba2168fba0922f8072abc17","time":{"start":1753986171423,"stop":1753986171444,"duration":21},"status":"failed","statusMessage":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","statusTrace":"case = {'case_id': 'task_011', 'expected_code': 200, 'expected_success': True, 'headers': {'Authorization': 'Bearer '}, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODYxNzEsImV4cCI6MTc1Mzk5MzM3MX0.zK-nKV5gA87c92ZxqcAnIPEtww1qnqyR8zmpdQuFASU'\n\n    @allure.feature(\"爬虫任务模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_crawler_tasks(case, auth_token):\n        allure.story(case[\"name\"])\n        allure.title(case[\"case_id\"] + \": \" + case[\"name\"])\n    \n        # 替换任务ID占位符\n        if \"{task_id}\" in case[\"url\"]:\n            # 先创建一个测试任务获取ID\n            from utils.context import context\n            if not context.get(\"task_id\"):\n                create_response = Request.send_request(\n                    \"POST\", \"/crawler/tasks\",\n                    json={\n                        \"processName\": \"测试任务\",\n                        \"asinList\": \"B08XJ8J7SZ\",\n                        \"requiredInfo\": [\"price\"],\n                        \"platform\": \"Amazon\",\n                        \"timeCycle\": \"daily\"\n                    },\n                    token=auth_token\n                )\n                context.set(\"task_id\", create_response.json()[\"data\"][\"id\"])\n            task_id = context.get(\"task_id\")\n            case[\"url\"] = case[\"url\"].replace(\"{task_id}\", str(task_id))\n    \n        # 预处理请求\n        request_data = preprocess_request(case, auth_token)\n    \n        # 发送请求\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            token=auth_token\n        )\n    \n        # 断言\n>       assert_response(\n            response,\n            expected_code=case[\"expected_code\"],\n            expected_success=case.get(\"expected_success\"),\n            expected_message=case.get(\"expected_message\")\n        )\n\ntests\\test_crawler_tasks.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [403]>, expected_code = 200\nexpected_success = True, expected_message = None\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response}\"\nE       AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nE       assert 403 == 200\nE        +  where 403 = <Response [403]>.status_code\n\nutils\\test_utils.py:7: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":20,"retriesStatusChange":true,"beforeStages":[{"name":"auth_token","time":{"start":1753986171223,"stop":1753986171422,"duration":199},"status":"passed","steps":[{"name":"发送请求：'POST' '/auth/login'","time":{"start":1753986171223,"stop":1753986171420,"duration":197},"status":"passed","steps":[],"attachments":[{"uid":"e38094e6440b2b95","name":"请求信息","source":"e38094e6440b2b95.txt","type":"text/plain","size":41},{"uid":"b925ee58640af89d","name":"请求头","source":"b925ee58640af89d.txt","type":"text/plain","size":45},{"uid":"9730071d0658d0f3","name":"请求参数","source":"9730071d0658d0f3.json","type":"application/json","size":58},{"uid":"28f44f1042bd9405","name":"响应信息","source":"28f44f1042bd9405.txt","type":"text/plain","size":14},{"uid":"e52b499dff229770","name":"响应体","source":"e52b499dff229770.json","type":"application/json","size":214}],"parameters":[{"name":"method","value":"'POST'"},{"name":"endpoint","value":"'/auth/login'"},{"name":"headers","value":"None"},{"name":"params","value":"None"},{"name":"json","value":"{'username': 'admin1155', 'password': 'admin1155'}"},{"name":"files","value":"None"},{"name":"token","value":"None"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":1}],"testStage":{"status":"failed","statusMessage":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","statusTrace":"case = {'case_id': 'task_011', 'expected_code': 200, 'expected_success': True, 'headers': {'Authorization': 'Bearer '}, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODYxNzEsImV4cCI6MTc1Mzk5MzM3MX0.zK-nKV5gA87c92ZxqcAnIPEtww1qnqyR8zmpdQuFASU'\n\n    @allure.feature(\"爬虫任务模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_crawler_tasks(case, auth_token):\n        allure.story(case[\"name\"])\n        allure.title(case[\"case_id\"] + \": \" + case[\"name\"])\n    \n        # 替换任务ID占位符\n        if \"{task_id}\" in case[\"url\"]:\n            # 先创建一个测试任务获取ID\n            from utils.context import context\n            if not context.get(\"task_id\"):\n                create_response = Request.send_request(\n                    \"POST\", \"/crawler/tasks\",\n                    json={\n                        \"processName\": \"测试任务\",\n                        \"asinList\": \"B08XJ8J7SZ\",\n                        \"requiredInfo\": [\"price\"],\n                        \"platform\": \"Amazon\",\n                        \"timeCycle\": \"daily\"\n                    },\n                    token=auth_token\n                )\n                context.set(\"task_id\", create_response.json()[\"data\"][\"id\"])\n            task_id = context.get(\"task_id\")\n            case[\"url\"] = case[\"url\"].replace(\"{task_id}\", str(task_id))\n    \n        # 预处理请求\n        request_data = preprocess_request(case, auth_token)\n    \n        # 发送请求\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            token=auth_token\n        )\n    \n        # 断言\n>       assert_response(\n            response,\n            expected_code=case[\"expected_code\"],\n            expected_success=case.get(\"expected_success\"),\n            expected_message=case.get(\"expected_message\")\n        )\n\ntests\\test_crawler_tasks.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [403]>, expected_code = 200\nexpected_success = True, expected_message = None\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response}\"\nE       AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nE       assert 403 == 200\nE        +  where 403 = <Response [403]>.status_code\n\nutils\\test_utils.py:7: AssertionError","steps":[{"name":"发送请求：'GET' '/crawler/tasks'","time":{"start":1753986171424,"stop":1753986171441,"duration":17},"status":"passed","steps":[],"attachments":[{"uid":"2dd64c977ffb203b","name":"请求信息","source":"2dd64c977ffb203b.txt","type":"text/plain","size":44},{"uid":"8780b785eb1bc930","name":"请求头","source":"8780b785eb1bc930.txt","type":"text/plain","size":73},{"uid":"936f2c9b6a5f6bb3","name":"请求参数","source":"936f2c9b6a5f6bb3.json","type":"application/json","size":50},{"uid":"22d81d78ff8637a","name":"响应信息","source":"22d81d78ff8637a.txt","type":"text/plain","size":14},{"uid":"4f970640beb8afbe","name":"响应体","source":"4f970640beb8afbe.json","type":"application/json","size":0}],"parameters":[{"name":"method","value":"'GET'"},{"name":"endpoint","value":"'/crawler/tasks'"},{"name":"headers","value":"{'Authorization': 'Bearer '}"},{"name":"params","value":"{'status': 'ACTIVE', 'platform': 'Amazon'}"},{"name":"json","value":"{}"},{"name":"files","value":"None"},{"name":"token","value":"'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODYxNzEsImV4cCI6MTc1Mzk5MzM3MX0.zK-nKV5gA87c92ZxqcAnIPEtww1qnqyR8zmpdQuFASU'"}],"attachmentsCount":5,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":0},{"name":"验证响应：状态码200，消息None","time":{"start":1753986171441,"stop":1753986171442,"duration":1},"status":"failed","statusMessage":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code\n","statusTrace":"  File \"D:\\Anaconda3\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"D:\\工作记录\\项目说明\\api_test\\utils\\test_utils.py\", line 7, in assert_response\n    assert response.status_code == expected_code, \\\n","steps":[],"attachments":[],"parameters":[{"name":"response","value":"<Response [403]>"},{"name":"expected_code","value":"200"},{"name":"expected_success","value":"True"},{"name":"expected_message","value":"None"}],"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"attachments":[{"uid":"d2b1eec75ad8d1d9","name":"log","source":"d2b1eec75ad8d1d9.txt","type":"text/plain","size":948},{"uid":"c42317eedb9f5de4","name":"stdout","source":"c42317eedb9f5de4.txt","type":"text/plain","size":183},{"uid":"47ad2686b572cc3a","name":"stderr","source":"47ad2686b572cc3a.txt","type":"text/plain","size":707}],"parameters":[],"attachmentsCount":8,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":2},"afterStages":[],"labels":[{"name":"feature","value":"爬虫任务模块"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_crawler_tasks"},{"name":"host","value":"CYJ"},{"name":"thread","value":"3924-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_crawler_tasks"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"case","value":"{'case_id': 'task_011', 'name': '按活跃状态+Amazon平台筛选', 'method': 'GET', 'url': '/crawler/tasks', 'headers': {'Authorization': 'Bearer '}, 'params': {'status': 'ACTIVE', 'platform': 'Amazon'}, 'expected_code': 200, 'expected_success': True}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"5b3669966fa73e8f","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753976706224,"stop":1753976706241,"duration":17}},{"uid":"6ec1ed406c4a744b","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753976447751,"stop":1753976447769,"duration":18}},{"uid":"5cf289d08d3b13a6","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753976288166,"stop":1753976288175,"duration":9}},{"uid":"364b90f17a639e5a","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753975841729,"stop":1753975841760,"duration":31}},{"uid":"dc5d5712c5186980","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753974333482,"stop":1753974333507,"duration":25}},{"uid":"78c365bc1c8efb7","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753973756287,"stop":1753973756333,"duration":46}},{"uid":"311bf8f513b7fd7a","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753973620064,"stop":1753973620078,"duration":14}},{"uid":"7e7f0b8b8978d271","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753972559402,"stop":1753972559419,"duration":17}},{"uid":"67e8663bd93da946","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753971206980,"stop":1753971206990,"duration":10}},{"uid":"a1c71667d22e600e","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403，完整response:<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753970477398,"stop":1753970477407,"duration":9}},{"uid":"fc834f4570f609f1","status":"broken","statusDetails":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1753970253804,"stop":1753970253828,"duration":24}},{"uid":"3ece26205a3f8151","status":"broken","statusDetails":"UnboundLocalError: cannot access local variable 'json_data' where it is not associated with a value","time":{"start":1753969915347,"stop":1753969915374,"duration":27}},{"uid":"697bced6eb95eb5","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753969580753,"stop":1753969580766,"duration":13}},{"uid":"3a6d87e9be70ad62","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753969356706,"stop":1753969356750,"duration":44}},{"uid":"bbfa847a9486152b","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753969088236,"stop":1753969088276,"duration":40}},{"uid":"8d849b6ecd42680a","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753968138635,"stop":1753968138670,"duration":35}},{"uid":"98c4f647c01c105","status":"failed","statusDetails":"AssertionError: 状态码不符：预期200，实际403\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1753967369077,"stop":1753967369091,"duration":14}},{"uid":"616ac74ea6fa491f","status":"broken","statusDetails":"KeyError: 'url'","time":{"start":1753967266843,"stop":1753967266843,"duration":0}},{"uid":"195521a225894f91","status":"broken","statusDetails":"requests.exceptions.ConnectionError: HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /api/auth/login (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x000001657E09DE50>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。'))","time":{"start":1753967172837,"stop":1753967172837,"duration":0}},{"uid":"e22ed43a5f76531f","status":"broken","statusDetails":"KeyError: 'url'","time":{"start":1753966888779,"stop":1753966888779,"duration":0}}],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"9f6a54745276ce98.json","parameterValues":["{'case_id': 'task_011', 'name': '按活跃状态+Amazon平台筛选', 'method': 'GET', 'url': '/crawler/tasks', 'headers': {'Authorization': 'Bearer '}, 'params': {'status': 'ACTIVE', 'platform': 'Amazon'}, 'expected_code': 200, 'expected_success': True}"]}