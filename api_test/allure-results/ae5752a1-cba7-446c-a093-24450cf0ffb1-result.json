{"name": "test_user_auth[case25]", "status": "failed", "statusDetails": {"message": "AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code", "trace": "case = {'case_id': 'auth_026', 'expected_code': 200, 'expected_content_type': 'application/json', 'expected_success': True, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODYyNDEsImV4cCI6MTc1Mzk5MzQ0MX0.cpih02lFEpOE0dLMReL85LS5U0DKhun7GOGyyKo8838'\nsmall_jpg_image = 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmpla354zof.jpg'\nlarge_jpg_image = 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmpp11klnwg.jpg'\nsmall_png_image = 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmpsmad0rju.png'\nlarge_png_image = 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmpanqr3cnb.png'\nnon_image_file = 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmph2uohqns.txt'\n\n    @allure.feature(\"用户认证模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_user_auth(case, auth_token, small_jpg_image, large_jpg_image, small_png_image, large_png_image, non_image_file):\n        allure.story(case[\"name\"])\n        allure.title(f\"{case['case_id']}: {case['name']}\")\n        logger.info(f\"开始执行用例: {case['case_id']} - {case['name']}\")\n    \n        # 文件映射\n        file_map = {\n            \"test_avatar.jpg\": small_jpg_image,\n            \"large_avatar.jpg\": large_jpg_image,\n            \"test_avatar.png\": small_png_image,\n            \"large_avatar.png\": large_png_image,\n            \"test_file.txt\": non_image_file\n        }\n    \n        # 预处理请求\n        request_data = preprocess_request(case, auth_token, file_map)\n    \n        # 注册用例处理验证码\n        if (case[\"case_id\"].startswith(\"auth_00\")\n            and case[\"method\"] == \"POST\"\n            and case[\"url\"] == \"/auth/register\"):\n    \n            email = request_data[\"json\"][\"email\"]\n            verify_code = send_and_get_verify_code(email)\n            request_data[\"json\"][\"verifyCode\"] = verify_code\n            logger.info(f\"为注册邮箱 {email} 填充验证码: {verify_code}\")\n    \n        # 4. auth_029：未登录状态上传头像\n        use_token = case[\"case_id\"] != \"auth_029\"\n        logger.info(f\"是否使用Token: {use_token}\")\n        current_token = auth_token if use_token else None\n    \n        # 发送请求\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            files=request_data.get(\"files\"),\n            token=current_token\n        )\n    \n        # 5. 增强断言信息（便于定位问题）\n        try:\n>           assert_response(\n                response,\n                expected_code=case[\"expected_code\"],\n                expected_success=case.get(\"expected_success\"),\n                expected_message=case.get(\"expected_message\")\n            )\n\ntests\\test_user_auth.py:75: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [403]>, expected_code = 200\nexpected_success = True, expected_message = None\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response}\"\nE       AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nE       assert 403 == 200\nE        +  where 403 = <Response [403]>.status_code\n\nutils\\test_utils.py:7: AssertionError"}, "steps": [{"name": "发送请求：'POST' '/auth/upload/avatar'", "status": "passed", "attachments": [{"name": "请求信息", "source": "30ec0861-a8d8-467a-a9db-633ef7159325-attachment.txt", "type": "text/plain"}, {"name": "请求头", "source": "dd74b377-28b9-4049-a7ea-6ad6c64e6361-attachment.txt", "type": "text/plain"}, {"name": "请求参数", "source": "5eadace5-1bc1-43a4-a290-4e75d2503b6b-attachment.json", "type": "application/json"}, {"name": "响应信息", "source": "42f38f52-84fb-4f01-b353-e49673cd7974-attachment.txt", "type": "text/plain"}, {"name": "响应体", "source": "ad7ee0e0-aa45-4dc6-89db-ac245f5a937e-attachment.json", "type": "application/json"}], "parameters": [{"name": "method", "value": "'POST'"}, {"name": "endpoint", "value": "'/auth/upload/avatar'"}, {"name": "headers", "value": "{'Authorization': 'Bearer ', 'Content-Type': 'multipart/form-data'}"}, {"name": "params", "value": "{}"}, {"name": "json", "value": "{}"}, {"name": "files", "value": "{'file': <_io.BufferedReader name='C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmpsmad0rju.png'>}"}, {"name": "token", "value": "'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODYyNDEsImV4cCI6MTc1Mzk5MzQ0MX0.cpih02lFEpOE0dLMReL85LS5U0DKhun7GOGyyKo8838'"}], "start": 1753986243930, "stop": 1753986243953}, {"name": "验证响应：状态码200，消息None", "status": "failed", "statusDetails": {"message": "AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code\n", "trace": "  File \"D:\\Anaconda3\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"D:\\工作记录\\项目说明\\api_test\\utils\\test_utils.py\", line 7, in assert_response\n    assert response.status_code == expected_code, \\\n"}, "parameters": [{"name": "response", "value": "<Response [403]>"}, {"name": "expected_code", "value": "200"}, {"name": "expected_success", "value": "True"}, {"name": "expected_message", "value": "None"}], "start": 1753986243953, "stop": 1753986243954}], "attachments": [{"name": "失败信息", "source": "8845ba46-e1d7-43c9-8b40-c3495f07b90c-attachment.txt", "type": "text/plain"}, {"name": "调试信息", "source": "081b8693-8f47-4583-9452-088e855c0cad-attachment.txt", "type": "text/plain"}, {"name": "log", "source": "0f83c7c3-b91c-40a1-86cf-fd6fd972f5ae-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "675636dd-1917-4139-b089-ccad6885b6ac-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "a1e0fcab-7526-407c-a74c-cf7bca1b72ad-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case", "value": "{'case_id': 'auth_026', 'name': '上传2MB以内的PNG图片', 'method': 'POST', 'url': '/auth/upload/avatar', 'headers': {'Authorization': 'Bearer ', 'Content-Type': 'multipart/form-data'}, 'files': {'file': 'test_avatar.png'}, 'expected_code': 200, 'expected_success': True, 'expected_content_type': 'application/json'}"}], "start": 1753986243928, "stop": 1753986243962, "uuid": "7d59619c-649c-4a6c-9f06-78090dd72f35", "historyId": "e36a813ee64f39be5e678bd480dc6721", "testCaseId": "de18b51a986ebd96b4485f2c6341275e", "fullName": "tests.test_user_auth#test_user_auth", "labels": [{"name": "feature", "value": "用户认证模块"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_user_auth"}, {"name": "host", "value": "CYJ"}, {"name": "thread", "value": "3924-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_user_auth"}], "titlePath": ["tests", "test_user_auth.py"]}