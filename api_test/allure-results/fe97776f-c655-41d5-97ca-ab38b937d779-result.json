{"name": "test_user_auth[dynamic_test_user17-case20]", "status": "failed", "statusDetails": {"message": "AssertionError: 状态码不符：预期200，实际500，完整response：{\"success\":false,\"message\":\"发送验证码失败，请稍后重试\",\"data\":null}\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code", "trace": "case = {'case_id': 'auth_021', 'expected_code': 200, 'expected_message': '个人信息更新成功', 'expected_success': True, ...}\ndynamic_test_user = None\nimage_fixtures = {'large_jpg_image': 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmp2i_io8qx.jpg', 'large_png_image': 'C:\\\\Users\\\\huawei\\...ata\\\\Local\\\\Temp\\\\tmpvaj_kdx7.txt', 'small_jpg_image': 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmpbaxqxjpx.jpg', ...}\n\n    @allure.feature(\"用户认证模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    @pytest.mark.parametrize(\"dynamic_test_user\", CASES, indirect=True)  # 关键修正：传递单个用例而非列表\n    def test_user_auth(case, dynamic_test_user, image_fixtures):\n        allure.story(case[\"name\"])\n        allure.title(f\"{case['case_id']}: {case['name']}\")\n        logger.info(f\"开始执行用例: {case['case_id']} - {case['name']}\")\n    \n        # 1. 文件映射（仅文件上传用例需要）\n        file_map = {\n            \"test_avatar.jpg\": image_fixtures[\"small_jpg_image\"],\n            \"large_avatar.jpg\": image_fixtures[\"large_jpg_image\"],\n            \"test_avatar.png\": image_fixtures[\"small_png_image\"],\n            \"large_avatar.png\": image_fixtures[\"large_png_image\"],\n            \"test_file.txt\": image_fixtures[\"non_image_file\"]\n        }\n    \n        # 2. 确定是否使用token（基于动态用户是否存在）\n        current_token = dynamic_test_user[\"token\"] if dynamic_test_user else None\n    \n        # 3. 预处理请求\n        request_data = preprocess_request(case, current_token, file_map)\n    \n        # 4. 处理验证码（仅{verify_code}场景）\n        json_data = request_data.get(\"json\", {})\n        if not isinstance(json_data, dict):\n            json_data = {}\n            logger.warning(\"json_data不是字典类型，已初始化为空字典\")\n    \n        # 处理verifyCode占位符\n        if json_data.get(\"verifyCode\") == \"{verify_code}\":\n            email = json_data.get(\"email\")\n            assert email is not None, \"注册请求中未包含email字段，无法获取验证码\"\n            json_data[\"verifyCode\"] = send_and_get_verify_code(email)\n            logger.info(f\"为注册邮箱 {email} 填充验证码\")\n    \n        # 处理verificationCode占位符\n        if json_data.get(\"verificationCode\") == \"{verify_code}\":\n            email = json_data.get(\"securityEmail\") or (dynamic_test_user[\"email\"] if dynamic_test_user else None)\n            assert email is not None, \"未找到安全邮箱，无法获取验证码\"\n>           json_data[\"verificationCode\"] = send_and_get_verify_code(email)\n\ntests\\test_user_auth.py:137: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\test_user_auth.py:39: in send_and_get_verify_code\n    assert_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [500]>, expected_code = 200, expected_success = True, expected_message = None, is_file = False\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None, is_file=False):\n        \"\"\"\n        新增is_file参数：标记是否为文件下载接口（无需JSON解析）\n        \"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response.text}\"\nE       AssertionError: 状态码不符：预期200，实际500，完整response：{\"success\":false,\"message\":\"发送验证码失败，请稍后重试\",\"data\":null}\nE       assert 500 == 200\nE        +  where 500 = <Response [500]>.status_code\n\nutils\\test_utils.py:9: AssertionError"}, "steps": [{"name": "发送请求：'POST' '/auth/send-verify-code'", "status": "passed", "attachments": [{"name": "请求信息", "source": "fdc2c248-b5ae-43e6-b630-b37e0b165932-attachment.txt", "type": "text/plain"}, {"name": "请求头", "source": "28a2ae17-774f-4d48-91ed-010df51a8f25-attachment.txt", "type": "text/plain"}, {"name": "请求参数", "source": "9066eb1d-303e-43cc-8398-bcb2759d314b-attachment.json", "type": "application/json"}, {"name": "响应信息", "source": "225f21da-c866-4490-9232-77bb54d62dc6-attachment.txt", "type": "text/plain"}, {"name": "响应体", "source": "f3dcd4ff-61c0-4266-9d1e-93f1e914368f-attachment.json", "type": "application/json"}], "parameters": [{"name": "method", "value": "'POST'"}, {"name": "endpoint", "value": "'/auth/send-verify-code'"}, {"name": "headers", "value": "None"}, {"name": "params", "value": "{'email': 'admin1155@example.com'}"}, {"name": "json", "value": "None"}, {"name": "files", "value": "None"}, {"name": "token", "value": "None"}], "start": 1754636879288, "stop": 1754636879583}, {"name": "验证响应：状态码200，消息None", "status": "failed", "statusDetails": {"message": "AssertionError: 状态码不符：预期200，实际500，完整response：{\"success\":false,\"message\":\"发送验证码失败，请稍后重试\",\"data\":null}\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code\n", "trace": "  File \"D:\\Anaconda3\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"D:\\工作记录\\项目说明\\api_test\\utils\\test_utils.py\", line 9, in assert_response\n    assert response.status_code == expected_code, \\\n"}, "parameters": [{"name": "response", "value": "<Response [500]>"}, {"name": "expected_code", "value": "200"}, {"name": "expected_success", "value": "True"}, {"name": "expected_message", "value": "None"}, {"name": "is_file", "value": "False"}], "start": 1754636879584, "stop": 1754636879584}], "attachments": [{"name": "log", "source": "0ded5cec-11bf-4d1e-8a64-bfbc4c225583-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "ee13c4d9-775e-4dd8-834c-d8692f89e27f-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "dynamic_test_user", "value": "{'case_id': 'auth_018', 'name': '用户名不存在登录', 'method': 'POST', 'url': '/auth/login', 'json': {'username': 'nonexistent', 'password': 'Test123456'}, 'expected_code': 401, 'expected_success': False, 'expected_message': '用户名或密码错误，请稍后再试'}"}, {"name": "case", "value": "{'case_id': 'auth_021', 'name': '旧密码正确+新密码符合强度要求', 'method': 'PUT', 'url': '/auth/userinfo', 'headers': {'Authorization': ''}, 'json': {'oldPassword': 'admin1155', 'newPassword': 'NewTest789', 'securityEmail': 'admin1155@example.com', 'verificationCode': '{verify_code}'}, 'expected_code': 200, 'expected_success': True, 'expected_message': '个人信息更新成功'}"}], "start": 1754636879288, "stop": 1754636879585, "uuid": "8e824121-404f-445f-be70-42c7b2345985", "historyId": "a8891ae81582941596fade3d1b3c826f", "testCaseId": "de18b51a986ebd96b4485f2c6341275e", "fullName": "tests.test_user_auth#test_user_auth", "labels": [{"name": "feature", "value": "用户认证模块"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_user_auth"}, {"name": "host", "value": "CYJ"}, {"name": "thread", "value": "11184-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_user_auth"}], "titlePath": ["tests", "test_user_auth.py"]}