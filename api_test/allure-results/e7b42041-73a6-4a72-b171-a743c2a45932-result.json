{"name": "test_crawler_tasks[case14]", "status": "failed", "statusDetails": {"message": "AssertionError: 状态码不符：预期200，实际500，完整response：导出数据失败: Task not found with id: 243\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code", "trace": "case = {'case_id': 'task_015', 'expected_code': 200, 'expected_content_type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'headers': {'Authorization': ''}, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODY5ODIsImV4cCI6MTc1Mzk5NDE4Mn0.IQotoVAMppNXd4xB_wv1CB6gzjIVg2PAP6gVc90YBMw'\n\n    @allure.feature(\"爬虫任务模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_crawler_tasks(case, auth_token):\n        allure.story(case[\"name\"])\n        allure.title(case[\"case_id\"] + \": \" + case[\"name\"])\n    \n        # 替换任务ID占位符\n        if \"{task_id}\" in case[\"url\"]:\n            # 先创建一个测试任务获取ID\n            from utils.context import context\n            if not context.get(\"task_id\"):\n                create_response = Request.send_request(\n                    \"POST\", \"/crawler/tasks\",\n                    json={\n                        \"processName\": \"测试任务\",\n                        \"asinList\": \"B08XJ8J7SZ\",\n                        \"requiredInfo\": [\"price\"],\n                        \"platform\": \"Amazon\",\n                        \"timeCycle\": \"daily\"\n                    },\n                    token=auth_token\n                )\n                context.set(\"task_id\", create_response.json()[\"data\"][\"id\"])\n            task_id = context.get(\"task_id\")\n            case[\"url\"] = case[\"url\"].replace(\"{task_id}\", str(task_id))\n    \n        # 预处理请求\n        request_data = preprocess_request(case, auth_token)\n    \n        # 发送请求\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            token=auth_token\n        )\n    \n        # 断言\n>       assert_response(\n            response,\n            expected_code=case[\"expected_code\"],\n            expected_success=case.get(\"expected_success\"),\n            expected_message=case.get(\"expected_message\")\n        )\n\ntests\\test_crawler_tasks.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [500]>, expected_code = 200\nexpected_success = None, expected_message = None\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response.text}\"\nE       AssertionError: 状态码不符：预期200，实际500，完整response：导出数据失败: Task not found with id: 243\nE       assert 500 == 200\nE        +  where 500 = <Response [500]>.status_code\n\nutils\\test_utils.py:7: AssertionError"}, "steps": [{"name": "发送请求：'GET' '/crawler/tasks/243/export'", "status": "passed", "attachments": [{"name": "请求信息", "source": "34a5edb0-3c54-496a-8501-4379c3fb5368-attachment.txt", "type": "text/plain"}, {"name": "请求头", "source": "2a5d79f5-e5e4-4457-953f-26618b6111d0-attachment.txt", "type": "text/plain"}, {"name": "请求参数", "source": "ef26ea5e-5035-4f7e-a100-157b9e6e8845-attachment.json", "type": "application/json"}, {"name": "响应信息", "source": "dcdb4e40-65d8-40ce-9669-b5bec0c353bb-attachment.txt", "type": "text/plain"}, {"name": "响应体", "source": "7fb9e0ad-efd3-4fb8-920a-9870f600a2ac-attachment.json", "type": "application/json"}], "parameters": [{"name": "method", "value": "'GET'"}, {"name": "endpoint", "value": "'/crawler/tasks/243/export'"}, {"name": "headers", "value": "{}"}, {"name": "params", "value": "{'type': 'price-rank'}"}, {"name": "json", "value": "{}"}, {"name": "files", "value": "None"}, {"name": "token", "value": "'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODY5ODIsImV4cCI6MTc1Mzk5NDE4Mn0.IQotoVAMppNXd4xB_wv1CB6gzjIVg2PAP6gVc90YBMw'"}], "start": 1753986982914, "stop": 1753986982965}, {"name": "验证响应：状态码200，消息None", "status": "failed", "statusDetails": {"message": "AssertionError: 状态码不符：预期200，实际500，完整response：导出数据失败: Task not found with id: 243\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code\n", "trace": "  File \"D:\\Anaconda3\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"D:\\工作记录\\项目说明\\api_test\\utils\\test_utils.py\", line 7, in assert_response\n    assert response.status_code == expected_code, \\\n"}, "parameters": [{"name": "response", "value": "<Response [500]>"}, {"name": "expected_code", "value": "200"}, {"name": "expected_success", "value": "None"}, {"name": "expected_message", "value": "None"}], "start": 1753986982966, "stop": 1753986982966}], "attachments": [{"name": "log", "source": "6b19d09b-e177-4873-a1e5-43c2be6df2be-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "0c463b81-5de4-4cd2-a825-ed089d077f52-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "f6d5dff7-64b1-46e1-9a64-ce6b538e47ed-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case", "value": "{'case_id': 'task_015', 'name': '导出价格排名数据', 'method': 'GET', 'url': '/crawler/tasks/{task_id}/export', 'headers': {'Authorization': ''}, 'params': {'type': 'price-rank'}, 'expected_code': 200, 'expected_content_type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'}"}], "start": 1753986982913, "stop": 1753986982968, "uuid": "a13fd9eb-b061-4f45-bfac-c9083b62ef07", "historyId": "6a310a7ca0136beecbe933c87046ae7e", "testCaseId": "d9da2eb06171020188c155aa066adc0e", "fullName": "tests.test_crawler_tasks#test_crawler_tasks", "labels": [{"name": "feature", "value": "爬虫任务模块"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_crawler_tasks"}, {"name": "host", "value": "CYJ"}, {"name": "thread", "value": "23876-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_crawler_tasks"}], "titlePath": ["tests", "test_crawler_tasks.py"]}