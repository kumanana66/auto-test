{"name": "test_user_auth[case5]", "status": "failed", "statusDetails": {"message": "AssertionError: 状态码不符：预期403，实际400，完整response：<Response [400]>\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code", "trace": "case = {'case_id': 'auth_006', 'expected_code': 403, 'expected_message': '用户名格式无效（仅支持中文、英文、数字、下划线）', 'expected_success': False, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5NzM2MTksImV4cCI6MTc1Mzk4MDgxOX0.o6NEEm1X7wcAxCVuV-IINMTTJ9O8Xd9NVTOfxEXpIF4'\nsmall_jpg_image = 'small_6840.jpg', large_jpg_image = 'large_9571.jpg'\nsmall_png_image = 'small_8350.png', large_png_image = 'large_2866.png'\nnon_image_file = 'test_2908.txt'\n\n    @allure.feature(\"用户认证模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_user_auth(case, auth_token, small_jpg_image, large_jpg_image, small_png_image, large_png_image, non_image_file):\n        allure.story(case[\"name\"])\n        allure.title(f\"{case['case_id']}: {case['name']}\")\n    \n        # 文件映射：用例文件名 -> 实际测试文件\n        file_map = {\n            \"test_avatar.jpg\": small_jpg_image,\n            \"large_avatar.jpg\": large_jpg_image,\n            \"test_avatar.png\": small_png_image,\n            \"large_avatar.png\": large_png_image,\n            \"test_file.txt\": non_image_file\n        }\n    \n        # 预处理请求\n        request_data = preprocess_request(case, auth_token, file_map)\n    \n        # 注册用例单独处理验证码\n        if (case[\"case_id\"].startswith(\"auth_00\")\n            and case[\"method\"] == \"POST\"\n            and case[\"url\"] == \"/auth/register\"):\n    \n            # 获取注册邮箱\n            email = request_data[\"json\"][\"email\"]\n            # 发送并获取验证码\n            verify_code = send_and_get_verify_code(email)\n            # 填充验证码到请求参数\n            request_data[\"json\"][\"verifyCode\"] = verify_code\n    \n        # 发送请求\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            files=request_data.get(\"files\"),\n            token=auth_token if case[\"case_id\"] != \"auth_029\" else None  # 未登录用例移除token\n        )\n    \n        # 断言\n>       assert_response(\n            response,\n            expected_code=case[\"expected_code\"],\n            expected_success=case.get(\"expected_success\"),\n            expected_message=case.get(\"expected_message\")\n        )\n\ntests\\test_user_auth.py:71: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [400]>, expected_code = 403, expected_success = False\nexpected_message = '用户名格式无效（仅支持中文、英文、数字、下划线）'\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response}\"\nE       AssertionError: 状态码不符：预期403，实际400，完整response：<Response [400]>\nE       assert 400 == 403\nE        +  where 400 = <Response [400]>.status_code\n\nutils\\test_utils.py:7: AssertionError"}, "steps": [{"name": "从数据库获取验证码：'test_arfdop@example.com'", "status": "passed", "parameters": [{"name": "email", "value": "'test_arfdop@example.com'"}], "start": 1753973639379, "stop": 1753973639383}, {"name": "发送请求：'POST' '/auth/send-verify-code'", "status": "passed", "attachments": [{"name": "请求信息", "source": "0c5d4fb5-2256-4e4d-a188-a0d175cf1457-attachment.json", "type": "application/json"}, {"name": "响应信息", "source": "ddd8d0cd-97b7-4fe8-907d-c6c0e01f9dec-attachment.txt", "type": "text/plain"}, {"name": "响应体", "source": "0f3e574b-6d0e-4e93-a871-d71a9f722f20-attachment.json", "type": "application/json"}], "parameters": [{"name": "method", "value": "'POST'"}, {"name": "endpoint", "value": "'/auth/send-verify-code'"}, {"name": "headers", "value": "None"}, {"name": "params", "value": "{'email': 'test_arfdop@example.com'}"}, {"name": "json", "value": "None"}, {"name": "files", "value": "None"}, {"name": "token", "value": "None"}], "start": 1753973639383, "stop": 1753973640189}, {"name": "验证响应：状态码200，消息None", "status": "passed", "parameters": [{"name": "response", "value": "<Response [200]>"}, {"name": "expected_code", "value": "200"}, {"name": "expected_success", "value": "None"}, {"name": "expected_message", "value": "None"}], "start": 1753973640189, "stop": 1753973640190}, {"name": "从数据库获取验证码：'test_arfdop@example.com'", "status": "passed", "parameters": [{"name": "email", "value": "'test_arfdop@example.com'"}], "start": 1753973641190, "stop": 1753973641213}, {"name": "发送请求：'POST' '/auth/register'", "status": "passed", "attachments": [{"name": "请求信息", "source": "c41835f4-cfb1-4520-bc11-0eb215bbe998-attachment.json", "type": "application/json"}, {"name": "响应信息", "source": "71df5d3c-2730-4aac-893e-6389b6617a79-attachment.txt", "type": "text/plain"}, {"name": "响应体", "source": "4ee9bc8e-634b-4634-9f8a-32c36bee5238-attachment.json", "type": "application/json"}], "parameters": [{"name": "method", "value": "'POST'"}, {"name": "endpoint", "value": "'/auth/register'"}, {"name": "headers", "value": "{}"}, {"name": "params", "value": "{}"}, {"name": "json", "value": "{'username': 'test@1', 'password': 'Test123456', 'email': 'test_arfdop@example.com', 'verifyCode': '476009'}"}, {"name": "files", "value": "None"}, {"name": "token", "value": "'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5NzM2MTksImV4cCI6MTc1Mzk4MDgxOX0.o6NEEm1X7wcAxCVuV-IINMTTJ9O8Xd9NVTOfxEXpIF4'"}], "start": 1753973641214, "stop": 1753973641261}, {"name": "验证响应：状态码403，消息'用户名格式无效（仅支持中文、英文、数字、下划线）'", "status": "failed", "statusDetails": {"message": "AssertionError: 状态码不符：预期403，实际400，完整response：<Response [400]>\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code\n", "trace": "  File \"D:\\Anaconda3\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"D:\\工作记录\\项目说明\\api_test\\utils\\test_utils.py\", line 7, in assert_response\n    assert response.status_code == expected_code, \\\n"}, "parameters": [{"name": "response", "value": "<Response [400]>"}, {"name": "expected_code", "value": "403"}, {"name": "expected_success", "value": "False"}, {"name": "expected_message", "value": "'用户名格式无效（仅支持中文、英文、数字、下划线）'"}], "start": 1753973641262, "stop": 1753973641262}], "parameters": [{"name": "case", "value": "{'case_id': 'auth_006', 'name': '用户名包含特殊符号', 'method': 'POST', 'url': '/auth/register', 'json': {'username': 'test@1', 'password': 'Test123456', 'email': 'test_arfdop@example.com', 'verifyCode': '{verify_code}'}, 'expected_code': 403, 'expected_success': False, 'expected_message': '用户名格式无效（仅支持中文、英文、数字、下划线）'}"}], "start": 1753973639378, "stop": 1753973641265, "uuid": "d2dba9c5-0927-4e7b-9890-f7321cb0286b", "historyId": "fb20b28cd064a4337c13953627f8a389", "testCaseId": "de18b51a986ebd96b4485f2c6341275e", "fullName": "tests.test_user_auth#test_user_auth", "labels": [{"name": "feature", "value": "用户认证模块"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_user_auth"}, {"name": "host", "value": "CYJ"}, {"name": "thread", "value": "5344-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_user_auth"}], "titlePath": ["tests", "test_user_auth.py"]}