{"name": "test_user_auth[case4]", "status": "failed", "statusDetails": {"message": "AssertionError: 状态码不符：预期200，实际500，完整response：<Response [500]>\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code", "trace": "case = {'case_id': 'auth_005', 'expected_code': 400, 'expected_message': '用户名长度需在6-20位之间', 'expected_success': False, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5NzYyODgsImV4cCI6MTc1Mzk4MzQ4OH0.Ha1O4Tbei1A-fPhrCeS0L-cbXaqSdfzZBhElj3mXBdg'\nsmall_jpg_image = 'small_2170.jpg', large_jpg_image = 'large_3261.jpg'\nsmall_png_image = 'small_1310.png', large_png_image = 'large_7175.png'\nnon_image_file = 'test_2450.txt'\n\n    @allure.feature(\"用户认证模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_user_auth(case, auth_token, small_jpg_image, large_jpg_image, small_png_image, large_png_image, non_image_file):\n        allure.story(case[\"name\"])\n        allure.title(f\"{case['case_id']}: {case['name']}\")\n    \n        # 文件映射：用例文件名 -> 实际测试文件\n        file_map = {\n            \"test_avatar.jpg\": small_jpg_image,\n            \"large_avatar.jpg\": large_jpg_image,\n            \"test_avatar.png\": small_png_image,\n            \"large_avatar.png\": large_png_image,\n            \"test_file.txt\": non_image_file\n        }\n    \n        # 预处理请求\n        request_data = preprocess_request(case, auth_token, file_map)\n    \n        # 注册用例单独处理验证码\n        if (case[\"case_id\"].startswith(\"auth_00\")\n            and case[\"method\"] == \"POST\"\n            and case[\"url\"] == \"/auth/register\"):\n    \n            # 获取注册邮箱\n            email = request_data[\"json\"][\"email\"]\n            # 发送并获取验证码\n>           verify_code = send_and_get_verify_code(email)\n\ntests\\test_user_auth.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\test_user_auth.py:19: in send_and_get_verify_code\n    assert_response(send_response, 200)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [500]>, expected_code = 200, expected_success = None\nexpected_message = None\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response}\"\nE       AssertionError: 状态码不符：预期200，实际500，完整response：<Response [500]>\nE       assert 500 == 200\nE        +  where 500 = <Response [500]>.status_code\n\nutils\\test_utils.py:7: AssertionError"}, "steps": [{"name": "从数据库获取验证码：'test_30j9rh@example.com'", "status": "passed", "parameters": [{"name": "email", "value": "'test_30j9rh@example.com'"}], "start": 1753976300670, "stop": 1753976300703}, {"name": "发送请求：'POST' '/auth/send-verify-code'", "status": "passed", "attachments": [{"name": "请求信息", "source": "9e864bd8-a1e6-4c0d-bed5-2d074c8e1858-attachment.json", "type": "application/json"}, {"name": "响应信息", "source": "2313f1e7-5a41-4826-b2ba-97af6183ed11-attachment.txt", "type": "text/plain"}, {"name": "响应体", "source": "5af81fcd-753f-49dc-9118-1cbca194c802-attachment.json", "type": "application/json"}], "parameters": [{"name": "method", "value": "'POST'"}, {"name": "endpoint", "value": "'/auth/send-verify-code'"}, {"name": "headers", "value": "None"}, {"name": "params", "value": "{'email': 'test_30j9rh@example.com'}"}, {"name": "json", "value": "None"}, {"name": "files", "value": "None"}, {"name": "token", "value": "None"}], "start": 1753976300704, "stop": 1753976301577}, {"name": "验证响应：状态码200，消息None", "status": "failed", "statusDetails": {"message": "AssertionError: 状态码不符：预期200，实际500，完整response：<Response [500]>\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code\n", "trace": "  File \"D:\\Anaconda3\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"D:\\工作记录\\项目说明\\api_test\\utils\\test_utils.py\", line 7, in assert_response\n    assert response.status_code == expected_code, \\\n"}, "parameters": [{"name": "response", "value": "<Response [500]>"}, {"name": "expected_code", "value": "200"}, {"name": "expected_success", "value": "None"}, {"name": "expected_message", "value": "None"}], "start": 1753976301579, "stop": 1753976301579}], "parameters": [{"name": "case", "value": "{'case_id': 'auth_005', 'name': '用户名长度超过20位', 'method': 'POST', 'url': '/auth/register', 'json': {'username': 'test00000000000000001', 'password': 'Test123456', 'email': 'test_30j9rh@example.com', 'verifyCode': '{verify_code}'}, 'expected_code': 400, 'expected_success': False, 'expected_message': '用户名长度需在6-20位之间'}"}], "start": 1753976300670, "stop": 1753976301584, "uuid": "52e98add-0891-487c-b708-9f2ae53a5bd4", "historyId": "971262f7f314b3fc5c99b8d605208925", "testCaseId": "de18b51a986ebd96b4485f2c6341275e", "fullName": "tests.test_user_auth#test_user_auth", "labels": [{"name": "feature", "value": "用户认证模块"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_user_auth"}, {"name": "host", "value": "CYJ"}, {"name": "thread", "value": "10296-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_user_auth"}], "titlePath": ["tests", "test_user_auth.py"]}