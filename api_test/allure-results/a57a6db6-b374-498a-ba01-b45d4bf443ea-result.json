{"name": "test_user_auth[case2]", "status": "failed", "statusDetails": {"message": "AssertionError: 状态码不符：预期200，实际400，完整response：{\"success\":false,\"message\":\"验证码不能为空\",\"data\":null}\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code", "trace": "case = {'case_id': 'auth_003', 'expected_code': 200, 'expected_message': '注册成功', 'expected_success': True, ...}\ntest_user = {'email': 'test_lwoerd@example.com', 'token': 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0ZXN0X2x3b2VyZCIsImlhdCI6MTc1Mzk4Nzg1MiwiZXhwIjoxNzUzOTk1MDUyfQ.0mcVZgKp2_c6lDUOzETLR5eg6Gi_yTRHdlU3cddqlrw', 'username': 'test_lwoerd'}\nimage_fixtures = {'large_jpg_image': 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmpk6fxtst_.jpg', 'large_png_image': 'C:\\\\Users\\\\huawei\\...ata\\\\Local\\\\Temp\\\\tmpj8iridua.txt', 'small_jpg_image': 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmp9jjf9dsc.jpg', ...}\n\n    @allure.feature(\"用户认证模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_user_auth(case, test_user, image_fixtures):  # 使用test_user而非auth_token\n        allure.story(case[\"name\"])\n        allure.title(f\"{case['case_id']}: {case['name']}\")\n        logger.info(f\"开始执行用例: {case['case_id']} - {case['name']}\")\n    \n        # 1. 文件映射（仅文件上传用例需要）\n        file_map = {\n            \"test_avatar.jpg\": image_fixtures[\"small_jpg_image\"],\n            \"large_avatar.jpg\": image_fixtures[\"large_jpg_image\"],\n            \"test_avatar.png\": image_fixtures[\"small_png_image\"],\n            \"large_avatar.png\": image_fixtures[\"large_png_image\"],\n            \"test_file.txt\": image_fixtures[\"non_image_file\"]\n        }\n    \n        # 2. 预处理请求\n        request_data = preprocess_request(case, test_user[\"token\"], file_map)  # 使用测试用户的token\n    \n        # 3. 处理所有需要验证码的场景（覆盖注册、更新密码等）\n        json_data = request_data.get(\"json\", {})\n        if \"verifyCode\" in json_data and json_data[\"verifyCode\"] == \"{verify_code}\":\n            email = json_data.get(\"email\", test_user[\"email\"])  # 优先用请求中的邮箱，否则用测试用户邮箱\n            verify_code = send_and_get_verify_code(email)\n            json_data[\"verifyCode\"] = verify_code\n            logger.info(f\"为邮箱 {email} 填充验证码: {verify_code}\")\n        if \"verificationCode\" in json_data and json_data[\"verificationCode\"] == \"{verify_code}\":\n            email = json_data.get(\"securityEmail\", test_user[\"email\"])\n            verify_code = send_and_get_verify_code(email)\n            json_data[\"verificationCode\"] = verify_code\n            logger.info(f\"为安全邮箱 {email} 填充验证码: {verify_code}\")\n    \n        # 4. 处理未登录场景（保持原逻辑）\n        use_token = case[\"case_id\"] != \"auth_029\"\n        logger.info(f\"是否使用Token: {use_token}\")\n        current_token = test_user[\"token\"] if use_token else None  # 使用测试用户token\n    \n        # 5. 发送请求\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            files=request_data.get(\"files\"),\n            token=current_token\n        )\n    \n        # 6. 断言增强\n        try:\n>           assert_response(\n                response,\n                expected_code=case[\"expected_code\"],\n                expected_success=case.get(\"expected_success\"),\n                expected_message=case.get(\"expected_message\")\n            )\n\ntests\\test_user_auth.py:90: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [400]>, expected_code = 200\nexpected_success = True, expected_message = '注册成功'\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response.text}\"\nE       AssertionError: 状态码不符：预期200，实际400，完整response：{\"success\":false,\"message\":\"验证码不能为空\",\"data\":null}\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\nutils\\test_utils.py:7: AssertionError"}, "steps": [{"name": "从数据库获取验证码：'test_3xcy1p@example.com'", "status": "passed", "parameters": [{"name": "email", "value": "'test_3xcy1p@example.com'"}], "start": 1753987853514, "stop": 1753987853518}, {"name": "发送请求：'POST' '/auth/register'", "status": "passed", "attachments": [{"name": "请求信息", "source": "bdd8b636-e19d-4d30-ba92-93d47765062a-attachment.txt", "type": "text/plain"}, {"name": "请求头", "source": "3d2711fa-240a-49cb-ac7b-aba2f1ffd83d-attachment.txt", "type": "text/plain"}, {"name": "请求参数", "source": "6ef5682c-0530-49af-8d10-a3bde9aa659c-attachment.json", "type": "application/json"}, {"name": "响应信息", "source": "ff106bb6-21cb-4766-ba9a-836501b2ba36-attachment.txt", "type": "text/plain"}, {"name": "响应体", "source": "5d19be3a-c0bc-420e-99f7-935864dce13a-attachment.json", "type": "application/json"}], "parameters": [{"name": "method", "value": "'POST'"}, {"name": "endpoint", "value": "'/auth/register'"}, {"name": "headers", "value": "{}"}, {"name": "params", "value": "{}"}, {"name": "json", "value": "{'username': 'test0000000000000001', 'password': 'Test123456', 'email': 'test_3xcy1p@example.com', 'verifyCode': None}"}, {"name": "files", "value": "None"}, {"name": "token", "value": "'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0ZXN0X2x3b2VyZCIsImlhdCI6MTc1Mzk4Nzg1MiwiZXhwIjoxNzUzOTk1MDUyfQ.0mcVZgKp2_c6lDUOzETLR5eg6Gi_yTRHdlU3cddqlrw'"}], "start": 1753987853518, "stop": 1753987853541}, {"name": "验证响应：状态码200，消息'注册成功'", "status": "failed", "statusDetails": {"message": "AssertionError: 状态码不符：预期200，实际400，完整response：{\"success\":false,\"message\":\"验证码不能为空\",\"data\":null}\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n", "trace": "  File \"D:\\Anaconda3\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"D:\\工作记录\\项目说明\\api_test\\utils\\test_utils.py\", line 7, in assert_response\n    assert response.status_code == expected_code, \\\n"}, "parameters": [{"name": "response", "value": "<Response [400]>"}, {"name": "expected_code", "value": "200"}, {"name": "expected_success", "value": "True"}, {"name": "expected_message", "value": "'注册成功'"}], "start": 1753987853541, "stop": 1753987853542}], "attachments": [{"name": "失败详情", "source": "8d43e618-499b-40d4-a7da-9dd5e8a0e254-attachment.txt", "type": "text/plain"}, {"name": "请求数据", "source": "0e9a042e-a2ab-4f83-86a3-4b678cce65b7-attachment.json", "type": "application/json"}, {"name": "log", "source": "41ce7e0d-cf98-46ed-b2ad-012508a90b3e-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "4e8e17d5-b861-4af4-b5fd-381c1d3a29d4-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case", "value": "{'case_id': 'auth_003', 'name': '用户名长度为20位（最大值）', 'method': 'POST', 'url': '/auth/register', 'json': {'username': 'test0000000000000001', 'password': 'Test123456', 'email': 'test_3xcy1p@example.com', 'verifyCode': '{verify_code}'}, 'expected_code': 200, 'expected_success': True, 'expected_message': '注册成功'}"}], "start": 1753987853513, "stop": 1753987853546, "uuid": "bd68688f-8454-45b8-a7d5-696171fa395c", "historyId": "8c71e2fe86f385f71549e2424ba5807a", "testCaseId": "de18b51a986ebd96b4485f2c6341275e", "fullName": "tests.test_user_auth#test_user_auth", "labels": [{"name": "feature", "value": "用户认证模块"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_user_auth"}, {"name": "host", "value": "CYJ"}, {"name": "thread", "value": "22580-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_user_auth"}], "titlePath": ["tests", "test_user_auth.py"]}