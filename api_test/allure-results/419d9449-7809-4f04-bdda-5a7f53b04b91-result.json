{"name": "test_crawler_tasks[case2]", "status": "failed", "statusDetails": {"message": "AssertionError: 状态码不符：预期403，实际400，完整response：{\"success\":false,\"message\":\"ASIN列表不能为空\",\"data\":{\"asinList\":\"ASIN列表不能为空\"}}\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code", "trace": "case = {'case_id': 'task_003', 'expected_code': 403, 'expected_message': '请输入ASIN列表', 'expected_success': False, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTQ2MzM5NjMsImV4cCI6MTc1NDY0MTE2M30.x3-KZS6mHc2UhAJNcFKizy0M7EPW2yoOa8-hjpUtBPo'\ntask_id = 646\n\n    @allure.feature(\"爬虫任务模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_crawler_tasks(case, auth_token, task_id):\n        allure.story(case[\"name\"])\n        allure.title(f\"{case['case_id']}: {case['name']}\")\n    \n        # 替换任务ID占位符\n        if \"{task_id}\" in case[\"url\"]:\n            case[\"url\"] = case[\"url\"].replace(\"{task_id}\", str(task_id))\n            allure.attach(f\"使用任务ID: {task_id}\", \"测试信息\", allure.attachment_type.TEXT)\n    \n        # --------------------------\n        # 关键修改：处理PPT下载的前置依赖\n        # --------------------------\n        # 1. 若当前是下载PPT的用例（task_017），先启动数据分析并等待完成\n        if case[\"case_id\"] == \"task_017\":\n            allure.attach(\"开始执行数据分析数据分析前置操作\", \"前置依赖\", allure.attachment_type.TEXT)\n    \n            # 1.1 启动数据分析\n            analyze_response = Request.send_request(\n                \"POST\", f\"/crawler/tasks/{task_id}/analyze\",  # 对应task_016的接口\n                token=auth_token\n            )\n            assert_response(\n                analyze_response,\n                200,\n                expected_success=True,\n                expected_message=\"操作成功\"  # 匹配task_016的预期消息\n            )\n            allure.attach(\"数据分析已启动\", \"前置操作结果\", allure.attachment_type.TEXT)\n    \n            # 1.2 轮询等待分析完成（复用同test_download_analyzed_ppt的逻辑）\n            max_wait_seconds = 180\n            check_interval = 5\n            elapsed_seconds = 0\n            status = \"PROCESSING\"\n    \n            while elapsed_seconds < max_wait_seconds and status == \"PROCESSING\":\n                # 查询当前状态\n                status_response = Request.send_request(\n                    \"GET\", f\"/crawler/tasks/{task_id}/analyze/status\",\n                    token=auth_token\n                )\n                assert_response(status_response, 200)\n                status = status_response.json()[\"data\"]\n                allure.attach(f\"当前分析状态: {status} (等待{elapsed_seconds}秒)\", \"状态轮询\", allure.attachment_type.TEXT)\n    \n                if status == \"PROCESSING\":\n                    time.sleep(check_interval)\n                    elapsed_seconds += check_interval\n    \n            # 1.3 校验分析状态（必须完成才能继续下载）\n            assert status in [\"COMPLETED\", \"FAILED\"], f\"数据分析超时，最终状态：{status}\"\n            if status == \"FAILED\":\n                pytest.fail(\"数据分析失败，无法下载PPT\")  # 分析失败则标记用例失败\n            allure.attach(\"数据分析已完成\", \"前置操作结果\", allure.attachment_type.TEXT)\n    \n        # 预处理请求\n        request_data = preprocess_request(case, auth_token)\n        if \"headers\" in request_data and \"Authorization\" in request_data[\"headers\"]:\n            del request_data[\"headers\"][\"Authorization\"]\n    \n        # 发送请求（对task_017而言，此时已确保分析完成）\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            token=auth_token\n        )\n    \n        # 断言（增加PPT格式校验）\n        try:\n            assert_response(\n                response,\n                expected_code=case[\"expected_code\"],\n                expected_success=case.get(\"expected_success\"),\n                expected_message=case.get(\"expected_message\"),\n                is_file=bool(case.get(\"expected_content_type\"))\n            )\n            # 额外校验PPT文件类型（对应case中的expected_content_type）\n            if case.get(\"expected_content_type\"):\n                assert case[\"expected_content_type\"] in response.headers[\"Content-Type\"], \\\n                    f\"文件类型错误，预期: {case['expected_content_type']}, 实际: {response.headers['Content-Type']}\"\n        except AssertionError as e:\n            allure.attach(f\"响应内容: {response.text}\", \"断言失败详情\", allure.attachment_type.TEXT)\n>           raise e\n\ntests\\test_crawler_tasks.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests\\test_crawler_tasks.py:108: in test_crawler_tasks\n    assert_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [400]>, expected_code = 403, expected_success = False, expected_message = '请输入ASIN列表', is_file = False\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None, is_file=False):\n        \"\"\"\n        新增is_file参数：标记是否为文件下载接口（无需JSON解析）\n        \"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response.text}\"\nE       AssertionError: 状态码不符：预期403，实际400，完整response：{\"success\":false,\"message\":\"ASIN列表不能为空\",\"data\":{\"asinList\":\"ASIN列表不能为空\"}}\nE       assert 400 == 403\nE        +  where 400 = <Response [400]>.status_code\n\nutils\\test_utils.py:9: AssertionError"}, "steps": [{"name": "发送请求：'POST' '/crawler/tasks'", "status": "passed", "attachments": [{"name": "请求信息", "source": "36a3fc24-aa9d-4e0e-9789-a9dc5f6771b0-attachment.txt", "type": "text/plain"}, {"name": "请求头", "source": "bc2b38ed-f543-4521-b1b7-61bab5410b66-attachment.txt", "type": "text/plain"}, {"name": "请求参数", "source": "12967d5d-1dba-4c1e-84be-d8a6b3369fe0-attachment.json", "type": "application/json"}, {"name": "响应信息", "source": "70d64a52-0d65-476f-a97b-dffbf4bd61f9-attachment.txt", "type": "text/plain"}, {"name": "响应体", "source": "268f963b-79cc-47ff-a365-d21975fecf13-attachment.json", "type": "application/json"}], "parameters": [{"name": "method", "value": "'POST'"}, {"name": "endpoint", "value": "'/crawler/tasks'"}, {"name": "headers", "value": "{}"}, {"name": "params", "value": "{}"}, {"name": "json", "value": "{'processName': '亚马逊监控', 'asinList': '', 'requiredInfo': ['price'], 'platform': 'Amazon', 'timeCycle': 'daily'}"}, {"name": "files", "value": "None"}, {"name": "token", "value": "'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTQ2MzM5NjMsImV4cCI6MTc1NDY0MTE2M30.x3-KZS6mHc2UhAJNcFKizy0M7EPW2yoOa8-hjpUtBPo'"}], "start": 1754633963418, "stop": 1754633963439}, {"name": "验证响应：状态码403，消息'请输入ASIN列表'", "status": "failed", "statusDetails": {"message": "AssertionError: 状态码不符：预期403，实际400，完整response：{\"success\":false,\"message\":\"ASIN列表不能为空\",\"data\":{\"asinList\":\"ASIN列表不能为空\"}}\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code\n", "trace": "  File \"D:\\Anaconda3\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"D:\\工作记录\\项目说明\\api_test\\utils\\test_utils.py\", line 9, in assert_response\n    assert response.status_code == expected_code, \\\n"}, "parameters": [{"name": "response", "value": "<Response [400]>"}, {"name": "expected_code", "value": "403"}, {"name": "expected_success", "value": "False"}, {"name": "expected_message", "value": "'请输入ASIN列表'"}, {"name": "is_file", "value": "False"}], "start": 1754633963439, "stop": 1754633963439}], "attachments": [{"name": "断言失败详情", "source": "a50982dd-bdde-4b89-afd6-ab167ccd03c8-attachment.txt", "type": "text/plain"}, {"name": "log", "source": "6a379929-97c1-4b53-9d4f-521faa2c92ea-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "8132f1ec-79c9-42e6-b45d-8ae28226b79d-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "47c506ed-a484-471f-8cb8-405f3c88038a-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case", "value": "{'case_id': 'task_003', 'name': 'ASIN列表为空', 'method': 'POST', 'url': '/crawler/tasks', 'headers': {'Authorization': ''}, 'json': {'processName': '亚马逊监控', 'asinList': '', 'requiredInfo': ['price'], 'platform': 'Amazon', 'timeCycle': 'daily'}, 'expected_code': 403, 'expected_success': False, 'expected_message': '请输入ASIN列表'}"}], "start": 1754633963418, "stop": 1754633963442, "uuid": "4b6c9a4f-2f4a-4c15-a248-387d13cd0e99", "historyId": "5a759891c3a1c4bb5fc37b2d1107595f", "testCaseId": "d9da2eb06171020188c155aa066adc0e", "fullName": "tests.test_crawler_tasks#test_crawler_tasks", "labels": [{"name": "feature", "value": "爬虫任务模块"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_crawler_tasks"}, {"name": "host", "value": "CYJ"}, {"name": "thread", "value": "18968-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_crawler_tasks"}], "titlePath": ["tests", "test_crawler_tasks.py"]}