{"name": "test_user_auth[case2]", "status": "failed", "statusDetails": {"message": "AssertionError: 状态码不符：预期200，实际400，完整response：{\"success\":false,\"message\":\"用户名已被注册\",\"data\":null}\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code", "trace": "case = {'case_id': 'auth_003', 'expected_code': 200, 'expected_message': '注册成功', 'expected_success': True, ...}\ntest_user = {'email': 'test_itzlik@example.com', 'token': 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0ZXN0X2l0emxpayIsImlhdCI6MTc1NDYyMzIzMCwiZXhwIjoxNzU0NjMwNDMwfQ.-rqRFiI9Cy1rB6ajmxgAtsXG9p-RM6PvHYuUrzT69Wg', 'username': 'test_itzlik'}\nimage_fixtures = {'large_jpg_image': 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmp0o4obkjt.jpg', 'large_png_image': 'C:\\\\Users\\\\huawei\\...ata\\\\Local\\\\Temp\\\\tmpzslrpib6.txt', 'small_jpg_image': 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmp4kug1x_b.jpg', ...}\n\n    @allure.feature(\"用户认证模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_user_auth(case, test_user, image_fixtures):  # 使用test_user而非auth_token\n        allure.story(case[\"name\"])\n        allure.title(f\"{case['case_id']}: {case['name']}\")\n        logger.info(f\"开始执行用例: {case['case_id']} - {case['name']}\")\n    \n        # 1. 文件映射（仅文件上传用例需要）\n        file_map = {\n            \"test_avatar.jpg\": image_fixtures[\"small_jpg_image\"],\n            \"large_avatar.jpg\": image_fixtures[\"large_jpg_image\"],\n            \"test_avatar.png\": image_fixtures[\"small_png_image\"],\n            \"large_avatar.png\": image_fixtures[\"large_png_image\"],\n            \"test_file.txt\": image_fixtures[\"non_image_file\"]\n        }\n    \n        # 2. 预处理请求\n        request_data = preprocess_request(case, test_user[\"token\"], file_map)  # 使用测试用户的token\n    \n        # 3. 处理所有需要验证码的场景（覆盖注册、更新密码等）\n        json_data = request_data.get(\"json\", {})\n        # 确保json_data是字典类型\n        if not isinstance(json_data, dict):\n            json_data = {}\n            logger.warning(\"json_data不是字典类型，已初始化为空字典\")\n    \n        # 处理verifyCode占位符\n        verify_code_value = json_data.get(\"verifyCode\", \"\")\n        # 确保verify_code_value是字符串\n        if not isinstance(verify_code_value, str):\n            verify_code_value = str(verify_code_value) if verify_code_value is not None else \"\"\n    \n        if verify_code_value == \"{verify_code}\":\n            # 优先从请求json中取email，若不存在则报错（避免使用错误邮箱）\n            email = json_data.get(\"email\")\n            assert email is not None, \"注册请求中未包含email字段，无法获取验证码\"\n            verify_code = send_and_get_verify_code(email)\n            json_data[\"verifyCode\"] = verify_code\n            logger.info(f\"为注册邮箱 {email} 填充验证码: {verify_code}\")\n    \n        # 处理verificationCode占位符\n        verification_code_value = json_data.get(\"verificationCode\", \"\")\n        if not isinstance(verification_code_value, str):\n            verification_code_value = str(verification_code_value) if verification_code_value is not None else \"\"\n    \n        if verification_code_value == \"{verify_code}\":\n            email = json_data.get(\"securityEmail\", test_user[\"email\"])\n            verify_code = send_and_get_verify_code(email)\n            json_data[\"verificationCode\"] = verify_code\n            logger.info(f\"为安全邮箱 {email} 填充验证码: {verify_code}\")\n    \n        # 4. 处理未登录场景（保持原逻辑）\n        use_token = case[\"case_id\"] != \"auth_029\"\n        logger.info(f\"是否使用Token: {use_token}\")\n        current_token = test_user[\"token\"] if use_token else None  # 使用测试用户token\n    \n        # 5. 发送请求\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            files=request_data.get(\"files\"),\n            token=current_token\n        )\n    \n        # 6. 断言增强\n        try:\n>           assert_response(\n                response,\n                expected_code=case[\"expected_code\"],\n                expected_success=case.get(\"expected_success\"),\n                expected_message=case.get(\"expected_message\")\n            )\n\ntests\\test_user_auth.py:114: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [400]>, expected_code = 200\nexpected_success = True, expected_message = '注册成功', is_file = False\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None, is_file=False):\n        \"\"\"\n        新增is_file参数：标记是否为文件下载接口（无需JSON解析）\n        \"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response.text}\"\nE       AssertionError: 状态码不符：预期200，实际400，完整response：{\"success\":false,\"message\":\"用户名已被注册\",\"data\":null}\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\nutils\\test_utils.py:9: AssertionError"}, "steps": [{"name": "发送请求：'POST' '/auth/send-verify-code'", "status": "passed", "attachments": [{"name": "请求信息", "source": "b86f4dfd-3cfc-4cc9-aa2e-3c5c8ce3bb45-attachment.txt", "type": "text/plain"}, {"name": "请求头", "source": "4f20c2ac-d8bd-41d9-8fa5-01411c0d2341-attachment.txt", "type": "text/plain"}, {"name": "请求参数", "source": "dc4c41aa-60a9-4bb0-9bd8-0f47ca52ca7e-attachment.json", "type": "application/json"}, {"name": "响应信息", "source": "bb4b5771-ec0b-4f33-9676-d526d60d9095-attachment.txt", "type": "text/plain"}, {"name": "响应体", "source": "264986f8-7116-4763-9d03-3c67000a81ff-attachment.json", "type": "application/json"}], "parameters": [{"name": "method", "value": "'POST'"}, {"name": "endpoint", "value": "'/auth/send-verify-code'"}, {"name": "headers", "value": "None"}, {"name": "params", "value": "{'email': 'test_110e7o@example.com'}"}, {"name": "json", "value": "None"}, {"name": "files", "value": "None"}, {"name": "token", "value": "None"}], "start": 1754623231441, "stop": 1754623232167}, {"name": "验证响应：状态码200，消息None", "status": "passed", "parameters": [{"name": "response", "value": "<Response [200]>"}, {"name": "expected_code", "value": "200"}, {"name": "expected_success", "value": "True"}, {"name": "expected_message", "value": "None"}, {"name": "is_file", "value": "False"}], "start": 1754623232168, "stop": 1754623232168}, {"name": "从数据库获取验证码：'test_110e7o@example.com'", "status": "passed", "parameters": [{"name": "email", "value": "'test_110e7o@example.com'"}], "start": 1754623233169, "stop": 1754623233175}, {"name": "发送请求：'POST' '/auth/register'", "status": "passed", "attachments": [{"name": "请求信息", "source": "151352e0-d9eb-4f76-bfc0-9c7a30d84b9c-attachment.txt", "type": "text/plain"}, {"name": "请求头", "source": "7cfde5f1-5989-4504-bc00-71bd39755255-attachment.txt", "type": "text/plain"}, {"name": "请求参数", "source": "85b0844d-6649-48bc-b84f-080946a7d86e-attachment.json", "type": "application/json"}, {"name": "响应信息", "source": "8ac34858-3579-4228-9b01-249964852909-attachment.txt", "type": "text/plain"}, {"name": "响应体", "source": "7232e7c1-81fd-4f01-a3a0-aafdbf04df25-attachment.json", "type": "application/json"}], "parameters": [{"name": "method", "value": "'POST'"}, {"name": "endpoint", "value": "'/auth/register'"}, {"name": "headers", "value": "{}"}, {"name": "params", "value": "{}"}, {"name": "json", "value": "{'username': 'test0000000000000001', 'password': 'Test123456', 'email': 'test_110e7o@example.com', 'verifyCode': '242000'}"}, {"name": "files", "value": "None"}, {"name": "token", "value": "'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0ZXN0X2l0emxpayIsImlhdCI6MTc1NDYyMzIzMCwiZXhwIjoxNzU0NjMwNDMwfQ.-rqRFiI9Cy1rB6ajmxgAtsXG9p-RM6PvHYuUrzT69Wg'"}], "start": 1754623233176, "stop": 1754623233197}, {"name": "验证响应：状态码200，消息'注册成功'", "status": "failed", "statusDetails": {"message": "AssertionError: 状态码不符：预期200，实际400，完整response：{\"success\":false,\"message\":\"用户名已被注册\",\"data\":null}\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n", "trace": "  File \"D:\\Anaconda3\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"D:\\工作记录\\项目说明\\api_test\\utils\\test_utils.py\", line 9, in assert_response\n    assert response.status_code == expected_code, \\\n"}, "parameters": [{"name": "response", "value": "<Response [400]>"}, {"name": "expected_code", "value": "200"}, {"name": "expected_success", "value": "True"}, {"name": "expected_message", "value": "'注册成功'"}, {"name": "is_file", "value": "False"}], "start": 1754623233197, "stop": 1754623233199}], "attachments": [{"name": "失败详情", "source": "54161456-e632-4d96-a0e1-c571b75ef2c9-attachment.txt", "type": "text/plain"}, {"name": "请求数据", "source": "2cea9c46-553b-44eb-a537-fcd8e8677c8a-attachment.json", "type": "application/json"}, {"name": "log", "source": "12913d99-10e3-412d-be0c-7ed954a6c285-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "f4d6e12c-d4f8-43f3-ac2b-72709b224a0a-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case", "value": "{'case_id': 'auth_003', 'name': '用户名长度为20位（最大值）', 'method': 'POST', 'url': '/auth/register', 'json': {'username': 'test0000000000000001', 'password': 'Test123456', 'email': 'test_110e7o@example.com', 'verifyCode': '{verify_code}'}, 'expected_code': 200, 'expected_success': True, 'expected_message': '注册成功'}"}], "start": 1754623231441, "stop": 1754623233202, "uuid": "e881d8e5-08fc-4118-b258-c1cd33149b1c", "historyId": "ba5de95ad213a06df03ad3d0736a3f04", "testCaseId": "de18b51a986ebd96b4485f2c6341275e", "fullName": "tests.test_user_auth#test_user_auth", "labels": [{"name": "feature", "value": "用户认证模块"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_user_auth"}, {"name": "host", "value": "CYJ"}, {"name": "thread", "value": "24256-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_user_auth"}], "titlePath": ["tests", "test_user_auth.py"]}