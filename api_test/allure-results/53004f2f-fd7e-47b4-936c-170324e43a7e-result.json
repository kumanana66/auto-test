{"name": "test_user_auth[case18]", "status": "failed", "statusDetails": {"message": "AssertionError: 状态码不符：预期401，实际403，完整response：<Response [403]>\nassert 403 == 401\n +  where 403 = <Response [403]>.status_code", "trace": "case = {'case_id': 'auth_019', 'expected_code': 401, 'expected_message': '密码错误，还可重试4次', 'expected_success': False, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5NzEyMDUsImV4cCI6MTc1Mzk3ODQwNX0.WOAASegbEyRvR0DOK0AgvdOiIqEWAahr1Gst5AAZ3bQ'\nsmall_jpg_image = 'small_1412.jpg', large_jpg_image = 'large_8836.jpg'\nsmall_png_image = 'small_2815.png', large_png_image = 'large_5294.png'\nnon_image_file = 'test_2732.txt'\n\n    @allure.feature(\"用户认证模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_user_auth(\n        case,\n        auth_token,\n        small_jpg_image,\n        large_jpg_image,\n        small_png_image,\n        large_png_image,\n        non_image_file\n    ):\n        allure.story(case[\"name\"])\n        allure.title(f\"{case['case_id']}: {case['name']}\")\n    \n        # 文件映射：用例文件名 -> 实际测试文件\n        file_map = {\n            \"test_avatar.jpg\": small_jpg_image,\n            \"large_avatar.jpg\": large_jpg_image,\n            \"test_avatar.png\": small_png_image,\n            \"large_avatar.png\": large_png_image,\n            \"test_file.txt\": non_image_file\n        }\n    \n        # 预处理请求\n        request_data = preprocess_request(case, auth_token, file_map)\n    \n        # 注册用例单独处理验证码\n        if (case[\"case_id\"].startswith(\"auth_00\")\n            and case[\"method\"] == \"POST\"\n            and case[\"url\"] == \"/auth/register\"):\n    \n            # 获取注册邮箱\n            email = request_data[\"json\"][\"email\"]\n            # 发送并获取验证码\n            verify_code = send_and_get_verify_code(email)\n            # 填充验证码到请求参数\n            request_data[\"json\"][\"verifyCode\"] = verify_code\n    \n        # 发送请求\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            files=request_data.get(\"files\"),\n            token=auth_token if case[\"case_id\"] != \"auth_029\" else None  # 未登录用例移除token\n        )\n    \n        # 断言\n>       assert_response(\n            response,\n            expected_code=case[\"expected_code\"],\n            expected_success=case.get(\"expected_success\"),\n            expected_message=case.get(\"expected_message\")\n        )\n\ntests\\test_user_auth.py:79: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [403]>, expected_code = 401, expected_success = False\nexpected_message = '密码错误，还可重试4次'\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response}\"\nE       AssertionError: 状态码不符：预期401，实际403，完整response：<Response [403]>\nE       assert 403 == 401\nE        +  where 403 = <Response [403]>.status_code\n\nutils\\test_utils.py:7: AssertionError"}, "steps": [{"name": "发送请求：'POST' '/auth/login'", "status": "passed", "attachments": [{"name": "请求信息", "source": "6edbb891-75e7-4179-91d8-e01333110eaa-attachment.json", "type": "application/json"}, {"name": "响应信息", "source": "8ef3c5a6-fa15-4cc3-9b1f-ff4d11941a46-attachment.txt", "type": "text/plain"}, {"name": "响应体", "source": "02afe7cb-3671-4a61-aabf-38feca3322d1-attachment.json", "type": "application/json"}], "parameters": [{"name": "method", "value": "'POST'"}, {"name": "endpoint", "value": "'/auth/login'"}, {"name": "headers", "value": "{}"}, {"name": "params", "value": "{}"}, {"name": "json", "value": "{'username': 'admin1155', 'password': 'Wrong123'}"}, {"name": "files", "value": "None"}, {"name": "token", "value": "'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5NzEyMDUsImV4cCI6MTc1Mzk3ODQwNX0.WOAASegbEyRvR0DOK0AgvdOiIqEWAahr1Gst5AAZ3bQ'"}], "start": 1753971266763, "stop": 1753971267046}, {"name": "验证响应：状态码401，消息'密码错误，还可重试4次'", "status": "failed", "statusDetails": {"message": "AssertionError: 状态码不符：预期401，实际403，完整response：<Response [403]>\nassert 403 == 401\n +  where 403 = <Response [403]>.status_code\n", "trace": "  File \"D:\\Anaconda3\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"D:\\工作记录\\项目说明\\api_test\\utils\\test_utils.py\", line 7, in assert_response\n    assert response.status_code == expected_code, \\\n"}, "parameters": [{"name": "response", "value": "<Response [403]>"}, {"name": "expected_code", "value": "401"}, {"name": "expected_success", "value": "False"}, {"name": "expected_message", "value": "'密码错误，还可重试4次'"}], "start": 1753971267047, "stop": 1753971267047}], "parameters": [{"name": "case", "value": "{'case_id': 'auth_019', 'name': '密码错误登录', 'method': 'POST', 'url': '/auth/login', 'json': {'username': 'admin1155', 'password': 'Wrong123'}, 'expected_code': 401, 'expected_success': False, 'expected_message': '密码错误，还可重试4次'}"}], "start": 1753971266763, "stop": 1753971267048, "uuid": "87c07e4e-a708-4b8c-ad3f-f117e85a8cb4", "historyId": "73a21e24c30644f4ccf646df1483681d", "testCaseId": "de18b51a986ebd96b4485f2c6341275e", "fullName": "tests.test_user_auth#test_user_auth", "labels": [{"name": "feature", "value": "用户认证模块"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_user_auth"}, {"name": "host", "value": "CYJ"}, {"name": "thread", "value": "25240-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_user_auth"}], "titlePath": ["tests", "test_user_auth.py"]}