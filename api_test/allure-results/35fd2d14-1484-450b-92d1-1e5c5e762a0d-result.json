{"name": "test_user_auth[case24]", "status": "failed", "statusDetails": {"message": "AssertionError: 状态码不符：预期403，实际200，完整response：{\"success\":false,\"message\":\"仅支持JPG、PNG格式的图片\",\"data\":null}\nassert 200 == 403\n +  where 200 = <Response [200]>.status_code", "trace": "case = {'case_id': 'auth_025', 'expected_code': 403, 'expected_message': '文件大小不能超过2MB', 'expected_success': False, ...}\ntest_user = {'email': 'test_zmvfhj@example.com', 'token': 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0ZXN0X3ptdmZoaiIsImlhdCI6MTc1NDk3NTAwMSwiZXhwIjoxNzU0OTgyMjAxfQ.i3JkAimtcyz1yqWPCRdH-kfWcH8ffymEeYX-NelYzHc', 'username': 'test_zmvfhj'}\nimage_fixtures = {'large_jpg_image': 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmpbxe2uny7.jpg', 'large_png_image': 'C:\\\\Users\\\\huawei\\...ata\\\\Local\\\\Temp\\\\tmpyu5uu0ek.txt', 'small_jpg_image': 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmp3p64exgx.jpg', ...}\n\n    @allure.feature(\"用户认证模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_user_auth(case, test_user, image_fixtures):\n        allure.story(case[\"name\"])\n        allure.title(f\"{case['case_id']}: {case['name']}\")\n        logger.info(f\"开始执行用例: {case['case_id']} - {case['name']}\")\n    \n        # 1. 文件映射（仅文件上传用例需要）\n        file_map = {\n            \"test_avatar.jpg\": image_fixtures[\"small_jpg_image\"],\n            \"large_avatar.jpg\": image_fixtures[\"large_jpg_image\"],\n            \"test_avatar.png\": image_fixtures[\"small_png_image\"],\n            \"large_avatar.png\": image_fixtures[\"large_png_image\"],\n            \"test_file.txt\": image_fixtures[\"non_image_file\"]\n        }\n    \n        # 2. 预处理请求\n        request_data = preprocess_request(case, test_user[\"token\"], file_map)\n    \n        # 3. 处理验证码场景（仅当用例需要时）\n        json_data = request_data.get(\"json\", {})\n        if not isinstance(json_data, dict):\n            json_data = {}\n            logger.warning(\"json_data不是字典类型，已初始化为空字典\")\n    \n        # 判断是否需要处理验证码\n        if need_verify_code(case):\n            # 处理verifyCode占位符\n            if json_data.get(\"verifyCode\") == \"{verify_code}\":\n                email = json_data.get(\"email\")\n                assert email is not None, \"请求中未包含email字段，无法获取验证码\"\n                verify_code = send_and_get_verify_code(email)\n                json_data[\"verifyCode\"] = verify_code\n                logger.info(f\"为邮箱 {email} 填充验证码: {verify_code}\")\n    \n            # 处理verificationCode占位符\n            if json_data.get(\"verificationCode\") == \"{verify_code}\":\n                email = json_data.get(\"securityEmail\", test_user[\"email\"])\n                verify_code = send_and_get_verify_code(email)\n                json_data[\"verificationCode\"] = verify_code\n                logger.info(f\"为安全邮箱 {email} 填充验证码: {verify_code}\")\n        else:\n            logger.info(f\"用例{case['case_id']}不需要验证码，跳过发送逻辑\")\n    \n        # 4. 处理未登录场景\n        use_token = case[\"case_id\"] != \"auth_029\"\n        logger.info(f\"是否使用Token: {use_token}\")\n        current_token = test_user[\"token\"] if use_token else None\n    \n        # 5. 发送请求\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            files=request_data.get(\"files\"),\n            token=current_token\n        )\n    \n        # 6. 断言处理\n        try:\n>           assert_response(\n                response,\n                expected_code=case[\"expected_code\"],\n                expected_success=case.get(\"expected_success\"),\n                expected_message=case.get(\"expected_message\")\n            )\n\ntests\\test_user_auth.py:136: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [200]>, expected_code = 403, expected_success = False\nexpected_message = '文件大小不能超过2MB', is_file = False\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None, is_file=False):\n        \"\"\"\n        新增is_file参数：标记是否为文件下载接口（无需JSON解析）\n        \"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response.text}\"\nE       AssertionError: 状态码不符：预期403，实际200，完整response：{\"success\":false,\"message\":\"仅支持JPG、PNG格式的图片\",\"data\":null}\nE       assert 200 == 403\nE        +  where 200 = <Response [200]>.status_code\n\nutils\\test_utils.py:9: AssertionError"}, "steps": [{"name": "发送请求：'POST' '/auth/upload/avatar'", "status": "passed", "attachments": [{"name": "请求信息", "source": "fa408296-c2db-4698-bc3a-c478603f98f5-attachment.txt", "type": "text/plain"}, {"name": "请求头", "source": "6447d39c-bd18-4b60-b250-68a5c34d52d3-attachment.txt", "type": "text/plain"}, {"name": "请求参数", "source": "0018f440-4915-4dd3-ad56-89a5cff46a92-attachment.json", "type": "application/json"}, {"name": "响应信息", "source": "b0770b24-3f9d-44a0-83d1-d04e9f56ad26-attachment.txt", "type": "text/plain"}, {"name": "响应体", "source": "535ef7d5-ebc2-4480-bf3b-6187e29eab48-attachment.json", "type": "application/json"}], "parameters": [{"name": "method", "value": "'POST'"}, {"name": "endpoint", "value": "'/auth/upload/avatar'"}, {"name": "headers", "value": "{'Content-Type': 'multipart/form-data'}"}, {"name": "params", "value": "{}"}, {"name": "json", "value": "{}"}, {"name": "files", "value": "{'file': <_io.BufferedReader name='C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmpbxe2uny7.jpg'>}"}, {"name": "token", "value": "'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0ZXN0X3ptdmZoaiIsImlhdCI6MTc1NDk3NTAwMSwiZXhwIjoxNzU0OTgyMjAxfQ.i3JkAimtcyz1yqWPCRdH-kfWcH8ffymEeYX-NelYzHc'"}], "start": 1754975002447, "stop": 1754975002479}, {"name": "验证响应：状态码403，消息'文件大小不能超过2MB'", "status": "failed", "statusDetails": {"message": "AssertionError: 状态码不符：预期403，实际200，完整response：{\"success\":false,\"message\":\"仅支持JPG、PNG格式的图片\",\"data\":null}\nassert 200 == 403\n +  where 200 = <Response [200]>.status_code\n", "trace": "  File \"D:\\Anaconda3\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"D:\\工作记录\\项目说明\\api_test\\utils\\test_utils.py\", line 9, in assert_response\n    assert response.status_code == expected_code, \\\n"}, "parameters": [{"name": "response", "value": "<Response [200]>"}, {"name": "expected_code", "value": "403"}, {"name": "expected_success", "value": "False"}, {"name": "expected_message", "value": "'文件大小不能超过2MB'"}, {"name": "is_file", "value": "False"}], "start": 1754975002479, "stop": 1754975002479}], "attachments": [{"name": "失败详情", "source": "2ca1b248-3321-4eeb-a089-f45ff16e8241-attachment.txt", "type": "text/plain"}, {"name": "请求数据", "source": "0456ef00-74a7-4de4-9179-bc4da0fbed3f-attachment.json", "type": "application/json"}, {"name": "log", "source": "c964398b-0f99-423d-99d2-89624772b122-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "0ebfc0ec-1760-4658-8fba-bebe5d235cf9-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "7f355020-793e-4de0-9e4f-42bb11079364-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case", "value": "{'case_id': 'auth_025', 'name': '上传超过2MB的JPG图片', 'method': 'POST', 'url': '/auth/upload/avatar', 'headers': {'Authorization': '', 'Content-Type': 'multipart/form-data'}, 'files': {'file': 'large_avatar.jpg'}, 'expected_code': 403, 'expected_success': False, 'expected_message': '文件大小不能超过2MB'}"}], "start": 1754975002446, "stop": 1754975002483, "uuid": "d48b8805-4175-4345-ac75-e1299d7d6a27", "historyId": "88e6ba5465480524bf631e176469c47b", "testCaseId": "de18b51a986ebd96b4485f2c6341275e", "fullName": "tests.test_user_auth#test_user_auth", "labels": [{"name": "feature", "value": "用户认证模块"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_user_auth"}, {"name": "host", "value": "CYJ"}, {"name": "thread", "value": "2848-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_user_auth"}], "titlePath": ["tests", "test_user_auth.py"]}