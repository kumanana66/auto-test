{"name": "test_crawler_tasks[case16]", "status": "failed", "statusDetails": {"message": "AssertionError: 消息不符：预期数据分析已启动，实际操作成功，完整response：{\"success\":true,\"message\":\"操作成功\",\"data\":\"数据分析已启动\"}\nassert '操作成功' == '数据分析已启动'\n  - 数据分析已启动\n  + 操作成功", "trace": "case = {'case_id': 'task_017', 'expected_code': 200, 'expected_content_type': 'application/vnd.openxmlformats-officedocument.presentationml.presentation', 'headers': {'Authorization': ''}, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODc4NDUsImV4cCI6MTc1Mzk5NTA0NX0.Oz_ogO5ZJX_bimBTbEcs0WV26Ia8eNOnPqdlddL1QgY'\ntask_id = 271\n\n    @allure.feature(\"爬虫任务模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_crawler_tasks(case, auth_token, task_id):\n        allure.story(case[\"name\"])\n        allure.title(f\"{case['case_id']}: {case['name']}\")\n    \n        # 替换任务ID占位符\n        if \"{task_id}\" in case[\"url\"]:\n            case[\"url\"] = case[\"url\"].replace(\"{task_id}\", str(task_id))\n            allure.attach(f\"使用任务ID: {task_id}\", \"测试信息\", allure.attachment_type.TEXT)\n    \n        # --------------------------\n        # 关键修改：处理PPT下载的前置依赖\n        # --------------------------\n        # 1. 若当前是下载PPT的用例（task_017），先启动数据分析并等待完成\n        if case[\"case_id\"] == \"task_017\":\n            allure.attach(\"开始执行数据分析数据分析前置操作\", \"前置依赖\", allure.attachment_type.TEXT)\n    \n            # 1.1 启动数据分析\n            analyze_response = Request.send_request(\n                \"POST\", f\"/crawler/tasks/{task_id}/analyze\",  # 对应task_016的接口\n                token=auth_token\n            )\n>           assert_response(\n                analyze_response,\n                200,\n                expected_success=True,\n                expected_message=\"数据分析已启动\"  # 匹配task_016的预期消息\n            )\n\ntests\\test_crawler_tasks.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [200]>, expected_code = 200\nexpected_success = True, expected_message = '数据分析已启动'\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n        assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response.text}\"\n    \n        if response.status_code != 200:\n            return\n    \n        try:\n            json_data = response.json()\n        except:\n            assert False, f\"响应不是有效的JSON格式: {response.text}\"\n    \n        if expected_success is not None:\n            assert json_data.get(\"success\") == expected_success, \\\n                f\"success字段不符：预期{expected_success}，实际{json_data.get('success')}，完整response：{response.text}\"\n    \n        if expected_message:\n>           assert json_data.get(\"message\") == expected_message, \\\n                f\"消息不符：预期{expected_message}，实际{json_data.get('message')}，完整response：{response.text}\"\nE           AssertionError: 消息不符：预期数据分析已启动，实际操作成功，完整response：{\"success\":true,\"message\":\"操作成功\",\"data\":\"数据分析已启动\"}\nE           assert '操作成功' == '数据分析已启动'\nE             - 数据分析已启动\nE             + 操作成功\n\nutils\\test_utils.py:23: AssertionError"}, "steps": [{"name": "发送请求：'POST' '/crawler/tasks/271/analyze'", "status": "passed", "attachments": [{"name": "请求信息", "source": "41837b52-448f-4279-929c-d3d963537413-attachment.txt", "type": "text/plain"}, {"name": "请求头", "source": "09f1e0bb-2542-4206-be62-a869f6c1401f-attachment.txt", "type": "text/plain"}, {"name": "请求参数", "source": "57bf55ef-d82d-4546-a467-248e31b7e4af-attachment.json", "type": "application/json"}, {"name": "响应信息", "source": "e5c90e4a-5d69-4973-ae74-ae97fd580418-attachment.txt", "type": "text/plain"}, {"name": "响应体", "source": "8c192bd7-8746-49bb-9544-932a559e19e3-attachment.json", "type": "application/json"}], "parameters": [{"name": "method", "value": "'POST'"}, {"name": "endpoint", "value": "'/crawler/tasks/271/analyze'"}, {"name": "headers", "value": "None"}, {"name": "params", "value": "None"}, {"name": "json", "value": "None"}, {"name": "files", "value": "None"}, {"name": "token", "value": "'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODc4NDUsImV4cCI6MTc1Mzk5NTA0NX0.Oz_ogO5ZJX_bimBTbEcs0WV26Ia8eNOnPqdlddL1QgY'"}], "start": 1753987845362, "stop": 1753987845378}, {"name": "验证响应：状态码200，消息'数据分析已启动'", "status": "failed", "statusDetails": {"message": "AssertionError: 消息不符：预期数据分析已启动，实际操作成功，完整response：{\"success\":true,\"message\":\"操作成功\",\"data\":\"数据分析已启动\"}\nassert '操作成功' == '数据分析已启动'\n  - 数据分析已启动\n  + 操作成功\n", "trace": "  File \"D:\\Anaconda3\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"D:\\工作记录\\项目说明\\api_test\\utils\\test_utils.py\", line 23, in assert_response\n    assert json_data.get(\"message\") == expected_message, \\\n"}, "parameters": [{"name": "response", "value": "<Response [200]>"}, {"name": "expected_code", "value": "200"}, {"name": "expected_success", "value": "True"}, {"name": "expected_message", "value": "'数据分析已启动'"}], "start": 1753987845378, "stop": 1753987845379}], "attachments": [{"name": "测试信息", "source": "708f98a6-b1f9-44af-9520-9e6e0846b712-attachment.txt", "type": "text/plain"}, {"name": "前置依赖", "source": "c2a85d56-2498-4def-ac1a-fa1e0d2debda-attachment.txt", "type": "text/plain"}, {"name": "log", "source": "646a53a4-f243-4def-be91-b97c041c43c3-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "40b3245f-9b26-4e1b-97c3-c5bbfe3de5e2-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "58120d5a-21a1-4892-907a-82b47b8f88c7-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case", "value": "{'case_id': 'task_017', 'name': '下载分析后的PPT', 'method': 'GET', 'url': '/crawler/tasks/{task_id}/analyze/ppt', 'headers': {'Authorization': ''}, 'expected_code': 200, 'expected_content_type': 'application/vnd.openxmlformats-officedocument.presentationml.presentation'}"}], "start": 1753987845360, "stop": 1753987845381, "uuid": "17de5266-6a06-41c7-93d2-07486a9e374b", "historyId": "4f6c87790e44008db06604476be00aa8", "testCaseId": "d9da2eb06171020188c155aa066adc0e", "fullName": "tests.test_crawler_tasks#test_crawler_tasks", "labels": [{"name": "feature", "value": "爬虫任务模块"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_crawler_tasks"}, {"name": "host", "value": "CYJ"}, {"name": "thread", "value": "22580-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_crawler_tasks"}], "titlePath": ["tests", "test_crawler_tasks.py"]}