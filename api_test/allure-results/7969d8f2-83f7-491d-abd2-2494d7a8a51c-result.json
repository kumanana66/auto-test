{"name": "test_user_auth[dynamic_test_user13-case1]", "status": "failed", "statusDetails": {"message": "AssertionError: 状态码不符：预期200，实际500，完整response：{\"success\":false,\"message\":\"发送验证码失败，请稍后重试\",\"data\":null}\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code", "trace": "case = {'case_id': 'auth_002', 'expected_code': 200, 'expected_message': '注册成功', 'expected_success': True, ...}\ndynamic_test_user = None\nimage_fixtures = {'large_jpg_image': 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmpmti0wkhp.jpg', 'large_png_image': 'C:\\\\Users\\\\huawei\\...ata\\\\Local\\\\Temp\\\\tmpndac5w4r.txt', 'small_jpg_image': 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmpq8qu88rv.jpg', ...}\n\n    @allure.feature(\"用户认证模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    @pytest.mark.parametrize(\"dynamic_test_user\", CASES, indirect=True)  # 关键修正：传递单个用例而非列表\n    def test_user_auth(case, dynamic_test_user, image_fixtures):\n        allure.story(case[\"name\"])\n        allure.title(f\"{case['case_id']}: {case['name']}\")\n        logger.info(f\"开始执行用例: {case['case_id']} - {case['name']}\")\n    \n        # 1. 文件映射（仅文件上传用例需要）\n        file_map = {\n            \"test_avatar.jpg\": image_fixtures[\"small_jpg_image\"],\n            \"large_avatar.jpg\": image_fixtures[\"large_jpg_image\"],\n            \"test_avatar.png\": image_fixtures[\"small_png_image\"],\n            \"large_avatar.png\": image_fixtures[\"large_png_image\"],\n            \"test_file.txt\": image_fixtures[\"non_image_file\"]\n        }\n    \n        # 2. 确定是否使用token（基于动态用户是否存在）\n        current_token = dynamic_test_user[\"token\"] if dynamic_test_user else None\n    \n        # 3. 预处理请求\n        request_data = preprocess_request(case, current_token, file_map)\n    \n        # 4. 处理验证码（仅{verify_code}场景）\n        json_data = request_data.get(\"json\", {})\n        if not isinstance(json_data, dict):\n            json_data = {}\n            logger.warning(\"json_data不是字典类型，已初始化为空字典\")\n    \n        # 处理verifyCode占位符\n        if json_data.get(\"verifyCode\") == \"{verify_code}\":\n            email = json_data.get(\"email\")\n            assert email is not None, \"注册请求中未包含email字段，无法获取验证码\"\n>           json_data[\"verifyCode\"] = send_and_get_verify_code(email)\n\ntests\\test_user_auth.py:130: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\test_user_auth.py:39: in send_and_get_verify_code\n    assert_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [500]>, expected_code = 200, expected_success = True, expected_message = None, is_file = False\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None, is_file=False):\n        \"\"\"\n        新增is_file参数：标记是否为文件下载接口（无需JSON解析）\n        \"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response.text}\"\nE       AssertionError: 状态码不符：预期200，实际500，完整response：{\"success\":false,\"message\":\"发送验证码失败，请稍后重试\",\"data\":null}\nE       assert 500 == 200\nE        +  where 500 = <Response [500]>.status_code\n\nutils\\test_utils.py:9: AssertionError"}, "steps": [{"name": "发送请求：'POST' '/auth/send-verify-code'", "status": "passed", "attachments": [{"name": "请求信息", "source": "989c623f-4809-465a-8686-72fade909b27-attachment.txt", "type": "text/plain"}, {"name": "请求头", "source": "0331609e-216d-4e3e-b59b-c893060e4685-attachment.txt", "type": "text/plain"}, {"name": "请求参数", "source": "98619dc6-d8a1-4a83-ab0f-4f5efa19671b-attachment.json", "type": "application/json"}, {"name": "响应信息", "source": "21ed767e-35df-4b08-a0f0-cf062b797497-attachment.txt", "type": "text/plain"}, {"name": "响应体", "source": "835b9599-2f4b-4780-aa4d-1bae954cb6f3-attachment.json", "type": "application/json"}], "parameters": [{"name": "method", "value": "'POST'"}, {"name": "endpoint", "value": "'/auth/send-verify-code'"}, {"name": "headers", "value": "None"}, {"name": "params", "value": "{'email': 'test_tjkegx@example.com'}"}, {"name": "json", "value": "None"}, {"name": "files", "value": "None"}, {"name": "token", "value": "None"}], "start": 1754636789192, "stop": 1754636789463}, {"name": "验证响应：状态码200，消息None", "status": "failed", "statusDetails": {"message": "AssertionError: 状态码不符：预期200，实际500，完整response：{\"success\":false,\"message\":\"发送验证码失败，请稍后重试\",\"data\":null}\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code\n", "trace": "  File \"D:\\Anaconda3\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"D:\\工作记录\\项目说明\\api_test\\utils\\test_utils.py\", line 9, in assert_response\n    assert response.status_code == expected_code, \\\n"}, "parameters": [{"name": "response", "value": "<Response [500]>"}, {"name": "expected_code", "value": "200"}, {"name": "expected_success", "value": "True"}, {"name": "expected_message", "value": "None"}, {"name": "is_file", "value": "False"}], "start": 1754636789464, "stop": 1754636789464}], "attachments": [{"name": "log", "source": "9bba37bc-15d4-4395-b0f6-85ff1bdc8d79-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "83e1bd5b-b0a7-4e09-a09a-864ce4108ec9-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "dynamic_test_user", "value": "{'case_id': 'auth_014', 'name': '邮箱格式不正确（缺少@）', 'method': 'POST', 'url': '/auth/register', 'json': {'username': 'test_vznrah', 'password': 'Test123456', 'email': 'invalid-email', 'verifyCode': '123'}, 'expected_code': 400, 'expected_success': False, 'expected_message': '请输入正确的邮箱格式'}"}, {"name": "case", "value": "{'case_id': 'auth_002', 'name': '用户名长度为6位（最小值）', 'method': 'POST', 'url': '/auth/register', 'json': {'username': 'test01', 'password': 'Test123456', 'email': 'test_tjkegx@example.com', 'verifyCode': '{verify_code}'}, 'expected_code': 200, 'expected_success': True, 'expected_message': '注册成功'}"}], "start": 1754636789191, "stop": 1754636789465, "uuid": "e19954de-ac58-4077-be1f-97f16132d115", "historyId": "7bcf4fad88810bfd158b808f7dd85593", "testCaseId": "de18b51a986ebd96b4485f2c6341275e", "fullName": "tests.test_user_auth#test_user_auth", "labels": [{"name": "feature", "value": "用户认证模块"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_user_auth"}, {"name": "host", "value": "CYJ"}, {"name": "thread", "value": "11184-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_user_auth"}], "titlePath": ["tests", "test_user_auth.py"]}