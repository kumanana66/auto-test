{"name": "test_user_auth[case20]", "status": "failed", "statusDetails": {"message": "AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code", "trace": "case = {'case_id': 'auth_021', 'expected_code': 200, 'expected_message': '个人信息更新成功', 'expected_success': True, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODYyMzIsImV4cCI6MTc1Mzk5MzQzMn0.qdVCgfeHlD_9zIYKh8Mvt51oA-78ivXKL72S4oSmLII'\nsmall_jpg_image = 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmpmnh1r8_o.jpg'\nlarge_jpg_image = 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmppjcu8npz.jpg'\nsmall_png_image = 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmpvz5bl1r0.png'\nlarge_png_image = 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmp_09ni8ih.png'\nnon_image_file = 'C:\\\\Users\\\\huawei\\\\AppData\\\\Local\\\\Temp\\\\tmp4nbo7tm7.txt'\n\n    @allure.feature(\"用户认证模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_user_auth(case, auth_token, small_jpg_image, large_jpg_image, small_png_image, large_png_image, non_image_file):\n        allure.story(case[\"name\"])\n        allure.title(f\"{case['case_id']}: {case['name']}\")\n        logger.info(f\"开始执行用例: {case['case_id']} - {case['name']}\")\n    \n        # 文件映射\n        file_map = {\n            \"test_avatar.jpg\": small_jpg_image,\n            \"large_avatar.jpg\": large_jpg_image,\n            \"test_avatar.png\": small_png_image,\n            \"large_avatar.png\": large_png_image,\n            \"test_file.txt\": non_image_file\n        }\n    \n        # 预处理请求\n        request_data = preprocess_request(case, auth_token, file_map)\n    \n        # 注册用例处理验证码\n        if (case[\"case_id\"].startswith(\"auth_00\")\n            and case[\"method\"] == \"POST\"\n            and case[\"url\"] == \"/auth/register\"):\n    \n            email = request_data[\"json\"][\"email\"]\n            verify_code = send_and_get_verify_code(email)\n            request_data[\"json\"][\"verifyCode\"] = verify_code\n            logger.info(f\"为注册邮箱 {email} 填充验证码: {verify_code}\")\n    \n        # 4. auth_029：未登录状态上传头像\n        use_token = case[\"case_id\"] != \"auth_029\"\n        logger.info(f\"是否使用Token: {use_token}\")\n        current_token = auth_token if use_token else None\n    \n        # 发送请求\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            files=request_data.get(\"files\"),\n            token=current_token\n        )\n    \n        # 5. 增强断言信息（便于定位问题）\n        try:\n>           assert_response(\n                response,\n                expected_code=case[\"expected_code\"],\n                expected_success=case.get(\"expected_success\"),\n                expected_message=case.get(\"expected_message\")\n            )\n\ntests\\test_user_auth.py:75: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [403]>, expected_code = 200\nexpected_success = True, expected_message = '个人信息更新成功'\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response}\"\nE       AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nE       assert 403 == 200\nE        +  where 403 = <Response [403]>.status_code\n\nutils\\test_utils.py:7: AssertionError"}, "steps": [{"name": "发送请求：'PUT' '/auth/userinfo'", "status": "passed", "attachments": [{"name": "请求信息", "source": "74cc7127-055f-42dc-88cd-cb063ea113dc-attachment.txt", "type": "text/plain"}, {"name": "请求头", "source": "c269ef78-74ec-4637-9f83-da04be872883-attachment.txt", "type": "text/plain"}, {"name": "请求参数", "source": "7cf1cb9c-1413-4dc3-afd3-4fbb2f205552-attachment.json", "type": "application/json"}, {"name": "响应信息", "source": "fe4b0069-8164-4f6a-985a-dc528eb0648c-attachment.txt", "type": "text/plain"}, {"name": "响应体", "source": "49f7ce31-0f13-43b8-a991-3b1c6af5aa80-attachment.json", "type": "application/json"}], "parameters": [{"name": "method", "value": "'PUT'"}, {"name": "endpoint", "value": "'/auth/userinfo'"}, {"name": "headers", "value": "{'Authorization': 'Bearer '}"}, {"name": "params", "value": "{}"}, {"name": "json", "value": "{'oldPassword': 'admin1155', 'newPassword': 'NewTest789', 'securityEmail': 'admin1155@example.com', 'verificationCode': '{verify_code}'}"}, {"name": "files", "value": "None"}, {"name": "token", "value": "'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5ODYyMzIsImV4cCI6MTc1Mzk5MzQzMn0.qdVCgfeHlD_9zIYKh8Mvt51oA-78ivXKL72S4oSmLII'"}], "start": 1753986233370, "stop": 1753986233388}, {"name": "验证响应：状态码200，消息'个人信息更新成功'", "status": "failed", "statusDetails": {"message": "AssertionError: 状态码不符：预期200，实际403，完整response：<Response [403]>\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code\n", "trace": "  File \"D:\\Anaconda3\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"D:\\工作记录\\项目说明\\api_test\\utils\\test_utils.py\", line 7, in assert_response\n    assert response.status_code == expected_code, \\\n"}, "parameters": [{"name": "response", "value": "<Response [403]>"}, {"name": "expected_code", "value": "200"}, {"name": "expected_success", "value": "True"}, {"name": "expected_message", "value": "'个人信息更新成功'"}], "start": 1753986233389, "stop": 1753986233389}], "attachments": [{"name": "失败信息", "source": "042ca29d-8ebf-4cca-a3e1-62da947d4dd6-attachment.txt", "type": "text/plain"}, {"name": "调试信息", "source": "2d5fb992-36c9-422d-93e5-791e7458823d-attachment.txt", "type": "text/plain"}, {"name": "log", "source": "47fdb363-77e8-47cb-afae-e3a0c536583a-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "4889593d-8743-4b36-9d7e-f9f4209c9cfe-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "e512d3d2-87ca-4c10-89f4-a5ff97593267-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case", "value": "{'case_id': 'auth_021', 'name': '旧密码正确+新密码符合强度要求', 'method': 'PUT', 'url': '/auth/userinfo', 'headers': {'Authorization': 'Bearer '}, 'json': {'oldPassword': 'admin1155', 'newPassword': 'NewTest789', 'securityEmail': 'admin1155@example.com', 'verificationCode': '{verify_code}'}, 'expected_code': 200, 'expected_success': True, 'expected_message': '个人信息更新成功'}"}], "start": 1753986233368, "stop": 1753986233394, "uuid": "9cce7a34-6f89-443b-b2d7-5407880eade1", "historyId": "24f13640df5a7716fa28cd3732c78f43", "testCaseId": "de18b51a986ebd96b4485f2c6341275e", "fullName": "tests.test_user_auth#test_user_auth", "labels": [{"name": "feature", "value": "用户认证模块"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_user_auth"}, {"name": "host", "value": "CYJ"}, {"name": "thread", "value": "3924-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_user_auth"}], "titlePath": ["tests", "test_user_auth.py"]}