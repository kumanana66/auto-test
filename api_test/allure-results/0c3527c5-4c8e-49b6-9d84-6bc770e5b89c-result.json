{"name": "test_crawler_tasks[case5]", "status": "failed", "statusDetails": {"message": "AssertionError: 状态码不符：预期400，实际403，完整response：<Response [403]>\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code", "trace": "case = {'case_id': 'task_006', 'expected_code': 400, 'expected_message': '请选择时间周期', 'expected_success': False, ...}\nauth_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5NzQzMzEsImV4cCI6MTc1Mzk4MTUzMX0.Yw09K0jaEN6YMx417AveEIAIIkiF38EpQK1d9y87d1Q'\n\n    @allure.feature(\"爬虫任务模块\")\n    @pytest.mark.parametrize(\"case\", CASES)\n    def test_crawler_tasks(case, auth_token):\n        allure.story(case[\"name\"])\n        allure.title(case[\"case_id\"] + \": \" + case[\"name\"])\n    \n        # 替换任务ID占位符\n        if \"{task_id}\" in case[\"url\"]:\n            # 先创建一个测试任务获取ID\n            from utils.context import context\n            if not context.get(\"task_id\"):\n                create_response = Request.send_request(\n                    \"POST\", \"/crawler/tasks\",\n                    json={\n                        \"processName\": \"测试任务\",\n                        \"asinList\": \"B08XJ8J7SZ\",\n                        \"requiredInfo\": [\"price\"],\n                        \"platform\": \"Amazon\",\n                        \"timeCycle\": \"daily\"\n                    },\n                    token=auth_token\n                )\n                context.set(\"task_id\", create_response.json()[\"data\"][\"id\"])\n            task_id = context.get(\"task_id\")\n            case[\"url\"] = case[\"url\"].replace(\"{task_id}\", str(task_id))\n    \n        # 预处理请求\n        request_data = preprocess_request(case, auth_token)\n    \n        # 发送请求\n        response = Request.send_request(\n            method=case[\"method\"],\n            endpoint=case[\"url\"],\n            json=request_data.get(\"json\"),\n            params=request_data.get(\"params\"),\n            headers=request_data.get(\"headers\"),\n            token=auth_token\n        )\n    \n        # 断言\n>       assert_response(\n            response,\n            expected_code=case[\"expected_code\"],\n            expected_success=case.get(\"expected_success\"),\n            expected_message=case.get(\"expected_message\")\n        )\n\ntests\\test_crawler_tasks.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [403]>, expected_code = 400, expected_success = False\nexpected_message = '请选择时间周期'\n\n    @allure.step(\"验证响应：状态码{expected_code}，消息{expected_message}\")\n    def assert_response(response, expected_code, expected_success=None, expected_message=None):\n        \"\"\"验证响应结果\"\"\"\n>       assert response.status_code == expected_code, \\\n            f\"状态码不符：预期{expected_code}，实际{response.status_code}，完整response：{response}\"\nE       AssertionError: 状态码不符：预期400，实际403，完整response：<Response [403]>\nE       assert 403 == 400\nE        +  where 403 = <Response [403]>.status_code\n\nutils\\test_utils.py:7: AssertionError"}, "steps": [{"name": "发送请求：'POST' '/crawler/tasks'", "status": "passed", "attachments": [{"name": "请求信息", "source": "c55e4a20-75f2-4413-9571-79f365b5e8f4-attachment.json", "type": "application/json"}, {"name": "响应信息", "source": "e8fbf046-4a11-4ee7-a54b-98878b250059-attachment.txt", "type": "text/plain"}, {"name": "响应体", "source": "e6d2b38b-b03c-48a0-9766-14f684606c01-attachment.json", "type": "application/json"}], "parameters": [{"name": "method", "value": "'POST'"}, {"name": "endpoint", "value": "'/crawler/tasks'"}, {"name": "headers", "value": "{'Authorization': 'Bearer '}"}, {"name": "params", "value": "{}"}, {"name": "json", "value": "{'processName': '亚马逊监控', 'asinList': 'B08XJ8J7SZ,B08LGD78Q5', 'requiredInfo': ['price', 'review'], 'platform': 'Amazon'}"}, {"name": "files", "value": "None"}, {"name": "token", "value": "'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbjExNTUiLCJpYXQiOjE3NTM5NzQzMzEsImV4cCI6MTc1Mzk4MTUzMX0.Yw09K0jaEN6YMx417AveEIAIIkiF38EpQK1d9y87d1Q'"}], "start": 1753974331740, "stop": 1753974331790}, {"name": "验证响应：状态码400，消息'请选择时间周期'", "status": "failed", "statusDetails": {"message": "AssertionError: 状态码不符：预期400，实际403，完整response：<Response [403]>\nassert 403 == 400\n +  where 403 = <Response [403]>.status_code\n", "trace": "  File \"D:\\Anaconda3\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"D:\\工作记录\\项目说明\\api_test\\utils\\test_utils.py\", line 7, in assert_response\n    assert response.status_code == expected_code, \\\n"}, "parameters": [{"name": "response", "value": "<Response [403]>"}, {"name": "expected_code", "value": "400"}, {"name": "expected_success", "value": "False"}, {"name": "expected_message", "value": "'请选择时间周期'"}], "start": 1753974331791, "stop": 1753974331791}], "attachments": [{"name": "stdout", "source": "809bcf97-ab38-4156-9482-a4ec0f59a48e-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case", "value": "{'case_id': 'task_006', 'name': '周期未选择', 'method': 'POST', 'url': '/crawler/tasks', 'headers': {'Authorization': 'Bearer '}, 'json': {'processName': '亚马逊监控', 'asinList': 'B08XJ8J7SZ,B08LGD78Q5', 'requiredInfo': ['price', 'review'], 'platform': 'Amazon'}, 'expected_code': 400, 'expected_success': False, 'expected_message': '请选择时间周期'}"}], "start": 1753974331739, "stop": 1753974331795, "uuid": "fa3abd43-469e-4cf3-8a2c-2cfd1029af07", "historyId": "a916ab1511e663c1e8f244b4e3f555e5", "testCaseId": "d9da2eb06171020188c155aa066adc0e", "fullName": "tests.test_crawler_tasks#test_crawler_tasks", "labels": [{"name": "feature", "value": "爬虫任务模块"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_crawler_tasks"}, {"name": "host", "value": "CYJ"}, {"name": "thread", "value": "22344-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_crawler_tasks"}], "titlePath": ["tests", "test_crawler_tasks.py"]}